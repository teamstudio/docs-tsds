{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation This is the documentation for Teamstudio Edition 33.","title":"Documentation"},{"location":"#documentation","text":"This is the documentation for Teamstudio Edition 33.","title":"Documentation"},{"location":"legal/","text":"Legal License Agreement This documentation, as well as the software described in it, is furnished under license, the terms of which are contained in the license agreement. This documentation may be used or copied only in accordance with the terms of such license. The information contained in this documentation is subject to change without notice. We make no commitment to update the information contained in this documentation. Teamstudio assumes no responsibility or liability for technical or editorial errors or omissions that may appear in this documentation, or for the use of this documentation. Copyright Notice Teamstudio and CIAO! are registered trademarks of Teamstudio, Inc. HCL, Lotus Notes, Notes and Domino are registered trademarks of HCL Corporation. Windows is a registered trademark of Microsoft Corporation. All other trademarks are trademarks or registered trademarks of their respective owners. \u00a9 Copyright Teamstudio, Inc. All Rights Reserved.","title":"Legal"},{"location":"legal/#legal","text":"","title":"Legal"},{"location":"legal/#license-agreement","text":"This documentation, as well as the software described in it, is furnished under license, the terms of which are contained in the license agreement. This documentation may be used or copied only in accordance with the terms of such license. The information contained in this documentation is subject to change without notice. We make no commitment to update the information contained in this documentation. Teamstudio assumes no responsibility or liability for technical or editorial errors or omissions that may appear in this documentation, or for the use of this documentation.","title":"License Agreement"},{"location":"legal/#copyright-notice","text":"Teamstudio and CIAO! are registered trademarks of Teamstudio, Inc. HCL, Lotus Notes, Notes and Domino are registered trademarks of HCL Corporation. Windows is a registered trademark of Microsoft Corporation. All other trademarks are trademarks or registered trademarks of their respective owners. \u00a9 Copyright Teamstudio, Inc. All Rights Reserved.","title":"Copyright Notice"},{"location":"release/","text":"Release Notes Edition 33 is a feature release of the Teamstudio Notes tools. In addition to fixing a number of bugs, this release contains significant enhancements to the Teamstudio CIAO! features that assist in preparing templates for deployment, along with updates to all of the database templates (NTFs) used by the tools for reporting and configuration. This document describes these enhancements, along with a list of specific fixes. CIAO! Promotion Features Teamstudio CIAO! now includes new features to help ensure accurate, repeatable application builds. CIAO! has long offered a Promotion feature via the CIAO! Configuration database. This feature supports creating Promotion Paths for templates watched by CIAO! that define server and file locations where the template should be deployed. Promoting a template creates a copy of the template at the desired location, and also supports an optional Build Step to create a CIAO! version of the template automatically prior to the deployment. Edition 33 adds several new Build Steps to make it easy to prepare templates for deployment in a repeatable, consistent, and self-documenting manner \u2013 all with a single click. Similar to build systems for other types of software development, these new features help ensure each new version of a template is properly prepared for release without requiring a manual process or checklist. Significant new Build Steps include: Setting template properties such as Design Template Name and Title Defining the template ACL Changing element properties, such as clearing element-level design inheritance and Prohibit Design Refresh settings Compiling all LotusScript Signing the template with a specific ID Refreshing the design of target application(s) from the new template Detailed descriptions of the available functions are available from the Build Steps page. For more information on Promotions in general, see Promotion Paths . The new Build Steps represent a subset of the features available in Teamstudio Build Manager, which offers many additional capabilities to manage complex builds, including the ability to promote using different Notes IDs to support segregation of duties, Release Management/Deployment Tracking features, and Approval workflows. For a comparison of CIAO! and Build Manager, see Product Comparison - CIAO! and Build Manager . Upgrading CIAO! Configuration Database The updated Edition 33 CIAO! Configuration database is designed to continue working with existing Promotion Paths . A minor upgrade process is required, due to additional features added to the product. Prior versions of the CIAO! configuration database allowed free-form entry of the target server specified in the Promotion Path document, without any validation. The current version requires that target servers for promotion and design refresh actions be defined as Stored Servers , under the Resources tab in the configuration UI. Stored Server definitions can only be created by users with the [[Admin]] ACL role, and contain additional settings including defining which users are allowed to promote databases to the target server, and what other servers may be used as Design Refresh targets. For more information, see Stored Servers . To assist in the upgrade process, the CIAO! configuration now includes an agent available via Actions > Admin > Verify Stored Servers . This agent launches a wizard to scan Promotion Paths and Design Refresh steps and display the names of servers that have missing or disabled Stored Server definitions. Server names can be selected to automatically create Stored Server documents. Upgrading from a prior CIAO! template involves: Signing the new CIAO! Configuration and CIAO! Log templates with an appropriate Notes ID Refreshing the design of all CIAO! configuration and CIAO! log databases Running the Verify Stored Servers action to create server definitions as needed (only required if Promotion Paths are in use in prior version) For more information on the Verify Stored Servers action, see Stored Servers . Template Updates The Teamstudio Notes Tools utilize several Notes application templates for configuration and reporting. All templates have updated for Edition 33, including updated UI look and feel and new icons. Several templates also include usability improvements. Fix List 33.0.4 [TMS-1437] - Update code signing certificates to replace expiring certificates for the installer and Java plugins 33.0.3 [TMS-1286] - CIAO change report can fail to list all changes if Notes application has been moved [TMS-1302] - Installer does not detect Notes program locations on a clean Notes 11 install [TMS-1306] - The tools installer cannot uninstall if Notes has been moved or upgraded to a new location [TMS-1348] - Code copied from Configurator loses new lines when pasted into Notes [TMS-1366] - CIAO! configuration database should allow blank target filename in Promotion Path (to promote with source filename) [TMS-1380] - Analyzer always displays database percent usage as 0% [TMS-1381] - Analyzer displays database space allocated and space free incorrectly for databases > 4GB [TMS-1390] - Analyzer can crash evaluating formulas with large numbers of @if statements 33.0.2 [TMS-1266] - Delta crash running a report [TMS-1281] - Analyzer writes 'Filter error: Out of Memory' to the audit log for large minified documents [TMS-1300] - The message displayed for an expired key incorrectly refers to 'demonstration software' 33.0.1 [TMS-1247] - Update code signing certificates to replace expiring certificates for the installer and Java plugins [TMS-1249] - Fix Launch CIAO! action in CIAO! Configuration database [TMS-1250] - Fix Analyzer Filters Severity Definition sorting and lookup issues - upgrade existing Filters database designs to the latest template to use with the CIAO! Design Audit step 33.0.0 [TMS-109] - Reports views should sort date chronologically not alphabetically [TMS-240] - Analysis Form properties section shows red text that should be hidden [TMS-959] - Analyzer crashes intermittently on very large script libraries [TMS-1059] - Analyzer does not write computed labels in outline entries [TMS-1167] - CIAO! crashes intermittently while checking design elements in or out in Designer [TMS-1217] - Add serial key expiration dates to the about dialog [TMS-1220] - Analyzer reports are missing XPage and Page options for database Launch settings [TMS-1222] - CIAO! intermittently displays \"command not available\" error on opening [TMS-1225] - CIAO! View action to enable/disable steps should clarify it does not affect CIAO! configuration documents [TMS-1238] - CIAO does not list available versions correctly when a database is moved to a new path or server","title":"Release Notes"},{"location":"release/#release-notes","text":"Edition 33 is a feature release of the Teamstudio Notes tools. In addition to fixing a number of bugs, this release contains significant enhancements to the Teamstudio CIAO! features that assist in preparing templates for deployment, along with updates to all of the database templates (NTFs) used by the tools for reporting and configuration. This document describes these enhancements, along with a list of specific fixes.","title":"Release Notes"},{"location":"release/#ciao-promotion-features","text":"Teamstudio CIAO! now includes new features to help ensure accurate, repeatable application builds. CIAO! has long offered a Promotion feature via the CIAO! Configuration database. This feature supports creating Promotion Paths for templates watched by CIAO! that define server and file locations where the template should be deployed. Promoting a template creates a copy of the template at the desired location, and also supports an optional Build Step to create a CIAO! version of the template automatically prior to the deployment. Edition 33 adds several new Build Steps to make it easy to prepare templates for deployment in a repeatable, consistent, and self-documenting manner \u2013 all with a single click. Similar to build systems for other types of software development, these new features help ensure each new version of a template is properly prepared for release without requiring a manual process or checklist. Significant new Build Steps include: Setting template properties such as Design Template Name and Title Defining the template ACL Changing element properties, such as clearing element-level design inheritance and Prohibit Design Refresh settings Compiling all LotusScript Signing the template with a specific ID Refreshing the design of target application(s) from the new template Detailed descriptions of the available functions are available from the Build Steps page. For more information on Promotions in general, see Promotion Paths . The new Build Steps represent a subset of the features available in Teamstudio Build Manager, which offers many additional capabilities to manage complex builds, including the ability to promote using different Notes IDs to support segregation of duties, Release Management/Deployment Tracking features, and Approval workflows. For a comparison of CIAO! and Build Manager, see Product Comparison - CIAO! and Build Manager .","title":"CIAO! Promotion Features"},{"location":"release/#upgrading-ciao-configuration-database","text":"The updated Edition 33 CIAO! Configuration database is designed to continue working with existing Promotion Paths . A minor upgrade process is required, due to additional features added to the product. Prior versions of the CIAO! configuration database allowed free-form entry of the target server specified in the Promotion Path document, without any validation. The current version requires that target servers for promotion and design refresh actions be defined as Stored Servers , under the Resources tab in the configuration UI. Stored Server definitions can only be created by users with the [[Admin]] ACL role, and contain additional settings including defining which users are allowed to promote databases to the target server, and what other servers may be used as Design Refresh targets. For more information, see Stored Servers . To assist in the upgrade process, the CIAO! configuration now includes an agent available via Actions > Admin > Verify Stored Servers . This agent launches a wizard to scan Promotion Paths and Design Refresh steps and display the names of servers that have missing or disabled Stored Server definitions. Server names can be selected to automatically create Stored Server documents. Upgrading from a prior CIAO! template involves: Signing the new CIAO! Configuration and CIAO! Log templates with an appropriate Notes ID Refreshing the design of all CIAO! configuration and CIAO! log databases Running the Verify Stored Servers action to create server definitions as needed (only required if Promotion Paths are in use in prior version) For more information on the Verify Stored Servers action, see Stored Servers .","title":"Upgrading CIAO! Configuration Database"},{"location":"release/#template-updates","text":"The Teamstudio Notes Tools utilize several Notes application templates for configuration and reporting. All templates have updated for Edition 33, including updated UI look and feel and new icons. Several templates also include usability improvements.","title":"Template Updates"},{"location":"release/#fix-list","text":"","title":"Fix List"},{"location":"release/#3304","text":"[TMS-1437] - Update code signing certificates to replace expiring certificates for the installer and Java plugins","title":"33.0.4"},{"location":"release/#3303","text":"[TMS-1286] - CIAO change report can fail to list all changes if Notes application has been moved [TMS-1302] - Installer does not detect Notes program locations on a clean Notes 11 install [TMS-1306] - The tools installer cannot uninstall if Notes has been moved or upgraded to a new location [TMS-1348] - Code copied from Configurator loses new lines when pasted into Notes [TMS-1366] - CIAO! configuration database should allow blank target filename in Promotion Path (to promote with source filename) [TMS-1380] - Analyzer always displays database percent usage as 0% [TMS-1381] - Analyzer displays database space allocated and space free incorrectly for databases > 4GB [TMS-1390] - Analyzer can crash evaluating formulas with large numbers of @if statements","title":"33.0.3"},{"location":"release/#3302","text":"[TMS-1266] - Delta crash running a report [TMS-1281] - Analyzer writes 'Filter error: Out of Memory' to the audit log for large minified documents [TMS-1300] - The message displayed for an expired key incorrectly refers to 'demonstration software'","title":"33.0.2"},{"location":"release/#3301","text":"[TMS-1247] - Update code signing certificates to replace expiring certificates for the installer and Java plugins [TMS-1249] - Fix Launch CIAO! action in CIAO! Configuration database [TMS-1250] - Fix Analyzer Filters Severity Definition sorting and lookup issues - upgrade existing Filters database designs to the latest template to use with the CIAO! Design Audit step","title":"33.0.1"},{"location":"release/#3300","text":"[TMS-109] - Reports views should sort date chronologically not alphabetically [TMS-240] - Analysis Form properties section shows red text that should be hidden [TMS-959] - Analyzer crashes intermittently on very large script libraries [TMS-1059] - Analyzer does not write computed labels in outline entries [TMS-1167] - CIAO! crashes intermittently while checking design elements in or out in Designer [TMS-1217] - Add serial key expiration dates to the about dialog [TMS-1220] - Analyzer reports are missing XPage and Page options for database Launch settings [TMS-1222] - CIAO! intermittently displays \"command not available\" error on opening [TMS-1225] - CIAO! View action to enable/disable steps should clarify it does not affect CIAO! configuration documents [TMS-1238] - CIAO does not list available versions correctly when a database is moved to a new path or server","title":"33.0.0"},{"location":"analyzer/","text":"Overview You can test, debug and document your database design using Teamstudio Analyzer. Analyzer highlights functional dependencies within the design, verifies compliance with design standards, and uncovers compatibility issues before an upgrade. How does Analyzer work? It reads the design of your Notes database or template. It analyzes this design. It builds a separate Notes database that represents the design. The new database contains a document for each design element (such as a form, view, subform or field). Each document contains the fields that represent the properties or attributes of the related design element. Analyzer can audit your design by testing it against a pre-defined set of criteria called filters. The Analyzer audit function identifies design elements that match the filter criteria and writes these audit results to an output database. This audit testing helps flag standards violations and potential performance problems for further review.","title":"Overview"},{"location":"analyzer/#overview","text":"You can test, debug and document your database design using Teamstudio Analyzer. Analyzer highlights functional dependencies within the design, verifies compliance with design standards, and uncovers compatibility issues before an upgrade. How does Analyzer work? It reads the design of your Notes database or template. It analyzes this design. It builds a separate Notes database that represents the design. The new database contains a document for each design element (such as a form, view, subform or field). Each document contains the fields that represent the properties or attributes of the related design element. Analyzer can audit your design by testing it against a pre-defined set of criteria called filters. The Analyzer audit function identifies design elements that match the filter criteria and writes these audit results to an output database. This audit testing helps flag standards violations and potential performance problems for further review.","title":"Overview"},{"location":"analyzer/audit/","text":"Auditing Overview You are often faced with the difficult task of examining a database design to ensure it can meet some, unique, criteria. Examples of this are: Is the design compatible with the next release of Notes? Can the design be moved to another environment? Does it meet company standards? Analyzer's analysis function helps with these decisions by extensively documenting the attributes and contents of a design, and by providing views that help answer many of these questions. Sometimes, however, you must examine a combination of elements and their attributes to properly answer a question. The audit function can help by letting you define requirements and then test the design of the database or template to make sure it meets the requirements. Many of these requirements are reusable, such as standards or common coding errors. Others will have a unique temporary nature, such as a special change request or compatibility issues raised by upgrades to a new version of Notes. Auditor includes some predefined tests that give you a head start on defining typical tests such as locating the following: Common coding errors Potential performance problems Violations of typical organizational standards Potential application upgrade problems Potential Web or O/S compatibility problems","title":"Auditing Overview"},{"location":"analyzer/audit/#auditing-overview","text":"You are often faced with the difficult task of examining a database design to ensure it can meet some, unique, criteria. Examples of this are: Is the design compatible with the next release of Notes? Can the design be moved to another environment? Does it meet company standards? Analyzer's analysis function helps with these decisions by extensively documenting the attributes and contents of a design, and by providing views that help answer many of these questions. Sometimes, however, you must examine a combination of elements and their attributes to properly answer a question. The audit function can help by letting you define requirements and then test the design of the database or template to make sure it meets the requirements. Many of these requirements are reusable, such as standards or common coding errors. Others will have a unique temporary nature, such as a special change request or compatibility issues raised by upgrades to a new version of Notes. Auditor includes some predefined tests that give you a head start on defining typical tests such as locating the following: Common coding errors Potential performance problems Violations of typical organizational standards Potential application upgrade problems Potential Web or O/S compatibility problems","title":"Auditing Overview"},{"location":"analyzer/auditcomponents/","text":"Auditor Components Auditor uses several databases to identify the design elements you want to find, as described in the following table: Database Description Filters (based on deanfltr.ntf) Describes the criteria to use when auditing a design. Analysis (for example, analysis.nsf) Created by Analyzer when a design is analyzed. Audit output (for example, auditreport.nsf) Documents the instances of design elements selected by Auditor which match filters. When Auditor runs, it retrieves the filter(s) from the Filters database and scans the analysis file looking for design elements that match those filter(s). For each match, Auditor creates a document in the audit output database.","title":"Auditor Components"},{"location":"analyzer/auditcomponents/#auditor-components","text":"Auditor uses several databases to identify the design elements you want to find, as described in the following table: Database Description Filters (based on deanfltr.ntf) Describes the criteria to use when auditing a design. Analysis (for example, analysis.nsf) Created by Analyzer when a design is analyzed. Audit output (for example, auditreport.nsf) Documents the instances of design elements selected by Auditor which match filters. When Auditor runs, it retrieves the filter(s) from the Filters database and scans the analysis file looking for design elements that match those filter(s). For each match, Auditor creates a document in the audit output database.","title":"Auditor Components"},{"location":"analyzer/auditing/","text":"Auditing a Design On the Audit tab, you can select the Enable Auditor check box to have Analyzer determine whether any of your design elements match a pre-defined set of filters. Auditor writes the audit results to an audit output database that you specify. You can investigate issues with the design of your database. If you don\u2019t want Analyzer to check every design element in your database during the audit, specify individual design elements on the Design Notes tab. See also Using the Design Notes Tab . Each time you run the audit function, Analyzer first examines and updates the analysis file for the targeted design. When Analyzer generates audit output documents they are linked to the associated documents in the analysis database, providing full details of each design element selected by the audit. To disable Auditor, clear the Enable Auditor check box. To select the filter database You can identify a filter database to use as follows: On the Audit tab, click Choose Filter DB . On the Select Filter Database window, click Select . You see the Open/Browse window. Select the Teamstudio Analyzer Filter Database you want. Note Teamstudio installs a sample filter database in your Notes database directory. Click Open then click OK . From the Select filter dropdown, select the filter set you want to run against your database. Rather than run Auditor multiple times against many different filter sets, you should combine the filters you want (for example, performance problems and standards violations) within a set to be processed together. See also Analyzer's Filters","title":"Auditing a Design"},{"location":"analyzer/auditing/#auditing-a-design","text":"On the Audit tab, you can select the Enable Auditor check box to have Analyzer determine whether any of your design elements match a pre-defined set of filters. Auditor writes the audit results to an audit output database that you specify. You can investigate issues with the design of your database. If you don\u2019t want Analyzer to check every design element in your database during the audit, specify individual design elements on the Design Notes tab. See also Using the Design Notes Tab . Each time you run the audit function, Analyzer first examines and updates the analysis file for the targeted design. When Analyzer generates audit output documents they are linked to the associated documents in the analysis database, providing full details of each design element selected by the audit. To disable Auditor, clear the Enable Auditor check box.","title":"Auditing a Design"},{"location":"analyzer/auditing/#to-select-the-filter-database","text":"You can identify a filter database to use as follows: On the Audit tab, click Choose Filter DB . On the Select Filter Database window, click Select . You see the Open/Browse window. Select the Teamstudio Analyzer Filter Database you want. Note Teamstudio installs a sample filter database in your Notes database directory. Click Open then click OK . From the Select filter dropdown, select the filter set you want to run against your database. Rather than run Auditor multiple times against many different filter sets, you should combine the filters you want (for example, performance problems and standards violations) within a set to be processed together. See also Analyzer's Filters","title":"To select the filter database"},{"location":"analyzer/auditoutput/","text":"Selecting an Audit Output Database Analyzer Audit places its results in the audit output database you designate. The audit output database is always based on Teamstudio\u2019s tmslogs.ntf template, whether you select an existing output database or create a new one. To use an existing output database Click Select to display a list of existing databases that are based on the tmslogs.ntf template. Select a database. Click Open . To create a new database Enter the server and output database name, including the path. The new database is created automatically based on the tmslogs.ntf template. By default, Auditor checks every design element in your database. If you don\u2019t want Analyzer to audit every design element, specify individual design elements on the Design Notes tab. See also Using the Design Notes Tab . After you select the Enable Auditor check box and a filter set, and you specify the output database, begin Analyzing your database. Note You cannot run Auditor without also running Analyzer. When you click OK on the Teamstudio Analyzer tab to start Analyzer Audit, the database design is also analyzed. The design element subset you selected to Audit on the Design Notes tab also applies to Analyzer. If you are ready to begin, see Starting the Analysis .","title":"Selecting an Audit Output Database"},{"location":"analyzer/auditoutput/#selecting-an-audit-output-database","text":"Analyzer Audit places its results in the audit output database you designate. The audit output database is always based on Teamstudio\u2019s tmslogs.ntf template, whether you select an existing output database or create a new one.","title":"Selecting an Audit Output Database"},{"location":"analyzer/auditoutput/#to-use-an-existing-output-database","text":"Click Select to display a list of existing databases that are based on the tmslogs.ntf template. Select a database. Click Open .","title":"To use an existing output database"},{"location":"analyzer/auditoutput/#to-create-a-new-database","text":"Enter the server and output database name, including the path. The new database is created automatically based on the tmslogs.ntf template. By default, Auditor checks every design element in your database. If you don\u2019t want Analyzer to audit every design element, specify individual design elements on the Design Notes tab. See also Using the Design Notes Tab . After you select the Enable Auditor check box and a filter set, and you specify the output database, begin Analyzing your database. Note You cannot run Auditor without also running Analyzer. When you click OK on the Teamstudio Analyzer tab to start Analyzer Audit, the database design is also analyzed. The design element subset you selected to Audit on the Design Notes tab also applies to Analyzer. If you are ready to begin, see Starting the Analysis .","title":"To create a new database"},{"location":"analyzer/auditusingoutput/","text":"Using the Audit Output Database You can see the database audit results in the Analyzer Auditor\\All Output view. Documents are sorted by database title, the date and time Auditor was run and design element categories. Running Audit against the same database at different times gives you results grouped for each date and time reported. Note When you open the Audit output database, you may notice views in the navigator pane that do not apply to the Audit function. That is because the database is based on Teamstudio's tmslogs.ntf template, which is a general purpose template designed for use with all of our products. Since the Auditor only creates documents that appear in its own views, you may ignore the other views when using the database for auditing purposes. Auditor creates a document in its output database each time it finds a design object that matches any of the filters processed during the audit run. A design element can appear more than once under its design category since a document is created for each filter a design element matches. Expand a design element category to learn which design elements matched the filters. Design elements that matched a filter are divided into severity categories based on those defined in the Filters database. In this example, several design elements match filters assigned low and medium severity. If the item selected is a design element (for example, a form), the parent of the design element (for example, the database) is listed in the Found In column. If the item selected is a component of a design element (for example, a field within a form), its host design element is shown under the Found In column. The filter the design element matched is listed in the Filter column.","title":"Using the Audit Output Database"},{"location":"analyzer/auditusingoutput/#using-the-audit-output-database","text":"You can see the database audit results in the Analyzer Auditor\\All Output view. Documents are sorted by database title, the date and time Auditor was run and design element categories. Running Audit against the same database at different times gives you results grouped for each date and time reported. Note When you open the Audit output database, you may notice views in the navigator pane that do not apply to the Audit function. That is because the database is based on Teamstudio's tmslogs.ntf template, which is a general purpose template designed for use with all of our products. Since the Auditor only creates documents that appear in its own views, you may ignore the other views when using the database for auditing purposes. Auditor creates a document in its output database each time it finds a design object that matches any of the filters processed during the audit run. A design element can appear more than once under its design category since a document is created for each filter a design element matches. Expand a design element category to learn which design elements matched the filters. Design elements that matched a filter are divided into severity categories based on those defined in the Filters database. In this example, several design elements match filters assigned low and medium severity. If the item selected is a design element (for example, a form), the parent of the design element (for example, the database) is listed in the Found In column. If the item selected is a component of a design element (for example, a field within a form), its host design element is shown under the Found In column. The filter the design element matched is listed in the Filter column.","title":"Using the Audit Output Database"},{"location":"analyzer/comments/","text":"Adding Comments to Design Elements You can add user data, for example, comments, description, change history, or development status to the Analysis documents for major design elements. To view the comment area, click the Note tab at the top of an analysis document. Double-click the document to make it editable and to display the development status options within the Note area. Items such as buttons and hotspots that Analyzer creates documents for do not have a corresponding design element in the application database. Consequently, they are difficult to identify reliably from one run to the next. Accordingly, the Note field is not included on those documents. Field documents do contain the Note field since they rarely change names and aliases. You can create a separate document to record any additional information about a major design element document in the analysis database (for example, a description of a design element or maintenance history). You can access a sample document, named Additional Documentation Sample , from the Create menu. To record additional information about a major design element To create the document, select the design element you want, and select Additional Documentation Sample from the Create menu. This sample form contains a title field ( fspvName_WB ) and a rich text body field in which to store your information. You can modify these fields to meet your organization's documentation requirements. See Customizing the Template , for more information. Complete and save the form. The saved document will display in the AllDocuments view under the design element you created it for. Note The Additional Documentation feature is only available for design elements and fields.","title":"Adding Comments to Design Elements"},{"location":"analyzer/comments/#adding-comments-to-design-elements","text":"You can add user data, for example, comments, description, change history, or development status to the Analysis documents for major design elements. To view the comment area, click the Note tab at the top of an analysis document. Double-click the document to make it editable and to display the development status options within the Note area. Items such as buttons and hotspots that Analyzer creates documents for do not have a corresponding design element in the application database. Consequently, they are difficult to identify reliably from one run to the next. Accordingly, the Note field is not included on those documents. Field documents do contain the Note field since they rarely change names and aliases. You can create a separate document to record any additional information about a major design element document in the analysis database (for example, a description of a design element or maintenance history). You can access a sample document, named Additional Documentation Sample , from the Create menu.","title":"Adding Comments to Design Elements"},{"location":"analyzer/comments/#to-record-additional-information-about-a-major-design-element","text":"To create the document, select the design element you want, and select Additional Documentation Sample from the Create menu. This sample form contains a title field ( fspvName_WB ) and a rich text body field in which to store your information. You can modify these fields to meet your organization's documentation requirements. See Customizing the Template , for more information. Complete and save the form. The saved document will display in the AllDocuments view under the design element you created it for. Note The Additional Documentation feature is only available for design elements and fields.","title":"To record additional information about a major design element"},{"location":"analyzer/customizing/","text":"Customizing the Template When Analyzer is installed, it creates a database template file called ivesdean.ntf , which has a template name of DEANTemplate. Analyzer uses this template to create the analysis output database. The database stores the analysis documents for one or more Notes template or database designs. Note LotusScript, formula code, Java and JavaScript are always written as rich text. This is because plain text fields are limited to around 15K in size by the Notes client, and code can be as large as 64K. Since you cannot refer to rich text fields in view selection formula, this may at first seem limiting. You can create an agent which performs an @Abstract operation on the rich text, converting it to plain text, truncating it at some size less than 15K. For example: FIELD ScriptBegins := @If(fflpScripts=\"\";\"\";@Abstract([Save]:[Abbrev];14999;\"\";\"fflpScript\")) You can customize the template to create additional views or Notes agents. To create a template you can customize From Notes, make a new copy of the Teamstudio Analyzer Template ( ivesdean.ntf ). Open the Database Properties window for the new file. Then click the Design tab. From the Design tab, rename the new template. In the Database Categories box, enter DEANTemplate . When creating a new output database, you base its design on a template that you select from a list of all the templates you have created. You can add fields to the forms in the output database template. The fields can hold information, such as comments, that you add to the database. These additional fields are not overwritten when the analysis output is updated. Note The content of user-defined fields is only preserved between Analyzer runs for design notes and fields. Similarly, you can add forms to the output database template to hold any data you want to capture. You can create and edit these forms, optionally using formulas and scripts that extract data created by Analyzer into your form. Note While a user-defined form is not overwritten when the analysis output is updated, the documents created with user-defined forms will only be preserved between Analyzer runs for main documents and responses to design notes and fields.","title":"Customizing the Template"},{"location":"analyzer/customizing/#customizing-the-template","text":"When Analyzer is installed, it creates a database template file called ivesdean.ntf , which has a template name of DEANTemplate. Analyzer uses this template to create the analysis output database. The database stores the analysis documents for one or more Notes template or database designs. Note LotusScript, formula code, Java and JavaScript are always written as rich text. This is because plain text fields are limited to around 15K in size by the Notes client, and code can be as large as 64K. Since you cannot refer to rich text fields in view selection formula, this may at first seem limiting. You can create an agent which performs an @Abstract operation on the rich text, converting it to plain text, truncating it at some size less than 15K. For example: FIELD ScriptBegins := @If(fflpScripts=\"\";\"\";@Abstract([Save]:[Abbrev];14999;\"\";\"fflpScript\")) You can customize the template to create additional views or Notes agents.","title":"Customizing the Template"},{"location":"analyzer/customizing/#to-create-a-template-you-can-customize","text":"From Notes, make a new copy of the Teamstudio Analyzer Template ( ivesdean.ntf ). Open the Database Properties window for the new file. Then click the Design tab. From the Design tab, rename the new template. In the Database Categories box, enter DEANTemplate . When creating a new output database, you base its design on a template that you select from a list of all the templates you have created. You can add fields to the forms in the output database template. The fields can hold information, such as comments, that you add to the database. These additional fields are not overwritten when the analysis output is updated. Note The content of user-defined fields is only preserved between Analyzer runs for design notes and fields. Similarly, you can add forms to the output database template to hold any data you want to capture. You can create and edit these forms, optionally using formulas and scripts that extract data created by Analyzer into your form. Note While a user-defined form is not overwritten when the analysis output is updated, the documents created with user-defined forms will only be preserved between Analyzer runs for main documents and responses to design notes and fields.","title":"To create a template you can customize"},{"location":"analyzer/deleted/","text":"Deleted Items Analyzer moves the deleted element data and any user documentation for previously deleted design elements. You can find the data under the Deleted Items category, in the All Documents view. You can identify the deleted element and any of its children documents, such as fields and buttons, by the Delete icon, a document with a red X through it. If you no longer need the deleted element data and its documentation, simply delete them from the Analysis file using the Delete hierarchy button. Note You can drag deleted fields to the Field X-Ref folder to get a field cross reference report to show usage of the deleted field. See References to a Field , for more information.","title":"Deleted Items"},{"location":"analyzer/deleted/#deleted-items","text":"Analyzer moves the deleted element data and any user documentation for previously deleted design elements. You can find the data under the Deleted Items category, in the All Documents view. You can identify the deleted element and any of its children documents, such as fields and buttons, by the Delete icon, a document with a red X through it. If you no longer need the deleted element data and its documentation, simply delete them from the Analysis file using the Delete hierarchy button. Note You can drag deleted fields to the Field X-Ref folder to get a field cross reference report to show usage of the deleted field. See References to a Field , for more information.","title":"Deleted Items"},{"location":"analyzer/designtab/","text":"Using the Design Notes Tab You can select individual design elements for analysis from the Design Notes tab. By default, every category and design element is selected, as indicated by the checkmarks. All of the categories are children of Everything . To see a category\u2019s design elements without affecting currently selected or deselected items, click the plus sign beside the category. Here is how Analyzer treats selected categories and selected design elements: If you select a design element, Analyzer analyzes it and creates a document for it in the output database. If the design element has changed, the new document overwrites the existing document. If the design element has not changed, the new document overwrites the existing document only if you have cleared the Incremental update check box on the Teamstudio Analyzer tab. If you select a category, Analyzer checks the category, identifies the elements and documents deleted since the last analysis, and moves the Analysis Document to the Deleted Documents category in the output database.","title":"Using the Design Notes Tab"},{"location":"analyzer/designtab/#using-the-design-notes-tab","text":"You can select individual design elements for analysis from the Design Notes tab. By default, every category and design element is selected, as indicated by the checkmarks. All of the categories are children of Everything . To see a category\u2019s design elements without affecting currently selected or deselected items, click the plus sign beside the category. Here is how Analyzer treats selected categories and selected design elements: If you select a design element, Analyzer analyzes it and creates a document for it in the output database. If the design element has changed, the new document overwrites the existing document. If the design element has not changed, the new document overwrites the existing document only if you have cleared the Incremental update check box on the Teamstudio Analyzer tab. If you select a category, Analyzer checks the category, identifies the elements and documents deleted since the last analysis, and moves the Analysis Document to the Deleted Documents category in the output database.","title":"Using the Design Notes Tab"},{"location":"analyzer/filters/","text":"Filters Overview Filters identify design objects you want to focus on. You define filters by specifying the attributes and properties that meet your criteria. Analyzer Filter Examples Use of @dblookup in a keyword definition (potential performance problem) Editable text fields without Help text (violations of organizational standards) Non-computed fields ending in \"_1\" (common coding errors) Existence of a certain design element (for example, Help Using, Help About or a particular form) Use of specific field properties (for example, Date/Time fields that don't display the year with four digits) Auditor scans the analysis output looking for design objects that match the filter criteria and documents each occurrence in the audit output database. Since most development organizations have their own standards and procedures, you may want to add your own filters, modify the severity to match terms and criteria you use, and classify filters with terms you normally use. With Auditor, it's easy to customize filters and their attributes to meet your organization's needs. You can find the filters and definitions of their attributes (class and severity) in the Analyzer Filter database. The Analyzer Filters database included in this release is deanfltr.ntf . Prior to Edition 24, it was deanfltr.nsf . This is so the install database does not overwrite the filter database currently on your system. If you have modified the database in any way, you will not lose any changes or customization. However, this means that you must create a new filter database if you want to incorporate the bug fixes included with this release. To upgrade your filters database Make a copy of your current Analyzer Filters Database ( deanfltr.nsf ) Create a new database ( File > Database > New ) and name it deanfltr.nsf Select Analyzer Filters Template from the template box. Click Yes when Notes asks if you want to overwrite the existing one. (It's OK; you made a copy) Copy all your custom filters into this new database from your old one. The attribute, Class, groups the same type of filters together. For example, filters that identify design techniques that can cause problems when you upgrade to a new Notes Release are typically categorized as Release \"A\" to Release \"B\" Upgrade Issues. Therefore, you can set up a class called Release A to Release B Upgrade or simply, Upgrade. Then, when you define a filter that fits this category, you assign it to the Upgrade class. At run-time, you tell Auditor which class of filters to use. The Severity attribute prioritizes the documents stored in the audit output database, helping you to systematically review and act on the items selected.","title":"Filters Overview"},{"location":"analyzer/filters/#filters-overview","text":"Filters identify design objects you want to focus on. You define filters by specifying the attributes and properties that meet your criteria.","title":"Filters Overview"},{"location":"analyzer/filters/#analyzer-filter-examples","text":"Use of @dblookup in a keyword definition (potential performance problem) Editable text fields without Help text (violations of organizational standards) Non-computed fields ending in \"_1\" (common coding errors) Existence of a certain design element (for example, Help Using, Help About or a particular form) Use of specific field properties (for example, Date/Time fields that don't display the year with four digits) Auditor scans the analysis output looking for design objects that match the filter criteria and documents each occurrence in the audit output database. Since most development organizations have their own standards and procedures, you may want to add your own filters, modify the severity to match terms and criteria you use, and classify filters with terms you normally use. With Auditor, it's easy to customize filters and their attributes to meet your organization's needs. You can find the filters and definitions of their attributes (class and severity) in the Analyzer Filter database. The Analyzer Filters database included in this release is deanfltr.ntf . Prior to Edition 24, it was deanfltr.nsf . This is so the install database does not overwrite the filter database currently on your system. If you have modified the database in any way, you will not lose any changes or customization. However, this means that you must create a new filter database if you want to incorporate the bug fixes included with this release.","title":"Analyzer Filter Examples"},{"location":"analyzer/filters/#to-upgrade-your-filters-database","text":"Make a copy of your current Analyzer Filters Database ( deanfltr.nsf ) Create a new database ( File > Database > New ) and name it deanfltr.nsf Select Analyzer Filters Template from the template box. Click Yes when Notes asks if you want to overwrite the existing one. (It's OK; you made a copy) Copy all your custom filters into this new database from your old one. The attribute, Class, groups the same type of filters together. For example, filters that identify design techniques that can cause problems when you upgrade to a new Notes Release are typically categorized as Release \"A\" to Release \"B\" Upgrade Issues. Therefore, you can set up a class called Release A to Release B Upgrade or simply, Upgrade. Then, when you define a filter that fits this category, you assign it to the Upgrade class. At run-time, you tell Auditor which class of filters to use. The Severity attribute prioritizes the documents stored in the audit output database, helping you to systematically review and act on the items selected.","title":"To upgrade your filters database"},{"location":"analyzer/filtersadvanced/","text":"Auditor Filters for Advanced Users The Filter wizard creates a validation formula which is a standard Notes formula. Advanced users may avoid the limitations of the wizard by manually completing the validation formula field. You should build your filters a step at a time to ensure that each part works correctly before you add more to it. Since Auditor requires that you use the design of the Analyzer template, you must use fields or alias names from ivesdean.ntf . Note Analyzer Auditor processes documents in the analysis database. This means that any time you reference a field name it must be a valid field on a form referenced by the Apply To value. If you plan to write validation formulas manually, we recommend that you familiarize yourself with the design of the Analyzer template (ivesdean.ntf). A good starting point is to analyze the Analyzer template. Generally, filter validation formulas are standard Notes formulas. Analyzer extends these formulas for special purposes with advanced functions.","title":"Auditor Filters for Advanced Users"},{"location":"analyzer/filtersadvanced/#auditor-filters-for-advanced-users","text":"The Filter wizard creates a validation formula which is a standard Notes formula. Advanced users may avoid the limitations of the wizard by manually completing the validation formula field. You should build your filters a step at a time to ensure that each part works correctly before you add more to it. Since Auditor requires that you use the design of the Analyzer template, you must use fields or alias names from ivesdean.ntf . Note Analyzer Auditor processes documents in the analysis database. This means that any time you reference a field name it must be a valid field on a form referenced by the Apply To value. If you plan to write validation formulas manually, we recommend that you familiarize yourself with the design of the Analyzer template (ivesdean.ntf). A good starting point is to analyze the Analyzer template. Generally, filter validation formulas are standard Notes formulas. Analyzer extends these formulas for special purposes with advanced functions.","title":"Auditor Filters for Advanced Users"},{"location":"analyzer/filtersaliasduplicate/","text":"TMSAliasDuplicate/TMSTitleDuplicate This function checks for a duplicate title. Parameters Parameter Meaning FieldName This parameter is the field name that contains the value that you want to check against the list of titles or aliases for that particular class of design elements (form/view/agent/etc). This function returns TRUE or FALSE .","title":"TMSAliasDuplicate/TMSTitleDuplicate"},{"location":"analyzer/filtersaliasduplicate/#tmsaliasduplicatetmstitleduplicate","text":"This function checks for a duplicate title.","title":"TMSAliasDuplicate/TMSTitleDuplicate"},{"location":"analyzer/filtersaliasduplicate/#parameters","text":"Parameter Meaning FieldName This parameter is the field name that contains the value that you want to check against the list of titles or aliases for that particular class of design elements (form/view/agent/etc). This function returns TRUE or FALSE .","title":"Parameters"},{"location":"analyzer/filtersclasses/","text":"Editing or Creating Classes Auditor's Filter database includes pre-defined filter classes. You can edit the name or description of the class and you can create new classes. After you create a class, you can add filters to that class. A filter can belong to more than one class. When you choose a Filter Set on Analyzer's Audit tab, the classes from the Analyzer Filter database display in the drop-down list. To Edit a Class Open the Analyzer Filter database. Click the Admin > Filter Classes view. Double-click an existing Class to open the document. Double-click the document to enter edit mode. Change the Class Name or Class Description to meet your requirements. Save your changes as prompted when you close the document. To create a class Open the Analyzer Filter database. Click the Admin > Filter Classes view. Click the Create Class button. Enter the Class Name and Class Description . The Class Name should be something brief but descriptive since it will be shown in the Filter Set selection box at run-time. The Class Definition should explain the use of the filters in the Class. Save your changes as prompted when you close the document.","title":"Editing or Creating Classes"},{"location":"analyzer/filtersclasses/#editing-or-creating-classes","text":"Auditor's Filter database includes pre-defined filter classes. You can edit the name or description of the class and you can create new classes. After you create a class, you can add filters to that class. A filter can belong to more than one class. When you choose a Filter Set on Analyzer's Audit tab, the classes from the Analyzer Filter database display in the drop-down list.","title":"Editing or Creating Classes"},{"location":"analyzer/filtersclasses/#to-edit-a-class","text":"Open the Analyzer Filter database. Click the Admin > Filter Classes view. Double-click an existing Class to open the document. Double-click the document to enter edit mode. Change the Class Name or Class Description to meet your requirements. Save your changes as prompted when you close the document.","title":"To Edit a Class"},{"location":"analyzer/filtersclasses/#to-create-a-class","text":"Open the Analyzer Filter database. Click the Admin > Filter Classes view. Click the Create Class button. Enter the Class Name and Class Description . The Class Name should be something brief but descriptive since it will be shown in the Filter Set selection box at run-time. The Class Definition should explain the use of the filters in the Class. Save your changes as prompted when you close the document.","title":"To create a class"},{"location":"analyzer/filtersdisabling/","text":"Disabling or Activating Filters You may decide to stop using a filter, or to use it selectively. When you disable a filter, Analyzer won't evaluate the filter when you pick a class that the filter belongs to. You can reactivate a filter later. To disable or activate a filter From the Analyzer Filter database, click a Filter view, for example, By Class , or By Design Element . Click in the left column to select one or more filters to disable. Click Disable Selected Filter(s) or Activate Selected Filter(s) . A green check mark indicates that the filter is active. A red X indicates that the filter is disabled. Remember to activate disabled filters when required.","title":"Disabling or Activating Filters"},{"location":"analyzer/filtersdisabling/#disabling-or-activating-filters","text":"You may decide to stop using a filter, or to use it selectively. When you disable a filter, Analyzer won't evaluate the filter when you pick a class that the filter belongs to. You can reactivate a filter later.","title":"Disabling or Activating Filters"},{"location":"analyzer/filtersdisabling/#to-disable-or-activate-a-filter","text":"From the Analyzer Filter database, click a Filter view, for example, By Class , or By Design Element . Click in the left column to select one or more filters to disable. Click Disable Selected Filter(s) or Activate Selected Filter(s) . A green check mark indicates that the filter is active. A red X indicates that the filter is disabled. Remember to activate disabled filters when required.","title":"To disable or activate a filter"},{"location":"analyzer/filtersediting/","text":"Editing or Creating Filters You can change the specifications of an existing filter or create a new filter. To create a filter Open the Filter database (deanfltr.nsf). Click the Create Filter action button. You see a New Filter document: Define the new filter by creating the following fields: Field> Description Filter Name The purpose of the filter, for example, agents using Java code. Filter Active> Yes/No indicates whether the filter should be included when one of its classes is chosen for processing. Severity The relative importance of items matching this filter. Filter Class One or more groups (classes) to which the filter belongs. Comment The reason to use the filter, for example, Release A to Release B upgrade. Apply To Click the Apply To dropdown to select the design element you want the filter to check. This is the primary focus of the test. While selecting All lets you create filters that apply to all elements within a database design, selecting All Design Elements restricts your filter to first-level elements such as page, form or view. It ignores (doesn't include as audit targets) sub-elements such as field, hotspot, and column. With the Apply To field chosen, the form expands to show the Evaluate Against options, the Property field, and other filter options. Evaluate Against Select the Property option to include a property in the validation formula, or select an option to apply an existing filter against the Parent or the Children of the element in the Apply To field. Property Select the property you want to test. The list generated is based on the Apply To field type. Once you select the property, the form shows options for defining a condition to use in the selection step. The condition options you see are based on the Apply To and Property fields selected. Condition> Select the appropriate operation to define your test. The operation choices depend on the Apply To and Property selections you made previously. For example, select Button for the Apply To design element and Hide When Options for the property. To add a Condition, simply select one of the operations such as Has one of the following . Then select a Compare With value such as Web browsers . To test multiple conditions, you click AND or OR to specify the logical operator. When you have selected the elements of a single condition, click the Add Condition button to have the Validation Formula updated to include the test just completed. The following table describes the buttons on the **Filter** form: Button Description Add Condition Appends the Validation Formula to include the test just defined. When more than one formula is specified, the Add Condition Logic radio button determines the boolean operator used to combine conditions: \u2013 AND: all conditions must be true for the filter to match. \u2013 OR: any condition causes a match. Replace Condition Deletes the entire Validation Formula . Use this button to effectively redefine the entire filter, starting with the same design element in the Apply To field. Add or Replace the condition as desired. The new condition formula is written to the Validation Formula field, and a description of the condition is added to the Validation Text field: Save your changes as prompted when you close the document. To edit a filter Open the Analyzer Filter database. Double-click an existing filter to open the document. Double-click the document to enter edit mode. Edit the fields you want. If your edits require a new validation formula, Auditor automatically generates it when you select a property and add or replace a condition. Use the Validation Text field to reverse engineer how a validation formula was created. Save your changes as prompted when you close the document. Note To develop a filter for a different design element, you must create an entirely new filter. To modify the Validation Formula , use the Add or Replace Condition functions to rebuild the formula.","title":"Editing or Creating Filters"},{"location":"analyzer/filtersediting/#editing-or-creating-filters","text":"You can change the specifications of an existing filter or create a new filter.","title":"Editing or Creating Filters"},{"location":"analyzer/filtersediting/#to-create-a-filter","text":"Open the Filter database (deanfltr.nsf). Click the Create Filter action button. You see a New Filter document: Define the new filter by creating the following fields: Field> Description Filter Name The purpose of the filter, for example, agents using Java code. Filter Active> Yes/No indicates whether the filter should be included when one of its classes is chosen for processing. Severity The relative importance of items matching this filter. Filter Class One or more groups (classes) to which the filter belongs. Comment The reason to use the filter, for example, Release A to Release B upgrade. Apply To Click the Apply To dropdown to select the design element you want the filter to check. This is the primary focus of the test. While selecting All lets you create filters that apply to all elements within a database design, selecting All Design Elements restricts your filter to first-level elements such as page, form or view. It ignores (doesn't include as audit targets) sub-elements such as field, hotspot, and column. With the Apply To field chosen, the form expands to show the Evaluate Against options, the Property field, and other filter options. Evaluate Against Select the Property option to include a property in the validation formula, or select an option to apply an existing filter against the Parent or the Children of the element in the Apply To field. Property Select the property you want to test. The list generated is based on the Apply To field type. Once you select the property, the form shows options for defining a condition to use in the selection step. The condition options you see are based on the Apply To and Property fields selected. Condition> Select the appropriate operation to define your test. The operation choices depend on the Apply To and Property selections you made previously. For example, select Button for the Apply To design element and Hide When Options for the property. To add a Condition, simply select one of the operations such as Has one of the following . Then select a Compare With value such as Web browsers . To test multiple conditions, you click AND or OR to specify the logical operator. When you have selected the elements of a single condition, click the Add Condition button to have the Validation Formula updated to include the test just completed. The following table describes the buttons on the **Filter** form: Button Description Add Condition Appends the Validation Formula to include the test just defined. When more than one formula is specified, the Add Condition Logic radio button determines the boolean operator used to combine conditions: \u2013 AND: all conditions must be true for the filter to match. \u2013 OR: any condition causes a match. Replace Condition Deletes the entire Validation Formula . Use this button to effectively redefine the entire filter, starting with the same design element in the Apply To field. Add or Replace the condition as desired. The new condition formula is written to the Validation Formula field, and a description of the condition is added to the Validation Text field: Save your changes as prompted when you close the document.","title":"To create a filter"},{"location":"analyzer/filtersediting/#to-edit-a-filter","text":"Open the Analyzer Filter database. Double-click an existing filter to open the document. Double-click the document to enter edit mode. Edit the fields you want. If your edits require a new validation formula, Auditor automatically generates it when you select a property and add or replace a condition. Use the Validation Text field to reverse engineer how a validation formula was created. Save your changes as prompted when you close the document. Note To develop a filter for a different design element, you must create an entirely new filter. To modify the Validation Formula , use the Add or Replace Condition functions to rebuild the formula.","title":"To edit a filter"},{"location":"analyzer/filtersexamples/","text":"Filter Example The following table shows examples of filters you can create. Procedures for creating them follow the table. Filter Example Description Search for static text You can search your database for instances of a particular @Function such as @Do . To do this, create a filter that searches for @Do using the TMSRTContains formula. Use whole word matching, or the search result will include other functions that begin with @Do , such as @Doc , @DoChildren , and @DocFields . Search for values included within an analysis document To meet corporate standards, you must find and correct all the forms that do not include their name in the window title. To do this, you would likely pass the form name to the TMSRTContains function using a formula such as TMSRTContains( ffrmWinTitle; 0; \"Memo\") , where \"Memo\" is a particular form's name. However, you want to find all such forms, not just \"Memo.\" To search for all such forms, pass the field name that contains the title of the form instead of a literal string of the form name. You can then apply this filter to all forms, not just a particular form. Use values from the parent One of your company's standards is that field names must start with form aliases. You can create a filter that shows all the fields in a document, where field names do not start with the alias of the form/subform they reside in. Create a filter that searches for \"@Do\" Open the Auditor Filter database, which is called deanfltr.nsf . Click Create Filter to open the New Filter window. From the New Filter window, enter the following Field name What to enter or select Filter name: Use of @Do in database Filter Active: Yes Severity: Medium Filter Class: Generic Filters Comment: Look for the use of @Do Apply To: All The new filter should now look like this: In the Property field, click the arrow to display the list. Then select the keyword All Code (Formula / LS / JavaScript) . In the Operation field, select the RT contains option. In the Compare To field, enter @DO . In the Flag field, click the arrow to display the list. Select Whole Word and click OK . Click Add Condition . The new condition is added to the formula in the Validation Formula field: Save the filter and exit.","title":"Filter Example"},{"location":"analyzer/filtersexamples/#filter-example","text":"The following table shows examples of filters you can create. Procedures for creating them follow the table. Filter Example Description Search for static text You can search your database for instances of a particular @Function such as @Do . To do this, create a filter that searches for @Do using the TMSRTContains formula. Use whole word matching, or the search result will include other functions that begin with @Do , such as @Doc , @DoChildren , and @DocFields . Search for values included within an analysis document To meet corporate standards, you must find and correct all the forms that do not include their name in the window title. To do this, you would likely pass the form name to the TMSRTContains function using a formula such as TMSRTContains( ffrmWinTitle; 0; \"Memo\") , where \"Memo\" is a particular form's name. However, you want to find all such forms, not just \"Memo.\" To search for all such forms, pass the field name that contains the title of the form instead of a literal string of the form name. You can then apply this filter to all forms, not just a particular form. Use values from the parent One of your company's standards is that field names must start with form aliases. You can create a filter that shows all the fields in a document, where field names do not start with the alias of the form/subform they reside in.","title":"Filter Example"},{"location":"analyzer/filtersexamples/#create-a-filter-that-searches-for-do","text":"Open the Auditor Filter database, which is called deanfltr.nsf . Click Create Filter to open the New Filter window. From the New Filter window, enter the following Field name What to enter or select Filter name: Use of @Do in database Filter Active: Yes Severity: Medium Filter Class: Generic Filters Comment: Look for the use of @Do Apply To: All The new filter should now look like this: In the Property field, click the arrow to display the list. Then select the keyword All Code (Formula / LS / JavaScript) . In the Operation field, select the RT contains option. In the Compare To field, enter @DO . In the Flag field, click the arrow to display the list. Select Whole Word and click OK . Click Add Condition . The new condition is added to the formula in the Validation Formula field: Save the filter and exit.","title":"Create a filter that searches for \"@Do\""},{"location":"analyzer/filtersgetchildvalues/","text":"TMSGetChildValues This function returns a colon-separated list of field values from child documents in the Analyzer database. Parameters Parameter Meaning <Form Alias> This parameter indicates a form that can be a child of the current document. For example a column can be a child of a view , but a field cannot. <field name> This parameter represents a valid text field on the child documents, for example, TMSGetChildValues(CCOL00::fcolTitle) . When run against a view, the document returns a list of titles for all of the child columns.","title":"TMSGetChildValues"},{"location":"analyzer/filtersgetchildvalues/#tmsgetchildvalues","text":"This function returns a colon-separated list of field values from child documents in the Analyzer database.","title":"TMSGetChildValues"},{"location":"analyzer/filtersgetchildvalues/#parameters","text":"Parameter Meaning <Form Alias> This parameter indicates a form that can be a child of the current document. For example a column can be a child of a view , but a field cannot. <field name> This parameter represents a valid text field on the child documents, for example, TMSGetChildValues(CCOL00::fcolTitle) . When run against a view, the document returns a list of titles for all of the child columns.","title":"Parameters"},{"location":"analyzer/filtersgetparentvalue/","text":"TMSGetParentValue This function gets a field value from a parent document in the Analyzer database. TMSGetParentValue( <Form Alias>::<field name> ) Parameters Parameter Meaning <Form Alias> This parameter must indicate a parent of the current document (following the structure of the Analyzer output). For example, field cannot be a parent document of a form . However, Form can be a parent for a field. Also, the only valid parent for a design element is Database (CDBP00). <field name> This parameter must represent a valid text field on the target document. Otherwise, it will fail. The field cannot be a rich text field. If the field is not a text field, the value is converted to text. For example, consider the following: TMSGetParentValue ( CDBP00 :: fdbpFile ) It returns the file name of the current database. It can be embedded in the RT formula as follows: TMSRTContains ( Rich Text ; 0; TMSGetParentValue( CDBP00::fdbpFile )) When checking a filter, GetParentValue is evaluated first and its return value is substituted into the formula. Then the rest of the formula is evaluated. This function works on any ApplyTo filter except Database because Database documents do not have a parent.","title":"TMSGetParentValue"},{"location":"analyzer/filtersgetparentvalue/#tmsgetparentvalue","text":"This function gets a field value from a parent document in the Analyzer database. TMSGetParentValue( <Form Alias>::<field name> )","title":"TMSGetParentValue"},{"location":"analyzer/filtersgetparentvalue/#parameters","text":"Parameter Meaning <Form Alias> This parameter must indicate a parent of the current document (following the structure of the Analyzer output). For example, field cannot be a parent document of a form . However, Form can be a parent for a field. Also, the only valid parent for a design element is Database (CDBP00). <field name> This parameter must represent a valid text field on the target document. Otherwise, it will fail. The field cannot be a rich text field. If the field is not a text field, the value is converted to text. For example, consider the following: TMSGetParentValue ( CDBP00 :: fdbpFile ) It returns the file name of the current database. It can be embedded in the RT formula as follows: TMSRTContains ( Rich Text ; 0; TMSGetParentValue( CDBP00::fdbpFile )) When checking a filter, GetParentValue is evaluated first and its return value is substituted into the formula. Then the rest of the formula is evaluated. This function works on any ApplyTo filter except Database because Database documents do not have a parent.","title":"Parameters"},{"location":"analyzer/filtersincludechildren/","text":"TMSIncludeChildren This function runs the specified filter against all children of the current document and combines the results according to the specified logic. Parameters Parameter Meaning UNID This parameter is the UNID of the filter document you will use to run against the child documents. LOGIC Accepts values \"AND\" and \"OR\". \"AND\" - result will be true only if the filter evaluates to true for all children. \"OR\" - result will be true if the filter evaluates true for at least one child. Use the Select filter(s) to evaluate against children button on the filter definition form to set up TMSIncludeChildren. For example: TMSIncludeChildren(\" FA385C79559C18308525690B006479B6\";\"AND\")","title":"TMSIncludeChildren"},{"location":"analyzer/filtersincludechildren/#tmsincludechildren","text":"This function runs the specified filter against all children of the current document and combines the results according to the specified logic.","title":"TMSIncludeChildren"},{"location":"analyzer/filtersincludechildren/#parameters","text":"Parameter Meaning UNID This parameter is the UNID of the filter document you will use to run against the child documents. LOGIC Accepts values \"AND\" and \"OR\". \"AND\" - result will be true only if the filter evaluates to true for all children. \"OR\" - result will be true if the filter evaluates true for at least one child. Use the Select filter(s) to evaluate against children button on the filter definition form to set up TMSIncludeChildren. For example: TMSIncludeChildren(\" FA385C79559C18308525690B006479B6\";\"AND\")","title":"Parameters"},{"location":"analyzer/filtersincludeparent/","text":"TMSIncludeParent This function finds the parent document of the document currently being analyzed and then runs the specified filter. Parameters Parameter Meaning UNID This parameter is the UNID of the Filter document that you will use to run against the parent of the current Apply To . This function returns TRUE or FALSE .","title":"TMSIncludeParent"},{"location":"analyzer/filtersincludeparent/#tmsincludeparent","text":"This function finds the parent document of the document currently being analyzed and then runs the specified filter.","title":"TMSIncludeParent"},{"location":"analyzer/filtersincludeparent/#parameters","text":"Parameter Meaning UNID This parameter is the UNID of the Filter document that you will use to run against the parent of the current Apply To . This function returns TRUE or FALSE .","title":"Parameters"},{"location":"analyzer/filtersreviewing/","text":"Reviewing Filters When you open the Analyzer Filter database, you can review the following: Filter Classes\u2014name and description The Filters themselves by the Class they are assigned to by the Design Element they audit The Severity Definitions\u2014name and description","title":"Reviewing Filters"},{"location":"analyzer/filtersreviewing/#reviewing-filters","text":"When you open the Analyzer Filter database, you can review the following: Filter Classes\u2014name and description The Filters themselves by the Class they are assigned to by the Design Element they audit The Severity Definitions\u2014name and description","title":"Reviewing Filters"},{"location":"analyzer/filtersrtcontains/","text":"TMSRTContains This function searches the specified rich text field for a value. TMSRTContains( FieldName ; Flags; Value ) Parameters Parameter Meaning FieldName This parameter represents the name of a rich text field on the current analyzer document. If Apply To is Agent , then it includes only rich text fields that exist on the Agent form in the analyzer template. Or If this parameter is set to Rich Text, then it looks in all rich text fields on the document. Flag This number tells TMSRTContains how to search. These flags can be OR'd together Value This is the text to search for. It can be a quoted string or an unquoted field name. If it is a field name, Auditor gets the value to search for from that field, so it must be plain text. Flags Flag Flag Meaning 0 Normal 1 Whole Word 2 Case Sensitive 4 Accent Sensitive 8 Wildcards","title":"TMSRTContains"},{"location":"analyzer/filtersrtcontains/#tmsrtcontains","text":"This function searches the specified rich text field for a value. TMSRTContains( FieldName ; Flags; Value )","title":"TMSRTContains"},{"location":"analyzer/filtersrtcontains/#parameters","text":"Parameter Meaning FieldName This parameter represents the name of a rich text field on the current analyzer document. If Apply To is Agent , then it includes only rich text fields that exist on the Agent form in the analyzer template. Or If this parameter is set to Rich Text, then it looks in all rich text fields on the document. Flag This number tells TMSRTContains how to search. These flags can be OR'd together Value This is the text to search for. It can be a quoted string or an unquoted field name. If it is a field name, Auditor gets the value to search for from that field, so it must be plain text.","title":"Parameters"},{"location":"analyzer/filtersrtcontains/#flags","text":"Flag Flag Meaning 0 Normal 1 Whole Word 2 Case Sensitive 4 Accent Sensitive 8 Wildcards","title":"Flags"},{"location":"analyzer/filterssearchall/","text":"TMSSearchAll This function is the same as TMSRTContains except it looks in all text and rich text fields on a document. Parameters Parameter Meaning Flag This number tells TMSSearchAll how to search. These flags can be OR'd together Value This is the text to search for. It can be a quoted string or an unquoted field name. If it is a field name, Auditor gets the value to search for from that field, so it must be plain text. Flags Flag Flag Meaning 0 Normal 1 Whole Word 2 Case Sensitive 4 Accent Sensitive 8 Wildcards","title":"TMSSearchAll"},{"location":"analyzer/filterssearchall/#tmssearchall","text":"This function is the same as TMSRTContains except it looks in all text and rich text fields on a document.","title":"TMSSearchAll"},{"location":"analyzer/filterssearchall/#parameters","text":"Parameter Meaning Flag This number tells TMSSearchAll how to search. These flags can be OR'd together Value This is the text to search for. It can be a quoted string or an unquoted field name. If it is a field name, Auditor gets the value to search for from that field, so it must be plain text.","title":"Parameters"},{"location":"analyzer/filterssearchall/#flags","text":"Flag Flag Meaning 0 Normal 1 Whole Word 2 Case Sensitive 4 Accent Sensitive 8 Wildcards","title":"Flags"},{"location":"analyzer/filtersseverity/","text":"Editing or Creating Severity Definitions The Audit database includes pre-defined severity levels that are assigned to each filter. Auditor displays data in descending sort order for severity sequence. The higher the numeric value, the more important it is to address the issue causing the data element's selection. You can assign severity levels in any numerical range, including negative numbers. The following example shows how you can set up severity codes for filters. You can change the name or description of an existing severity level to meet your standards, or create an entirely new severity level. To edit a severity level Open the Analyzer Filter database. Click the Admin > Severity Definitions view. Double-click an existing Severity Definition to open the document. Double-click the document to enter edit mode. Change the Severity Name , Value or Description to meet your requirements. Save your changes as prompted when you close the document. To create a severity level Open the Analyzer Filter database. Click the Severity Definitions view. Click Create Severity Definition . Enter the Severity Name , Value and Description . The higher the severity value, the more important it is to fix the data element identified by the filter. You may assign severity levels in any numerical range. Save your changes as prompted when you close the document.","title":"Editing or Creating Severity Definitions"},{"location":"analyzer/filtersseverity/#editing-or-creating-severity-definitions","text":"The Audit database includes pre-defined severity levels that are assigned to each filter. Auditor displays data in descending sort order for severity sequence. The higher the numeric value, the more important it is to address the issue causing the data element's selection. You can assign severity levels in any numerical range, including negative numbers. The following example shows how you can set up severity codes for filters. You can change the name or description of an existing severity level to meet your standards, or create an entirely new severity level.","title":"Editing or Creating Severity Definitions"},{"location":"analyzer/filtersseverity/#to-edit-a-severity-level","text":"Open the Analyzer Filter database. Click the Admin > Severity Definitions view. Double-click an existing Severity Definition to open the document. Double-click the document to enter edit mode. Change the Severity Name , Value or Description to meet your requirements. Save your changes as prompted when you close the document.","title":"To edit a severity level"},{"location":"analyzer/filtersseverity/#to-create-a-severity-level","text":"Open the Analyzer Filter database. Click the Severity Definitions view. Click Create Severity Definition . Enter the Severity Name , Value and Description . The higher the severity value, the more important it is to fix the data element identified by the filter. You may assign severity levels in any numerical range. Save your changes as prompted when you close the document.","title":"To create a severity level"},{"location":"analyzer/incremental/","text":"Controlling Incremental Updates The first time you run Analyzer against a database, every design element is analyzed (unless you excluded some of them on the Design Notes tab). When you run Analyzer subsequent times, select the Incremental update check box to analyze and update the documents for only those design elements that have changed since Analyzer was last run against them. Clear the Incremental update check box to analyze every design element and update every document even if it has not changed. This feature allows you to change the title of a database and then update the design documentation and propagate the new title into other design elements.","title":"Controlling Incremental Updates"},{"location":"analyzer/incremental/#controlling-incremental-updates","text":"The first time you run Analyzer against a database, every design element is analyzed (unless you excluded some of them on the Design Notes tab). When you run Analyzer subsequent times, select the Incremental update check box to analyze and update the documents for only those design elements that have changed since Analyzer was last run against them. Clear the Incremental update check box to analyze every design element and update every document even if it has not changed. This feature allows you to change the title of a database and then update the design documentation and propagate the new title into other design elements.","title":"Controlling Incremental Updates"},{"location":"analyzer/output/","text":"Overview Analyzer scans your database, creates a document for each component it finds, and organizes the documents using views.","title":"Overview"},{"location":"analyzer/output/#overview","text":"Analyzer scans your database, creates a document for each component it finds, and organizes the documents using views.","title":"Overview"},{"location":"analyzer/references/","text":"Finding all References to a Field You can use the Field X-Ref folder to find all references to a particular field name. To find references to a field Open the Field X-Ref folder. Click the Reset button to remove any documents from the folder. Switch to a view containing the field you want to find references to (for example, Objects by Name\\Fields ). Locate the document representing the field. Drag the field from the view into the Field X-Ref folder. Open the Field X-Ref folder. Click the Add References action button. Any elements that reference the field will be added to the Field X-Ref folder. The folder is categorized by field name. Note This structured cross-reference works only for fields.","title":"Finding all References to a Field"},{"location":"analyzer/references/#finding-all-references-to-a-field","text":"You can use the Field X-Ref folder to find all references to a particular field name.","title":"Finding all References to a Field"},{"location":"analyzer/references/#to-find-references-to-a-field","text":"Open the Field X-Ref folder. Click the Reset button to remove any documents from the folder. Switch to a view containing the field you want to find references to (for example, Objects by Name\\Fields ). Locate the document representing the field. Drag the field from the view into the Field X-Ref folder. Open the Field X-Ref folder. Click the Add References action button. Any elements that reference the field will be added to the Field X-Ref folder. The folder is categorized by field name. Note This structured cross-reference works only for fields.","title":"To find references to a field"},{"location":"analyzer/script/","text":"Script Overview You can start Analyzer using LotusScript. Use the Analyzer script library, located in the Teamstudio Reports template (tmslogs.ntf), to set up an analysis to be run in batch. This section provides detailed descriptions of each Analyzer script library function, followed by agent examples that illustrate how to use it. The Analyzer Script Library exposes the following functions: Function Description DEANAnalyzeW32 Calls Analyzer. Passes only the file names and flags. DEANAnalyze2W32 Calls Analyzer. Passes the file names, output database title, the template to be used when creating the output database file, flags and a filter indicating the types of design elements to be analyzed. DEANAnalyzeAndAudit Calls Analyzer Audit. Performs an analysis and audit on a given database. DEANStringLoadW32 Obtains the error message associated with any error code returned from the other API functions. If you work within the Teamstudio Reports template (tmslogs.ntf), you will not have to worry about creating the Analyzer script library. If you work within a different database/template, you must copy over this script library as well.","title":"Script Overview"},{"location":"analyzer/script/#script-overview","text":"You can start Analyzer using LotusScript. Use the Analyzer script library, located in the Teamstudio Reports template (tmslogs.ntf), to set up an analysis to be run in batch. This section provides detailed descriptions of each Analyzer script library function, followed by agent examples that illustrate how to use it. The Analyzer Script Library exposes the following functions: Function Description DEANAnalyzeW32 Calls Analyzer. Passes only the file names and flags. DEANAnalyze2W32 Calls Analyzer. Passes the file names, output database title, the template to be used when creating the output database file, flags and a filter indicating the types of design elements to be analyzed. DEANAnalyzeAndAudit Calls Analyzer Audit. Performs an analysis and audit on a given database. DEANStringLoadW32 Obtains the error message associated with any error code returned from the other API functions. If you work within the Teamstudio Reports template (tmslogs.ntf), you will not have to worry about creating the Analyzer script library. If you work within a different database/template, you must copy over this script library as well.","title":"Script Overview"},{"location":"analyzer/scriptanalyze/","text":"DEANAnalyzeW32 Description Calls Analyzer. Passes only the file names and flags. Syntax status = DEANAnalyzeW32( <Design>, <Analysis>, <Flags> ) Parameters Parameter Input/Output Type Description Design Input String The path of the database to analyze. Separate server and pathname with !! Analysis Input String The path of the analysis output database. Separate server and pathname with !! Flags Input Long This parameter allows you to control how Analyzer runs. You can pass any of the DBDEAN Flag Constants . You can pass a combination of flags by using a plus sign (+) to combine them. Return Value Return Value Type Description status Integer A return value of zero (0) indicates that no error has occurred. If the return value is non-zero, use DEANStringLoadW32 to retrieve the error message associated with the error code. Example status = DEANAnalyzeW32 ( _ \"myserver!!dbtorun.nsf\" , _ 'database to analyze \"dbout.nsf\" , _ 'analysis database for output DBDEAN_FLAG_SILENT + _ 'no UI feedback DBDEAN_FLAG_NO_CREATE ) 'do not create new analysis database","title":"DEANAnalyzeW32"},{"location":"analyzer/scriptanalyze/#deananalyzew32","text":"","title":"DEANAnalyzeW32"},{"location":"analyzer/scriptanalyze/#description","text":"Calls Analyzer. Passes only the file names and flags.","title":"Description"},{"location":"analyzer/scriptanalyze/#syntax","text":"status = DEANAnalyzeW32( <Design>, <Analysis>, <Flags> )","title":"Syntax"},{"location":"analyzer/scriptanalyze/#parameters","text":"Parameter Input/Output Type Description Design Input String The path of the database to analyze. Separate server and pathname with !! Analysis Input String The path of the analysis output database. Separate server and pathname with !! Flags Input Long This parameter allows you to control how Analyzer runs. You can pass any of the DBDEAN Flag Constants . You can pass a combination of flags by using a plus sign (+) to combine them.","title":"Parameters"},{"location":"analyzer/scriptanalyze/#return-value","text":"Return Value Type Description status Integer A return value of zero (0) indicates that no error has occurred. If the return value is non-zero, use DEANStringLoadW32 to retrieve the error message associated with the error code.","title":"Return Value"},{"location":"analyzer/scriptanalyze/#example","text":"status = DEANAnalyzeW32 ( _ \"myserver!!dbtorun.nsf\" , _ 'database to analyze \"dbout.nsf\" , _ 'analysis database for output DBDEAN_FLAG_SILENT + _ 'no UI feedback DBDEAN_FLAG_NO_CREATE ) 'do not create new analysis database","title":"Example"},{"location":"analyzer/scriptanalyze2/","text":"DEANAnalyze2W32 Description Calls Analyzer. Passes the file names, output database title, the template to be used when creating the output database, flags and a filter indicating the types of design elements to be analyzed. Syntax status = DEANAnalyze2W32( <Design>, <Analysis>, <Title>, <Template>, <Filter>, <Flags> ) Parameters Parameter Input/Output Type Description Design Input String The path of the database to analyze. Separate server and pathname with !! Analysis Input String The path of the analysis output database. Separate server and pathname with !! Title Input String The title to be used if a new analysis database is created. Template Input String The path to the template to use if a new analysis database is created. Separate server and pathname with !!. Specify the empty string, \"\", to use the default template. Filter Input String A Context Filter string specifying which design elements should be analyzed. Specify the empty string, \"\", to analyze the full design. Flags Input Long This parameter allows you to control how Analyzer runs. You can pass any of the DBDEAN Flag Constants . You can pass a combination of flags by using a plus sign (+) to combine them. Return Value Return Value Type Description status Integer A return value of zero (0) indicates that no error has occurred. If the return value is non-zero, use DEANStringLoadW32 to retrieve the error message associated with the error code. Example status = DEANAnalyze2W32 ( _ \"myserver!!dbtorun.nsf\" , _ 'database to analyze \"dbout.nsf\" , _ 'analysis database for output \"Analysis of dbtorun\" , _ 'title for output database \"\" , _ 'use default template, \"-*\" , _ 'analyze database level properties only DBDEAN_FLAG_DEFAULT ) 'create analysis database if it doesn't exist","title":"DEANAnalyze2W32"},{"location":"analyzer/scriptanalyze2/#deananalyze2w32","text":"","title":"DEANAnalyze2W32"},{"location":"analyzer/scriptanalyze2/#description","text":"Calls Analyzer. Passes the file names, output database title, the template to be used when creating the output database, flags and a filter indicating the types of design elements to be analyzed.","title":"Description"},{"location":"analyzer/scriptanalyze2/#syntax","text":"status = DEANAnalyze2W32( <Design>, <Analysis>, <Title>, <Template>, <Filter>, <Flags> )","title":"Syntax"},{"location":"analyzer/scriptanalyze2/#parameters","text":"Parameter Input/Output Type Description Design Input String The path of the database to analyze. Separate server and pathname with !! Analysis Input String The path of the analysis output database. Separate server and pathname with !! Title Input String The title to be used if a new analysis database is created. Template Input String The path to the template to use if a new analysis database is created. Separate server and pathname with !!. Specify the empty string, \"\", to use the default template. Filter Input String A Context Filter string specifying which design elements should be analyzed. Specify the empty string, \"\", to analyze the full design. Flags Input Long This parameter allows you to control how Analyzer runs. You can pass any of the DBDEAN Flag Constants . You can pass a combination of flags by using a plus sign (+) to combine them.","title":"Parameters"},{"location":"analyzer/scriptanalyze2/#return-value","text":"Return Value Type Description status Integer A return value of zero (0) indicates that no error has occurred. If the return value is non-zero, use DEANStringLoadW32 to retrieve the error message associated with the error code.","title":"Return Value"},{"location":"analyzer/scriptanalyze2/#example","text":"status = DEANAnalyze2W32 ( _ \"myserver!!dbtorun.nsf\" , _ 'database to analyze \"dbout.nsf\" , _ 'analysis database for output \"Analysis of dbtorun\" , _ 'title for output database \"\" , _ 'use default template, \"-*\" , _ 'analyze database level properties only DBDEAN_FLAG_DEFAULT ) 'create analysis database if it doesn't exist","title":"Example"},{"location":"analyzer/scriptanalyzeandaudit/","text":"DEANAnalyzeAndAudit Description Calls Analyzer Audit. Performs an analysis and audit on a given database. Syntax status = DEANAnalyzeAndAudit( <Design>, <Analysis>, <Title>, <Template>, <AuditIn>, <AuditOut>, <AuditOutTitle>, <AuditClass>, <Filter>, <Flags> ) Parameters Parameter Input/Output Type Description Design Input String The path of the database to analyze. Separate server and pathname with !! Analysis Input String The path of the analysis output database. Separate server and pathname with !! Title Input String The title to be used if a new analysis database is created. Template Input String The path to the template to use if a new analysis database is created. AuditIn Input String The path to the Auditor filter database. Separate server and pathname with !! AuditOut Input String The path to the Auditor output database. Separate server and pathname with !! AuditOutTitle Input String The title to use if the Auditor output database needs to be created. AuditClass Input String The audit filter class to use for the audit. Filter Input String A Context Filter string specifying which design elements should be analyzed. Specify the empty string, \"\", to analyze the full design. Flags Input Long This parameter allows you to control how Analyzer runs. You can pass any of the DBDEAN Flag Constants . You can pass a combination of flags by using a plus sign (+) to combine them. Return Value Return Value Type Description status Integer A return value of zero (0) indicates that no error has occurred. If the return value is non-zero, use DEANStringLoadW32 to retrieve the error message associated with the error code. Example status = DEANAnalyzeAndAudit ( _ \"myserver!!dbtorun.nsf\" , _ 'database to analyze \"dbout.nsf\" , _ 'analysis database for output \"Analysis of dbtorun\" , _ 'title for output database \"\" , _ 'use default template, \"deanfltr.nsf\" , _ 'default filter database \"dbAuditOut.nsf\" , _ 'database for audit results \"Audit of dbtorun\" , _ 'title for audit results database \"UI Standards\" , _ 'filter class \"-FM\" , _ 'analyze forms only DBDEAN_FLAG_DEFAULT ) 'create analysis database if it doesn't exist","title":"DEANAnalyzeAndAudit"},{"location":"analyzer/scriptanalyzeandaudit/#deananalyzeandaudit","text":"","title":"DEANAnalyzeAndAudit"},{"location":"analyzer/scriptanalyzeandaudit/#description","text":"Calls Analyzer Audit. Performs an analysis and audit on a given database.","title":"Description"},{"location":"analyzer/scriptanalyzeandaudit/#syntax","text":"status = DEANAnalyzeAndAudit( <Design>, <Analysis>, <Title>, <Template>, <AuditIn>, <AuditOut>, <AuditOutTitle>, <AuditClass>, <Filter>, <Flags> )","title":"Syntax"},{"location":"analyzer/scriptanalyzeandaudit/#parameters","text":"Parameter Input/Output Type Description Design Input String The path of the database to analyze. Separate server and pathname with !! Analysis Input String The path of the analysis output database. Separate server and pathname with !! Title Input String The title to be used if a new analysis database is created. Template Input String The path to the template to use if a new analysis database is created. AuditIn Input String The path to the Auditor filter database. Separate server and pathname with !! AuditOut Input String The path to the Auditor output database. Separate server and pathname with !! AuditOutTitle Input String The title to use if the Auditor output database needs to be created. AuditClass Input String The audit filter class to use for the audit. Filter Input String A Context Filter string specifying which design elements should be analyzed. Specify the empty string, \"\", to analyze the full design. Flags Input Long This parameter allows you to control how Analyzer runs. You can pass any of the DBDEAN Flag Constants . You can pass a combination of flags by using a plus sign (+) to combine them.","title":"Parameters"},{"location":"analyzer/scriptanalyzeandaudit/#return-value","text":"Return Value Type Description status Integer A return value of zero (0) indicates that no error has occurred. If the return value is non-zero, use DEANStringLoadW32 to retrieve the error message associated with the error code.","title":"Return Value"},{"location":"analyzer/scriptanalyzeandaudit/#example","text":"status = DEANAnalyzeAndAudit ( _ \"myserver!!dbtorun.nsf\" , _ 'database to analyze \"dbout.nsf\" , _ 'analysis database for output \"Analysis of dbtorun\" , _ 'title for output database \"\" , _ 'use default template, \"deanfltr.nsf\" , _ 'default filter database \"dbAuditOut.nsf\" , _ 'database for audit results \"Audit of dbtorun\" , _ 'title for audit results database \"UI Standards\" , _ 'filter class \"-FM\" , _ 'analyze forms only DBDEAN_FLAG_DEFAULT ) 'create analysis database if it doesn't exist","title":"Example"},{"location":"analyzer/scriptctxfilter/","text":"Context Filter You use a context filter to specify the design categories to be analyzed, for example Forms or Shared Actions. You cannot use context filters to specify particular elements within a category; all elements within the category will be processed. The following table defines the syntax to use for each category when you define the context filter parameter in a script call. For example, to analyze only the Forms, Subforms and Folders in a database, you would enter \" -fm-sf-fl \". The string is not case-sensitive. Category Syntax Agent -ag Applet -ap Component -co Composite Application -ca Custom Control -cc Data Connection -dc Database Icon -ic Database properties -* Database script -ds DB2 Data Access Views -dv File Resource -fi Folder -fl Form -fm Frameset -fr Help About -ha Help Using -hu Image -im Navigator -na Outline -ou Page -pa Profile Documents -pr Replication Formula -rf Script Library -sl Shared Action -ac Shared Column -sc Shared Field -sh Style Sheet -ss Subform -sf Theme -th V3 Macro -v3 View -vi Webservice Consumer -wc Webservice Provider -ws Wiring Properties -wp XPage -xp","title":"Context Filter"},{"location":"analyzer/scriptctxfilter/#context-filter","text":"You use a context filter to specify the design categories to be analyzed, for example Forms or Shared Actions. You cannot use context filters to specify particular elements within a category; all elements within the category will be processed. The following table defines the syntax to use for each category when you define the context filter parameter in a script call. For example, to analyze only the Forms, Subforms and Folders in a database, you would enter \" -fm-sf-fl \". The string is not case-sensitive. Category Syntax Agent -ag Applet -ap Component -co Composite Application -ca Custom Control -cc Data Connection -dc Database Icon -ic Database properties -* Database script -ds DB2 Data Access Views -dv File Resource -fi Folder -fl Form -fm Frameset -fr Help About -ha Help Using -hu Image -im Navigator -na Outline -ou Page -pa Profile Documents -pr Replication Formula -rf Script Library -sl Shared Action -ac Shared Column -sc Shared Field -sh Style Sheet -ss Subform -sf Theme -th V3 Macro -v3 View -vi Webservice Consumer -wc Webservice Provider -ws Wiring Properties -wp XPage -xp","title":"Context Filter"},{"location":"analyzer/scripterrors/","text":"Error Code Return Values These are possible return values for any of the Analyzer functions. Value Meaning NOERROR (0) Operation completed successfully. 0-65535 Notes API error codes. 65536 and above Teamstudio error codes Teamstudio Error Code Value Meaning IDERR_DEAN_BAD_CLASS (66816) The design class of the pre-existing analysis database is not DEANTemplate IDERR_DEAN_BAD_ANALYSIS (66817) The pre-existing analysis database contains invalid documents. IDERR_DEAN_DELETE_FAILED (66820) Analyzer could not remove analysis documents corresponding to deleted design elements. IDERR_DEAN_TEMPLATE_NOT_FOUND (66821) Analysis template (usually ivesdean.ntf ) could not be found. Note Many other possible error codes can be returned. Use DEANStringLoadW32 to get the message associated with an error code.","title":"Error Code Return Values"},{"location":"analyzer/scripterrors/#error-code-return-values","text":"These are possible return values for any of the Analyzer functions. Value Meaning NOERROR (0) Operation completed successfully. 0-65535 Notes API error codes. 65536 and above Teamstudio error codes Teamstudio Error Code Value Meaning IDERR_DEAN_BAD_CLASS (66816) The design class of the pre-existing analysis database is not DEANTemplate IDERR_DEAN_BAD_ANALYSIS (66817) The pre-existing analysis database contains invalid documents. IDERR_DEAN_DELETE_FAILED (66820) Analyzer could not remove analysis documents corresponding to deleted design elements. IDERR_DEAN_TEMPLATE_NOT_FOUND (66821) Analysis template (usually ivesdean.ntf ) could not be found. Note Many other possible error codes can be returned. Use DEANStringLoadW32 to get the message associated with an error code.","title":"Error Code Return Values"},{"location":"analyzer/scriptflags/","text":"DBDEAN Flag Constants Flag Description DBDEAN_FLAG_ACL_SINGLEDOC Writes all ACL users and their properties in a single document. BDEAN_FLAG_DEFAULT Default behavior is to create an output database if it doesn't exist, update only the elements that are modified since the last run and prompt if an error occurs. DBDEAN_FLAG_NO_ANALYSIS (For DEANAnalyzeAndAudit only.) Run the audit on an existing analysis database without also running the analysis. DBDEAN_FLAG_NO_CREATE Prevents creation of a new analysis database. If the specified analysis database does not exist, the function returns an error. DBDEAN_FLAG_REBUILD_ALL Prevents incremental update. The entire analysis will be deleted and rebuilt, except for user response documents. DBDEAN_FLAG_SILENT Prevents UI feedback. No messages will be displayed. You must check the returned error code to ensure that the analysis was successful.","title":"DBDEAN Flag Constants"},{"location":"analyzer/scriptflags/#dbdean-flag-constants","text":"Flag Description DBDEAN_FLAG_ACL_SINGLEDOC Writes all ACL users and their properties in a single document. BDEAN_FLAG_DEFAULT Default behavior is to create an output database if it doesn't exist, update only the elements that are modified since the last run and prompt if an error occurs. DBDEAN_FLAG_NO_ANALYSIS (For DEANAnalyzeAndAudit only.) Run the audit on an existing analysis database without also running the analysis. DBDEAN_FLAG_NO_CREATE Prevents creation of a new analysis database. If the specified analysis database does not exist, the function returns an error. DBDEAN_FLAG_REBUILD_ALL Prevents incremental update. The entire analysis will be deleted and rebuilt, except for user response documents. DBDEAN_FLAG_SILENT Prevents UI feedback. No messages will be displayed. You must check the returned error code to ensure that the analysis was successful.","title":"DBDEAN Flag Constants"},{"location":"analyzer/scriptsample/","text":"Analyzer Sample Agents You can find sample agents in the Teamstudio Reports template You can find sample agents in the Teamstudio Reports template tmslogs.ntf , which is provided with the product. Run them as provided to see how they work. They demonstrate how to call Analyzer dynamically, whether real-time or on a scheduled basis. As standard Notes agents coded in LotusScript, they have the same basic structure. First, they determine the files to be analyzed and the output analysis file to be created. Then they call an DeanAnalyze function to start Analyzer processing. The function calls pass the file and other necessary parameters. The Analyzer script library contains the constant and function definitions necessary to start Analyzer. You will likely want to change these agents to provide the pertinent file and path data. You can change, or copy and then change the agents. The script library and agents (with your modifications, if any) must be present in the database for which you will run the agent. Note Do not change the Declaration section as doing so may cause the script library to malfunction. Analyzer Scripting Sample with Dialog This agent prompts you to enter the name of the input file and the analysis output file. It uses a hidden form, Analyzer Scripting Sample Dialog that has the alias AnalyzerDialog in a DialogBox call to retrieve the file data. You can use the function to supply the information about the file to be analyzed when you run the agent. You could also get this data using other techniques such as reading an input file or by searching the Notes directory on a server of local machine. Analyzer Scripting Sample - Directory Contents Analyzer This agent illustrates how to gather the file information dynamically from a server and then call Analyzer. It shows how to match files by type. You could change this example to search for file names or directories that meet the criteria you supply.","title":"Analyzer Sample Agents"},{"location":"analyzer/scriptsample/#analyzer-sample-agents","text":"You can find sample agents in the Teamstudio Reports template You can find sample agents in the Teamstudio Reports template tmslogs.ntf , which is provided with the product. Run them as provided to see how they work. They demonstrate how to call Analyzer dynamically, whether real-time or on a scheduled basis. As standard Notes agents coded in LotusScript, they have the same basic structure. First, they determine the files to be analyzed and the output analysis file to be created. Then they call an DeanAnalyze function to start Analyzer processing. The function calls pass the file and other necessary parameters. The Analyzer script library contains the constant and function definitions necessary to start Analyzer. You will likely want to change these agents to provide the pertinent file and path data. You can change, or copy and then change the agents. The script library and agents (with your modifications, if any) must be present in the database for which you will run the agent. Note Do not change the Declaration section as doing so may cause the script library to malfunction.","title":"Analyzer Sample Agents"},{"location":"analyzer/scriptsample/#analyzer-scripting-sample-with-dialog","text":"This agent prompts you to enter the name of the input file and the analysis output file. It uses a hidden form, Analyzer Scripting Sample Dialog that has the alias AnalyzerDialog in a DialogBox call to retrieve the file data. You can use the function to supply the information about the file to be analyzed when you run the agent. You could also get this data using other techniques such as reading an input file or by searching the Notes directory on a server of local machine.","title":"Analyzer Scripting Sample with Dialog"},{"location":"analyzer/scriptsample/#analyzer-scripting-sample-directory-contents-analyzer","text":"This agent illustrates how to gather the file information dynamically from a server and then call Analyzer. It shows how to match files by type. You could change this example to search for file names or directories that meet the criteria you supply.","title":"Analyzer Scripting Sample - Directory Contents Analyzer"},{"location":"analyzer/scriptstringload/","text":"DEANStringLoadW32 Description Obtains the error message associated with any error code returned from other API functions. Syntax status = DEANStringLoadW32( <Status>, <Message>, <MessageBufferSize> ) Parameters Parameter Input/Output Type Description Status Input Long The numeric value returned by one of the DEANxxx functions. Message Output String This is a string that will receive the message text associated with the status code. MessageBufferSize Input Long This is the maximum size that the string should be. Example Dim szBuffer As String * 255 status = DEANAnalyzeW32 (...) DEANStringLoadW32 ( status , szBuffer , 255 ) strErr = Left $ ( szBuffer , Instr ( szBuffer , Chr ( 0 ) ) - 1 ) 'Convert the string to a LotusScript string MessageBox strErr","title":"DEANStringLoadW32"},{"location":"analyzer/scriptstringload/#deanstringloadw32","text":"","title":"DEANStringLoadW32"},{"location":"analyzer/scriptstringload/#description","text":"Obtains the error message associated with any error code returned from other API functions.","title":"Description"},{"location":"analyzer/scriptstringload/#syntax","text":"status = DEANStringLoadW32( <Status>, <Message>, <MessageBufferSize> )","title":"Syntax"},{"location":"analyzer/scriptstringload/#parameters","text":"Parameter Input/Output Type Description Status Input Long The numeric value returned by one of the DEANxxx functions. Message Output String This is a string that will receive the message text associated with the status code. MessageBufferSize Input Long This is the maximum size that the string should be.","title":"Parameters"},{"location":"analyzer/scriptstringload/#example","text":"Dim szBuffer As String * 255 status = DEANAnalyzeW32 (...) DEANStringLoadW32 ( status , szBuffer , 255 ) strErr = Left $ ( szBuffer , Instr ( szBuffer , Chr ( 0 ) ) - 1 ) 'Convert the string to a LotusScript string MessageBox strErr","title":"Example"},{"location":"analyzer/starting/","text":"Starting Analyzer To start Analyzer In Designer, open the database you want to analyze. Click the Analyzer button on the toolbar. You see the Teamstudio Analyzer window. On the Teamstudio Analyzer tab, enter the server name and file name of the analysis output database that will store the analysis of your database design. If the output database doesn't exist, you will be prompted to create it when Analyzer runs. When you click OK, Analyzer examines all design elements and stores the results in the database you have specified. You can use the Design Notes tab to tell Analyzer which design elements you want to analyze. See Using the Design Notes Tab . On the Audit tab, enable Auditor which tests your design elements against a pre-defined set of filters. See Auditing a Design . Typically, there is one analysis output database and one audit output database for each project. There may be a number of different database designs represented in each output database.You may organize the output databases differently. Note Design analysis databases become huge if they contain information about several database designs. If you select a large number of design elements for review by an audit run, the audit output database can also become quite large. Consider using more than one output database for analysis and/or audit runs, and decide in advance how to split design information among different output databases.","title":"Starting Analyzer"},{"location":"analyzer/starting/#starting-analyzer","text":"To start Analyzer In Designer, open the database you want to analyze. Click the Analyzer button on the toolbar. You see the Teamstudio Analyzer window. On the Teamstudio Analyzer tab, enter the server name and file name of the analysis output database that will store the analysis of your database design. If the output database doesn't exist, you will be prompted to create it when Analyzer runs. When you click OK, Analyzer examines all design elements and stores the results in the database you have specified. You can use the Design Notes tab to tell Analyzer which design elements you want to analyze. See Using the Design Notes Tab . On the Audit tab, enable Auditor which tests your design elements against a pre-defined set of filters. See Auditing a Design . Typically, there is one analysis output database and one audit output database for each project. There may be a number of different database designs represented in each output database.You may organize the output databases differently. Note Design analysis databases become huge if they contain information about several database designs. If you select a large number of design elements for review by an audit run, the audit output database can also become quite large. Consider using more than one output database for analysis and/or audit runs, and decide in advance how to split design information among different output databases.","title":"Starting Analyzer"},{"location":"analyzer/startinganalysis/","text":"Starting the Analysis After you specify the output database that Analyzer should use, optionally include or exclude design elements to analyze and optionally set up Auditor, click OK to start the analysis process. The database design analysis runs before the audit is performed. You see the Teamstudio Analyzer progress indicator that displays the name of each element as it is processed. When the analysis is complete, Analyzer opens the analysis output database you designated. Expand categories to reveal Analyzer's design element analysis documents within the categories. Note If you ran an audit, you will find the results in the audit output database rather than the analysis output database.","title":"Starting the Analysis"},{"location":"analyzer/startinganalysis/#starting-the-analysis","text":"After you specify the output database that Analyzer should use, optionally include or exclude design elements to analyze and optionally set up Auditor, click OK to start the analysis process. The database design analysis runs before the audit is performed. You see the Teamstudio Analyzer progress indicator that displays the name of each element as it is processed. When the analysis is complete, Analyzer opens the analysis output database you designated. Expand categories to reveal Analyzer's design element analysis documents within the categories. Note If you ran an audit, you will find the results in the audit output database rather than the analysis output database.","title":"Starting the Analysis"},{"location":"analyzer/viewing/","text":"Viewing Analysis With the many sorting categories Analyzer provides, you can view the design element information you need. So where do you begin? To get started, consider the recommended views and actions described in the following table. Goal What to View What to Do See where design elements are used View design element references Expand the corresponding design element category with the left navigator, and open the design element document. The references are listed at the end of the document. Go to the Design Aids view category and select the Dependencies view. This shows all design elements with dependencies by design element category. See Last Modified View all design element last modified dates The Design Aids category has several views to show the last modified dates See Default Access View the database access control list In the Analysis category, there is a subcategory for ACL analysis Check view columns for consistency View columns in views In the Objects by Name category, there is a view called Columns in views that shows several settings that can often be inconsistent. See subroutines in need of refactoring View the number of lines and parameters of agents In the design category, under Code and then Script Libraries, is a view called Subs that lists the number of lines of code and the number of variables declared. The largest numbers are the most complex subroutines and could be refactored. See everywhere a field is referenced Use the Field XRef folder Simply drag any field document (under Forms in Object by Name category) and drop it in the xRef folder. Then click the Add References button. Every design element that refers to that field will be included in the view.","title":"Viewing Analysis"},{"location":"analyzer/viewing/#viewing-analysis","text":"With the many sorting categories Analyzer provides, you can view the design element information you need. So where do you begin? To get started, consider the recommended views and actions described in the following table. Goal What to View What to Do See where design elements are used View design element references Expand the corresponding design element category with the left navigator, and open the design element document. The references are listed at the end of the document. Go to the Design Aids view category and select the Dependencies view. This shows all design elements with dependencies by design element category. See Last Modified View all design element last modified dates The Design Aids category has several views to show the last modified dates See Default Access View the database access control list In the Analysis category, there is a subcategory for ACL analysis Check view columns for consistency View columns in views In the Objects by Name category, there is a view called Columns in views that shows several settings that can often be inconsistent. See subroutines in need of refactoring View the number of lines and parameters of agents In the design category, under Code and then Script Libraries, is a view called Subs that lists the number of lines of code and the number of variables declared. The largest numbers are the most complex subroutines and could be refactored. See everywhere a field is referenced Use the Field XRef folder Simply drag any field document (under Forms in Object by Name category) and drop it in the xRef folder. Then click the Add References button. Every design element that refers to that field will be included in the view.","title":"Viewing Analysis"},{"location":"analyzer/views/","text":"Summary of Views The output database template includes the following groups of views: View Description All documents Shows all design elements in all databases in the output database. The view is sorted by database title. The hierarchy represents the hierarchy of the database design. The first column in the activity window shows the number (count) of objects within each category. Click the button to open the database, from which the analysis was taken, in a new Notes window. Design Shows views grouped by the same categories you see in Domino Designer. By Object Type Also includes the Field X-Ref view that shows where a particular field is used. Analysis Analytical views of design elements. Design Aids Views that help you understand the design. The Analysis Output Database Views","title":"Summary of Views"},{"location":"analyzer/views/#summary-of-views","text":"The output database template includes the following groups of views: View Description All documents Shows all design elements in all databases in the output database. The view is sorted by database title. The hierarchy represents the hierarchy of the database design. The first column in the activity window shows the number (count) of objects within each category. Click the button to open the database, from which the analysis was taken, in a new Notes window. Design Shows views grouped by the same categories you see in Domino Designer. By Object Type Also includes the Field X-Ref view that shows where a particular field is used. Analysis Analytical views of design elements. Design Aids Views that help you understand the design.","title":"Summary of Views"},{"location":"analyzer/views/#the-analysis-output-database-views","text":"","title":"The Analysis Output Database Views"},{"location":"ciao/promotionpaths/","text":"Promotion Paths Promotion Paths define targets for moving source templates to new environments when Promoting a Database . Two types of CIAO! documents form the basis for building and promoting databases using CIAO!: Database Documents, also called CIAO! Configuration or \"Watch\" documents, define the \"source\" location - the source template of an application where development takes place. Promotion Paths define a \"target\" location - a server and path where the source template should be copied; build steps can then be run against this target to prepare it for release. Database Documents Configuration documents are created by CIAO! when a source database is placed under CIAO! control, as described in Using CIAO! For information on configuring database documents, see Understanding CIAO! Config Information . For promotions, CIAO! uses the Database Document to identify the source template which the build will copy and act on, and can be created: By choosing the CIAO! view menu button and choosing Add Database to add a source template that exists on a server. By launching the CIAO! client on a currently unwatched database, and following the prompts to begin watching the database. The second method will help ensure that all required fields are set accurately. Promotion Paths Promotion Paths specify a target location to \"promote\" a template. Promotion paths copy the source template to the target location, and run the child Build Steps against the new copy. Typically, a Promotion Path will include a child Build Step to refresh the design of one or more databases in the environment (e.g. QA, UAT, Production) where the template has been copied, or \"promoted.\" To create a Promotion Path, select the Database document that identifies the source template, and choose Create > Promotion Path . Build Steps Promotion Paths create or update a template in the target environment. By creating additional Build Steps for a promotion path, CIAO! can be configured to reliably prepare the template for deployment (for example, set the template name and sign design elements) and deploy it by refreshing the design of target databases. For more information, see Build Steps .","title":"Promotion Paths"},{"location":"ciao/promotionpaths/#promotion-paths","text":"Promotion Paths define targets for moving source templates to new environments when Promoting a Database . Two types of CIAO! documents form the basis for building and promoting databases using CIAO!: Database Documents, also called CIAO! Configuration or \"Watch\" documents, define the \"source\" location - the source template of an application where development takes place. Promotion Paths define a \"target\" location - a server and path where the source template should be copied; build steps can then be run against this target to prepare it for release.","title":"Promotion Paths"},{"location":"ciao/promotionpaths/#database-documents","text":"Configuration documents are created by CIAO! when a source database is placed under CIAO! control, as described in Using CIAO! For information on configuring database documents, see Understanding CIAO! Config Information . For promotions, CIAO! uses the Database Document to identify the source template which the build will copy and act on, and can be created: By choosing the CIAO! view menu button and choosing Add Database to add a source template that exists on a server. By launching the CIAO! client on a currently unwatched database, and following the prompts to begin watching the database. The second method will help ensure that all required fields are set accurately.","title":"Database Documents"},{"location":"ciao/promotionpaths/#promotion-paths_1","text":"Promotion Paths specify a target location to \"promote\" a template. Promotion paths copy the source template to the target location, and run the child Build Steps against the new copy. Typically, a Promotion Path will include a child Build Step to refresh the design of one or more databases in the environment (e.g. QA, UAT, Production) where the template has been copied, or \"promoted.\" To create a Promotion Path, select the Database document that identifies the source template, and choose Create > Promotion Path .","title":"Promotion Paths"},{"location":"ciao/promotionpaths/#build-steps","text":"Promotion Paths create or update a template in the target environment. By creating additional Build Steps for a promotion path, CIAO! can be configured to reliably prepare the template for deployment (for example, set the template name and sign design elements) and deploy it by refreshing the design of target databases. For more information, see Build Steps .","title":"Build Steps"},{"location":"install/before/","text":"Before You Begin Review System Requirements Teamstudio Client has the following system requirements: Windows Vista, Windows 7, Windows 8 and Windows 10 versions supported by Notes on Intel platforms Note Microsoft has discontinued support for Windows XP and Windows Server 2003. Edition 32 is not supported on these platforms. Please contact your account manager if you have questions about running our tools on Windows XP or Windows Server 2003. Notes, in versions currently supported by HCL. Note Teamstudio Notes Tools typically work without issue on earlier versions of Notes, and technical support is available for customers on legacy versions of Notes. Teamstudio may not, however, be able to provide fixes for issues that are specific to unsupported versions of Notes. For more information on installing Teamstudio tools on earlier versions of Notes, contact techsupport@teamstudio.com . To verify your version of Notes is supported by HCL check HCL's Support Lifecycle Approximately 50 MB of hard disk drive space Sufficient RAM to run HCL Lotus Notes Sufficient Windows permissions to install software on your local machine. Teamstudio CIAO! Server has the following system requirements: Windows Server versions as supported by your version of Domino server 32bit & 64bit Domino Server versions as currently supported by HCL Teamstudio Profiler Server has the following system requirements: Windows Server versions as supported by your version of Domino server 32bit Domino Server versions as currently supported by HCL Note The Analyzer Filters database included in this release is deanfltr.ntf . If you are using deanfltr.ntf and have changed it in any way, you must save it to another file name before you install this release. Otherwise, you will lose your changes or customizations. To upgrade your filters database: Make a copy of your current Analyzer Filters Database ( deanfltr.nsf or deanfltr.ntf ). Create a new database ( File > Database > New ) and name it deanfltr.nsf and then select the Analyzer Filters Template from the template box. Click Yes when Notes asks you if you want to overwrite the existing one. (It\u2019s ok, you\u2019ve made a copy.) Copy all your custom filters from your old database into this new database.","title":"Before You Begin"},{"location":"install/before/#before-you-begin","text":"","title":"Before You Begin"},{"location":"install/before/#review-system-requirements","text":"Teamstudio Client has the following system requirements: Windows Vista, Windows 7, Windows 8 and Windows 10 versions supported by Notes on Intel platforms Note Microsoft has discontinued support for Windows XP and Windows Server 2003. Edition 32 is not supported on these platforms. Please contact your account manager if you have questions about running our tools on Windows XP or Windows Server 2003. Notes, in versions currently supported by HCL. Note Teamstudio Notes Tools typically work without issue on earlier versions of Notes, and technical support is available for customers on legacy versions of Notes. Teamstudio may not, however, be able to provide fixes for issues that are specific to unsupported versions of Notes. For more information on installing Teamstudio tools on earlier versions of Notes, contact techsupport@teamstudio.com . To verify your version of Notes is supported by HCL check HCL's Support Lifecycle Approximately 50 MB of hard disk drive space Sufficient RAM to run HCL Lotus Notes Sufficient Windows permissions to install software on your local machine. Teamstudio CIAO! Server has the following system requirements: Windows Server versions as supported by your version of Domino server 32bit & 64bit Domino Server versions as currently supported by HCL Teamstudio Profiler Server has the following system requirements: Windows Server versions as supported by your version of Domino server 32bit Domino Server versions as currently supported by HCL Note The Analyzer Filters database included in this release is deanfltr.ntf . If you are using deanfltr.ntf and have changed it in any way, you must save it to another file name before you install this release. Otherwise, you will lose your changes or customizations. To upgrade your filters database: Make a copy of your current Analyzer Filters Database ( deanfltr.nsf or deanfltr.ntf ). Create a new database ( File > Database > New ) and name it deanfltr.nsf and then select the Analyzer Filters Template from the template box. Click Yes when Notes asks you if you want to overwrite the existing one. (It\u2019s ok, you\u2019ve made a copy.) Copy all your custom filters from your old database into this new database.","title":"Review System Requirements"},{"location":"install/ciao/","text":"CIAO! Special Instructions If you are installing CIAO! Client Edition, first use the instructions described earlier for your version of Notes. Then follow these additional steps. Installation Procedure If this is the first time you have installed CIAO! Client Edition for this workgroup, you must create a CIAO! configuration database. The CIAO! configuration database should be on the same server as your database designs. To install CIAO! for a workgroup (rather than for a single user), create this database on a Notes/Domino server that can be accessed by all members of the workgroup. Give the new database the name: ciao\\ciaoconfig.nsf Base the design on the CIAO! Configuration template ( ciao.ntf ). Select the Inherit future design changes check box. Click OK to create. Although you normally create these databases on a Notes server, you can optionally create them locally (for example, for testing.) After Installation of an Update After installing an update to Teamstudio products, you must refresh the design of your CIAO! Configuration and Log databases that were created by prior release templates. To Refresh Your Database's Design Select your database from the Notes Workspace or open it. Click File > Application > Refresh Design . Select your server. Then, click OK . You see a message informing you about potential effects of the refresh and asking you to confirm. Click Yes . The designs of your CIAO! Configuration and Log databases have been updated to the latest design templates.","title":"CIAO! Special Instructions"},{"location":"install/ciao/#ciao-special-instructions","text":"If you are installing CIAO! Client Edition, first use the instructions described earlier for your version of Notes. Then follow these additional steps.","title":"CIAO! Special Instructions"},{"location":"install/ciao/#installation-procedure","text":"If this is the first time you have installed CIAO! Client Edition for this workgroup, you must create a CIAO! configuration database. The CIAO! configuration database should be on the same server as your database designs. To install CIAO! for a workgroup (rather than for a single user), create this database on a Notes/Domino server that can be accessed by all members of the workgroup. Give the new database the name: ciao\\ciaoconfig.nsf Base the design on the CIAO! Configuration template ( ciao.ntf ). Select the Inherit future design changes check box. Click OK to create. Although you normally create these databases on a Notes server, you can optionally create them locally (for example, for testing.)","title":"Installation Procedure"},{"location":"install/ciao/#after-installation-of-an-update","text":"After installing an update to Teamstudio products, you must refresh the design of your CIAO! Configuration and Log databases that were created by prior release templates.","title":"After Installation of an Update"},{"location":"install/ciao/#to-refresh-your-databases-design","text":"Select your database from the Notes Workspace or open it. Click File > Application > Refresh Design . Select your server. Then, click OK . You see a message informing you about potential effects of the refresh and asking you to confirm. Click Yes . The designs of your CIAO! Configuration and Log databases have been updated to the latest design templates.","title":"To Refresh Your Database's Design"},{"location":"install/client/","text":"Installing on the Notes Client Introduction Client-based modules include: Analyzer CIAO! Client Edition Configurator Delta Design Manager Profiler Undo Validator You install client tools on each developer's workstation. If you are using them, you should first install the CIAO! and Profiler server components on a Notes/Domino server. See Install Server-based Modules for details. Windows Installer Beginning with Edition 32, the Notes Tools installer utilizes Windows Installer. This offers a more conventional installation experience than earlier versions and replaces the Widget Installers and the beta MSI installers from E31.1. Installation Verify that the system you are installing on meets the system requirements in the Before You Begin section. Download the Notes Tools installer from the Download Page . Close and exit all Notes client processes (Notes, Designer, Admin, etc.). Launch the downloaded \"Notes Tools.exe\" installer, and follow the instructions in the installation wizard. The installation wizard will allow you to confirm the location of the Notes client install, and choose which tools in the suite to install. The installation utilizes artifacts from the Notes client installation and can encounter issues if Notes has been moved or upgraded in certain ways. If you experience errors during installation, contact techsupport@teamstudio.com for guidance on how to resolve installation issues. Note If you previously installed a beta release with the same major and minor version number as the version you are installing, you must remove the existing install first, via the Windows Control Panel's \"Add or Remove Programs\" feature. If you installed the tools using the E31.1 beta MSI installers, we recommend removing the tools via the Windows Control Panel before installing E32. The E32 installer will upgrade your tools in any case, but it is not able to remove the old Control Panel entries. In all other cases, the E32 installer should be able to upgrade your existing installation. Installation Changes in E32 The tools are no longer installed using widgets. The installer will attempt to remove previous widgets as part of the upgrade process. The client tools are no longer installed to the Notes program directory. They are now installed, by default, to C:\\Program Files (x86)\\Teamstudio\\Notes Tools\\bin and this directory is added to the current user's PATH. No files are installed to the Notes program directory. Note If you are upgrading from an older version of the tools, the E32 installer needs to remove any old Teamstudio files from the Notes program directory. If you are running Notes from a file server, you will need write access to that directory for the initial E32 install. Subsequent upgrades will no longer write to the Notes program directory. A single installer now handles the installation of all products. This means that all products from E32 onwards must be upgraded together. So when you upgrade to E32.1, for example, you cannot upgrade just Teamstudio Analyzer and leave Teamstudio Configurator at E32. This only applies to E32 and above - it is possible to retain, say, E31.1 of Teamstudio Analyzer and install E32 of Teamstudio Configurator. While rare, if you need to downgrade to an older version, you will need to uninstall all products and then reinstall the older version. It is no longer necessary to remove older versions before upgrading. The installer will automatically remove previous versions as part of the installation process. All installation directories are now configurable. The installer will attempt to find your Notes program directory, data directory and notes.ini location but you can modify them if you have a complex configuration that the installer does not correctly recognize. You can also change the directory in which the Teamstudio tools are installed, although this is not recommended.","title":"Installing on the Notes Client"},{"location":"install/client/#installing-on-the-notes-client","text":"","title":"Installing on the Notes Client"},{"location":"install/client/#introduction","text":"Client-based modules include: Analyzer CIAO! Client Edition Configurator Delta Design Manager Profiler Undo Validator You install client tools on each developer's workstation. If you are using them, you should first install the CIAO! and Profiler server components on a Notes/Domino server. See Install Server-based Modules for details.","title":"Introduction"},{"location":"install/client/#windows-installer","text":"Beginning with Edition 32, the Notes Tools installer utilizes Windows Installer. This offers a more conventional installation experience than earlier versions and replaces the Widget Installers and the beta MSI installers from E31.1.","title":"Windows Installer"},{"location":"install/client/#installation","text":"Verify that the system you are installing on meets the system requirements in the Before You Begin section. Download the Notes Tools installer from the Download Page . Close and exit all Notes client processes (Notes, Designer, Admin, etc.). Launch the downloaded \"Notes Tools.exe\" installer, and follow the instructions in the installation wizard. The installation wizard will allow you to confirm the location of the Notes client install, and choose which tools in the suite to install. The installation utilizes artifacts from the Notes client installation and can encounter issues if Notes has been moved or upgraded in certain ways. If you experience errors during installation, contact techsupport@teamstudio.com for guidance on how to resolve installation issues. Note If you previously installed a beta release with the same major and minor version number as the version you are installing, you must remove the existing install first, via the Windows Control Panel's \"Add or Remove Programs\" feature. If you installed the tools using the E31.1 beta MSI installers, we recommend removing the tools via the Windows Control Panel before installing E32. The E32 installer will upgrade your tools in any case, but it is not able to remove the old Control Panel entries. In all other cases, the E32 installer should be able to upgrade your existing installation.","title":"Installation"},{"location":"install/client/#installation-changes-in-e32","text":"The tools are no longer installed using widgets. The installer will attempt to remove previous widgets as part of the upgrade process. The client tools are no longer installed to the Notes program directory. They are now installed, by default, to C:\\Program Files (x86)\\Teamstudio\\Notes Tools\\bin and this directory is added to the current user's PATH. No files are installed to the Notes program directory. Note If you are upgrading from an older version of the tools, the E32 installer needs to remove any old Teamstudio files from the Notes program directory. If you are running Notes from a file server, you will need write access to that directory for the initial E32 install. Subsequent upgrades will no longer write to the Notes program directory. A single installer now handles the installation of all products. This means that all products from E32 onwards must be upgraded together. So when you upgrade to E32.1, for example, you cannot upgrade just Teamstudio Analyzer and leave Teamstudio Configurator at E32. This only applies to E32 and above - it is possible to retain, say, E31.1 of Teamstudio Analyzer and install E32 of Teamstudio Configurator. While rare, if you need to downgrade to an older version, you will need to uninstall all products and then reinstall the older version. It is no longer necessary to remove older versions before upgrading. The installer will automatically remove previous versions as part of the installation process. All installation directories are now configurable. The installer will attempt to find your Notes program directory, data directory and notes.ini location but you can modify them if you have a complex configuration that the installer does not correctly recognize. You can also change the directory in which the Teamstudio tools are installed, although this is not recommended.","title":"Installation Changes in E32"},{"location":"install/icons/","text":"About Teamstudio Icons When Notes 8.0.x has restarted, you should see the Teamstudio SmartIcon(s) installed on your SmartIcon Toolbar. When Notes 8.5.1 or above has restarted, you should see the Teamstudio Icon(s) installed on your Java toolbar. Note that Teamstudio SmartIcons that were installed from a previous version will still appear on your Smarticon toolbar. Any of the Teamstudio icons will run the latest Teamstudio software you installed.","title":"About Teamstudio Icons"},{"location":"install/icons/#about-teamstudio-icons","text":"When Notes 8.0.x has restarted, you should see the Teamstudio SmartIcon(s) installed on your SmartIcon Toolbar. When Notes 8.5.1 or above has restarted, you should see the Teamstudio Icon(s) installed on your Java toolbar. Note that Teamstudio SmartIcons that were installed from a previous version will still appear on your Smarticon toolbar. Any of the Teamstudio icons will run the latest Teamstudio software you installed.","title":"About Teamstudio Icons"},{"location":"install/initializing/","text":"Initializing Teamstudio Tools Each Teamstudio client product is protected by a serial number and key. You must configure each Teamstudio client product before you can use it. You will receive a serial number and key pair with each Teamstudio client license that you purchase. To initialize Teamstudio client products From Designer, click the icon for the tool you want to initialize. You see a Serial Number dialog. Enter the serial number (in this format xx-xxxxx) and key for the product (in this format xxxxx-xxxxx-xxxxxx). You are prompted for this information once for each product, the first time you run the product. Click OK . The Teamstudio product you selected starts immediately. If you cannot remember the serial number and key, or do not have the information on hand, please contact Teamstudio. If you are prompted for the information again after entering it, you likely entered an incorrect serial number or key. Review, confirm, and re-enter the serial number and key. If the system does not start, contact Teamstudio. Note The letters I and L are interchangeable with the number 1; the letter O is interchangeable with the digit 0 and the letter S is interchangeable with the number 5.","title":"Initializing Teamstudio Tools"},{"location":"install/initializing/#initializing-teamstudio-tools","text":"Each Teamstudio client product is protected by a serial number and key. You must configure each Teamstudio client product before you can use it. You will receive a serial number and key pair with each Teamstudio client license that you purchase.","title":"Initializing Teamstudio Tools"},{"location":"install/initializing/#to-initialize-teamstudio-client-products","text":"From Designer, click the icon for the tool you want to initialize. You see a Serial Number dialog. Enter the serial number (in this format xx-xxxxx) and key for the product (in this format xxxxx-xxxxx-xxxxxx). You are prompted for this information once for each product, the first time you run the product. Click OK . The Teamstudio product you selected starts immediately. If you cannot remember the serial number and key, or do not have the information on hand, please contact Teamstudio. If you are prompted for the information again after entering it, you likely entered an incorrect serial number or key. Review, confirm, and re-enter the serial number and key. If the system does not start, contact Teamstudio. Note The letters I and L are interchangeable with the number 1; the letter O is interchangeable with the digit 0 and the letter S is interchangeable with the number 5.","title":"To initialize Teamstudio client products"},{"location":"install/removing/","text":"Removing Teamstudio Tools The tools installation can be removed or modified via the Windows Control Panel \"Add or Remove Programs\" feature, under \"Notes Tools.\" Note For information on removing versions prior to Edition 32, contact techsupport@teamstudio.com.","title":"Removing Teamstudio Tools"},{"location":"install/removing/#removing-teamstudio-tools","text":"The tools installation can be removed or modified via the Windows Control Panel \"Add or Remove Programs\" feature, under \"Notes Tools.\" Note For information on removing versions prior to Edition 32, contact techsupport@teamstudio.com.","title":"Removing Teamstudio Tools"},{"location":"install/running/","text":"Running Teamstudio Products You can access Teamstudio products without using the icons, by using the following executable files. File Product ndean.exe Analyzer nciao.exe CIAO! nconfy.exe Configurator ndelta.exe Delta nlibr.exe Design Manager nprofile.exe Profiler nundo.exe Undo nvalidator.exe Validator You can start the products From the Microsoft Windows Command prompt. From a new shortcut you create on your desktop. For example, to launch CIAO! on a particular database, specify in a command line: nciao database where database is one of Server/Domain!!database , Server!!database or database .","title":"Running Teamstudio Products"},{"location":"install/running/#running-teamstudio-products","text":"You can access Teamstudio products without using the icons, by using the following executable files. File Product ndean.exe Analyzer nciao.exe CIAO! nconfy.exe Configurator ndelta.exe Delta nlibr.exe Design Manager nprofile.exe Profiler nundo.exe Undo nvalidator.exe Validator You can start the products From the Microsoft Windows Command prompt. From a new shortcut you create on your desktop. For example, to launch CIAO! on a particular database, specify in a command line: nciao database where database is one of Server/Domain!!database , Server!!database or database .","title":"Running Teamstudio Products"},{"location":"install/server/","text":"Install Server-Based Modules Optionally, you can install CIAO! and Profiler Server Editions onto each Domino server. Server Tool Why Install? CIAO! Server Provides additional features, for example, preventing design changes made by any process or by someone other than the developer who checked the design element out. Profiler Server Tests the performance activity of a scheduled agent or a web agent. Windows Installation Procedure Before you begin, make sure of the following: You have purchased a license for each server you want to install on. CIAO! and/or Profiler Server Editions are licensed per Domino server. To install CIAO! Server Edition Copy the files: Put nhkciao.dll into the server's exe directory (same as nserver.exe) Put ciaologf.ntf and ciao.ntf into the data directory. From a notes client create the following databases on the server using the templates on that server. CIAO\\CIAOConfig.nsf (Template: Teamstudio CIAO! Configuration) CIAO\\CIAOLog.nsf (Template: Teamstudio CIAO! Log File) Add the serial key: Create a file called teamstudio.ini in the data directory of the server. Add the following lines: [CIAO] HKCIAOKey=xxxxx-xxxxx-xxxxx,xx-xxxxx CIAOConfigDb=CIAO\\CIAOConfig.nsf replacing the xxx with your license followed by a comma and your serial number. Edit your notes.ini to add/modify the following line: NSF_HOOKS=hkciao Restart the Domino server. If you see lines similar to this: CIAO Server Hook started - (SERVER). (HKCIAO Edition 33 build xxxxx) CIAO Server Hook: Using Configuration File: CIAO\\CIAOConfig.nsf then you know that CIAO Server Edition is running. To install Profiler Server Edition Copy the files: Put nhkprofile.dll into the server's exe directory (same as nserver.exe) Put profile.ntf and tmslogs.ntf into the data directory. From a Notes client create the following database on the server using the template on that server. Teamstudio\\ProfilerConfig.nsf (Template: Teamstudio Profiler Configuration) Add the serial key as follows: Create a file called teamstudio.ini in the data directory of the server. Add the following lines: [Profiler] HKPROFKey=xxxxx-xxxxx-xxxxx,xx-xxxxx ProfilerServerConfig=Teamstudio\\ProfilerConfig.nsf replacing the xxx with your license followed by a comma and your serial number. Edit your notes.ini to add/modify the following line: NSF_HOOKS=hkprofile Restart the Domino server. If you see lines like the following, then you know that Profiler Server Edition is running: (namgr) - Profiler Server Hook started. (HKPROFILE Edition 33 build xxxxx) Profiler Server Hook: Using Configuration File: Teamstudio\\ProfilerConfig.nsf","title":"Install Server-Based Modules"},{"location":"install/server/#install-server-based-modules","text":"Optionally, you can install CIAO! and Profiler Server Editions onto each Domino server. Server Tool Why Install? CIAO! Server Provides additional features, for example, preventing design changes made by any process or by someone other than the developer who checked the design element out. Profiler Server Tests the performance activity of a scheduled agent or a web agent.","title":"Install Server-Based Modules"},{"location":"install/server/#windows-installation-procedure","text":"Before you begin, make sure of the following: You have purchased a license for each server you want to install on. CIAO! and/or Profiler Server Editions are licensed per Domino server.","title":"Windows Installation Procedure"},{"location":"install/server/#to-install-ciao-server-edition","text":"Copy the files: Put nhkciao.dll into the server's exe directory (same as nserver.exe) Put ciaologf.ntf and ciao.ntf into the data directory. From a notes client create the following databases on the server using the templates on that server. CIAO\\CIAOConfig.nsf (Template: Teamstudio CIAO! Configuration) CIAO\\CIAOLog.nsf (Template: Teamstudio CIAO! Log File) Add the serial key: Create a file called teamstudio.ini in the data directory of the server. Add the following lines: [CIAO] HKCIAOKey=xxxxx-xxxxx-xxxxx,xx-xxxxx CIAOConfigDb=CIAO\\CIAOConfig.nsf replacing the xxx with your license followed by a comma and your serial number. Edit your notes.ini to add/modify the following line: NSF_HOOKS=hkciao Restart the Domino server. If you see lines similar to this: CIAO Server Hook started - (SERVER). (HKCIAO Edition 33 build xxxxx) CIAO Server Hook: Using Configuration File: CIAO\\CIAOConfig.nsf then you know that CIAO Server Edition is running.","title":"To install CIAO! Server Edition"},{"location":"install/server/#to-install-profiler-server-edition","text":"Copy the files: Put nhkprofile.dll into the server's exe directory (same as nserver.exe) Put profile.ntf and tmslogs.ntf into the data directory. From a Notes client create the following database on the server using the template on that server. Teamstudio\\ProfilerConfig.nsf (Template: Teamstudio Profiler Configuration) Add the serial key as follows: Create a file called teamstudio.ini in the data directory of the server. Add the following lines: [Profiler] HKPROFKey=xxxxx-xxxxx-xxxxx,xx-xxxxx ProfilerServerConfig=Teamstudio\\ProfilerConfig.nsf replacing the xxx with your license followed by a comma and your serial number. Edit your notes.ini to add/modify the following line: NSF_HOOKS=hkprofile Restart the Domino server. If you see lines like the following, then you know that Profiler Server Edition is running: (namgr) - Profiler Server Hook started. (HKPROFILE Edition 33 build xxxxx) Profiler Server Hook: Using Configuration File: Teamstudio\\ProfilerConfig.nsf","title":"To install Profiler Server Edition"},{"location":"install/trouble/","text":"Troubleshooting The following table shows some common installation problems and how to handle them. Problem/Error What to do If you try to add or remove Teamstudio tools with Notes running, you may see a message that files are in use. If you choose to terminate Notes, you may get a message that the installer is unable to terminate Notes. You can safely ignore this message which is coming from Windows Installer. You will be prompted later in the install to shut down Notes and this second attempt will be successful. After installing Profiler, you see an error that NNOTES.dll cannot be found when you try to open a .tps file. This problem can occur because nprofile.exe, the file that opens .tps files, is no longer in the Notes program directory and thus can no longer locate the Notes dlls it needs. To fix the error, add the Notes program directory to your Windows path.","title":"Troubleshooting"},{"location":"install/trouble/#troubleshooting","text":"The following table shows some common installation problems and how to handle them. Problem/Error What to do If you try to add or remove Teamstudio tools with Notes running, you may see a message that files are in use. If you choose to terminate Notes, you may get a message that the installer is unable to terminate Notes. You can safely ignore this message which is coming from Windows Installer. You will be prompted later in the install to shut down Notes and this second attempt will be successful. After installing Profiler, you see an error that NNOTES.dll cannot be found when you try to open a .tps file. This problem can occur because nprofile.exe, the file that opens .tps files, is no longer in the Notes program directory and thus can no longer locate the Notes dlls it needs. To fix the error, add the Notes program directory to your Windows path.","title":"Troubleshooting"},{"location":"profiler/","text":"Profiler Overview Teamstudio Profiler helps identify the LotusScript performance issues of Notes applications. Lots of things can impact the performance of Notes applications. One area which often causes performance problems is poorly written LotusScript code. This type of problem can be difficult to pinpoint. Troubleshooting is time-consuming and error-prone. When you use Profiler, you remove much of the \u201cguess-work\u201d from troubleshooting.","title":"Profiler Overview"},{"location":"profiler/#profiler-overview","text":"Teamstudio Profiler helps identify the LotusScript performance issues of Notes applications. Lots of things can impact the performance of Notes applications. One area which often causes performance problems is poorly written LotusScript code. This type of problem can be difficult to pinpoint. Troubleshooting is time-consuming and error-prone. When you use Profiler, you remove much of the \u201cguess-work\u201d from troubleshooting.","title":"Profiler Overview"},{"location":"profiler/calltree/","text":"Using the Call Tree You can also use the Call Tree to investigate your results. The Call Tree gives you a different way to look at the functions called while Profiler ran. To use the Call Tree Click View > Call Tree . You see the Calls window. Select a function and click the Show Function button to automatically highlight that function in the main results pane. Select the Combine Children check box so that similar calls appear in the Calls window as a single entry. This feature simplifies the tree. For example, if you have a loop that calls a particular function hundreds of times, the call tree will only show that function once. If you uncheck the box, all function calls will appear in the tree even if they are duplicates. When you are finished with your investigation, click Close . Profiler will ask if you want to save the file. After you specify where to save it, it is saved as a Profiler snapshot (.tps file). You can also click File > Save As to save your report.","title":"Using the Call Tree"},{"location":"profiler/calltree/#using-the-call-tree","text":"You can also use the Call Tree to investigate your results. The Call Tree gives you a different way to look at the functions called while Profiler ran.","title":"Using the Call Tree"},{"location":"profiler/calltree/#to-use-the-call-tree","text":"Click View > Call Tree . You see the Calls window. Select a function and click the Show Function button to automatically highlight that function in the main results pane. Select the Combine Children check box so that similar calls appear in the Calls window as a single entry. This feature simplifies the tree. For example, if you have a loop that calls a particular function hundreds of times, the call tree will only show that function once. If you uncheck the box, all function calls will appear in the tree even if they are duplicates. When you are finished with your investigation, click Close . Profiler will ask if you want to save the file. After you specify where to save it, it is saved as a Profiler snapshot (.tps file). You can also click File > Save As to save your report.","title":"To use the Call Tree"},{"location":"profiler/client/","text":"Using Profiler Client To use Profiler client, you run Profiler with your application, and then you review the results. Some circumstances are especially appropriate times to run Profiler. When to use Profiler At the end of a development cycle, as part of final QA, where the code is stable, yet would benefit from performance improvements If you have assumed responsibility for older HCL Lotus Notes or Domino applications that would benefit from performance improvements, as opposed to additional, costly hardware upgrades If you have been assigned to maintain older applications, with which you are unfamiliar","title":"Using Profiler Client"},{"location":"profiler/client/#using-profiler-client","text":"To use Profiler client, you run Profiler with your application, and then you review the results. Some circumstances are especially appropriate times to run Profiler.","title":"Using Profiler Client"},{"location":"profiler/client/#when-to-use-profiler","text":"At the end of a development cycle, as part of final QA, where the code is stable, yet would benefit from performance improvements If you have assumed responsibility for older HCL Lotus Notes or Domino applications that would benefit from performance improvements, as opposed to additional, costly hardware upgrades If you have been assigned to maintain older applications, with which you are unfamiliar","title":"When to use Profiler"},{"location":"profiler/configuration/","text":"Profiler Configuration Database Before you can use Profiler on the server, you must create a Profiler Configuration database. To create a Profiler configuration database Install Profiler on your server. From a Notes client, click File > Application > New . You see the New Application window. From the Server dropdown in the Specify New Application section, select the server you just installed to. In the Title box, enter the title you want. In the File Name box, enter Teamstudio\\ProfilerConfig.nsf. From the Server dropdown in the Specify template for New Application section, select the server you just installed to. From the template list, select Teamstudio Profiler Configuration (profile.ntf). Make sure that Inherit future design changes check box is selected. Click OK . Your Profiler configuration database has been created. To profile selected agents Open the Profiler configuration database. Click Create Agent Config Doc to add an agent to be profiled. You see the Select agent to profile window. Click the Browse button to select a database to monitor. Note You must select a database on the same server as the Profiler configuration database. Click the Get Agents button to view all the agents in the database. Use the dropdown to select an agent from the database. Note Only LotusScript agents will be listed. Click Select Agent to select an agent. You see information about the agent you selected. Click OK . The next time the agent runs, Profiler will collect timing information and create a document in the Profiler Log database on the server. The Configuration Document The following configuration information is provided in this document: Information Description Enabled Select Yes or No to enable or disable Profiler from monitoring this agent. Agent The name of the agent. Run Count Specify how many times Profiler should collect information on an agent. Profiled Runs The number of times the agent has been run since this was set or reset. Options Specify an option, as selected on the Profiler window: Function Entry Points - collect information on function entry points Functions and Lines - collect information on functions and lines of LotusScript Functions - collect information on functions User Profiler will only run when the agent is triggered by a particular user. Agent Signer The ID file used to sign agents. This is only required when run on an R5 server. Agent Signer Password The password for the attached ID. Note : This field is not encrypted and is stored as plain text. Note Agent Signer and Agent Signer Password in the above table have some restrictions. When running on a Notes Release 6 server, these fields can be ignored. Profiler server runs using the Server ID. On Release 6, code signed by the server ID is allowed to run unrestricted. Signing with a special ID is unnecessary. On Release 5, however, the server is not granted these rights by default. After Profiler modifies and resigns code, the server may not be able to execute it. To avoid this problem, use one of the following options: Add the server name to the Run unrestricted LotusScript agents field on the server configuration document. Add the signer ID to the agent configuration document.","title":"Profiler Configuration Database"},{"location":"profiler/configuration/#profiler-configuration-database","text":"Before you can use Profiler on the server, you must create a Profiler Configuration database.","title":"Profiler Configuration Database"},{"location":"profiler/configuration/#to-create-a-profiler-configuration-database","text":"Install Profiler on your server. From a Notes client, click File > Application > New . You see the New Application window. From the Server dropdown in the Specify New Application section, select the server you just installed to. In the Title box, enter the title you want. In the File Name box, enter Teamstudio\\ProfilerConfig.nsf. From the Server dropdown in the Specify template for New Application section, select the server you just installed to. From the template list, select Teamstudio Profiler Configuration (profile.ntf). Make sure that Inherit future design changes check box is selected. Click OK . Your Profiler configuration database has been created.","title":"To create a Profiler configuration database"},{"location":"profiler/configuration/#to-profile-selected-agents","text":"Open the Profiler configuration database. Click Create Agent Config Doc to add an agent to be profiled. You see the Select agent to profile window. Click the Browse button to select a database to monitor. Note You must select a database on the same server as the Profiler configuration database. Click the Get Agents button to view all the agents in the database. Use the dropdown to select an agent from the database. Note Only LotusScript agents will be listed. Click Select Agent to select an agent. You see information about the agent you selected. Click OK . The next time the agent runs, Profiler will collect timing information and create a document in the Profiler Log database on the server.","title":"To profile selected agents"},{"location":"profiler/configuration/#the-configuration-document","text":"The following configuration information is provided in this document: Information Description Enabled Select Yes or No to enable or disable Profiler from monitoring this agent. Agent The name of the agent. Run Count Specify how many times Profiler should collect information on an agent. Profiled Runs The number of times the agent has been run since this was set or reset. Options Specify an option, as selected on the Profiler window: Function Entry Points - collect information on function entry points Functions and Lines - collect information on functions and lines of LotusScript Functions - collect information on functions User Profiler will only run when the agent is triggered by a particular user. Agent Signer The ID file used to sign agents. This is only required when run on an R5 server. Agent Signer Password The password for the attached ID. Note : This field is not encrypted and is stored as plain text. Note Agent Signer and Agent Signer Password in the above table have some restrictions. When running on a Notes Release 6 server, these fields can be ignored. Profiler server runs using the Server ID. On Release 6, code signed by the server ID is allowed to run unrestricted. Signing with a special ID is unnecessary. On Release 5, however, the server is not granted these rights by default. After Profiler modifies and resigns code, the server may not be able to execute it. To avoid this problem, use one of the following options: Add the server name to the Run unrestricted LotusScript agents field on the server configuration document. Add the signer ID to the agent configuration document.","title":"The Configuration Document"},{"location":"profiler/log/","text":"Profiler Log Database To view Profiler Log information Open the Profiler log database. The red icon in the Time column indicates that Profiler encountered an error that prevented it from running on the selected code. Open a document to view more details. Click the View Results button at the top of the form. This launches Profiler to view the attached results. Note Profiler Client must be installed. You can also save the attachment to your hard drive, launch Profiler from your Notes client and click **File > Open** to open the file.","title":"Profiler Log Database"},{"location":"profiler/log/#profiler-log-database","text":"","title":"Profiler Log Database"},{"location":"profiler/log/#to-view-profiler-log-information","text":"Open the Profiler log database. The red icon in the Time column indicates that Profiler encountered an error that prevented it from running on the selected code. Open a document to view more details. Click the View Results button at the top of the form. This launches Profiler to view the attached results. Note Profiler Client must be installed. You can also save the attachment to your hard drive, launch Profiler from your Notes client and click **File > Open** to open the file.","title":"To view Profiler Log information"},{"location":"profiler/results/","text":"Reviewing Profiler Results The Total Time field reports the number of seconds that your application ran. Seconds are the default units of time. Click View > Units to change from seconds to milliseconds, or milliseconds to seconds. Click a column heading to sort by that column. The pane at the top shows the list of functions that were running during Profiler's collection interval and information about those functions. Column Description Fn The function name. Calls The number of times the function was called. Time + Children The combined time including the time the function took plus the time its child functions took to execute. Time The time the function took. % Parent The percentage of total time that the function took to run in relation to the calling function. Average The average time the function took to run once. Average + Children The average time taken by the function and its children for each call ((time + children)/calls). Element The name of the design element in which the code is located. Item The name of the NoteItem in which the code is located. Profiler uses the following naming convention to represent classes and methods: <class name>::<method name> To work with Profiler Results In the upper pane, select a function you want to investigate further. You see more detailed information in the lower pane, with the Children tab selected by default. The function selected in the Summary pane called the functions listed in the Children tab. In the example, the `FINDPERSON` function called the three child functions listed: FINDPERSONSLOWLY1 FINDPERSONSLOWLY2 FINDPERSONQUICKLY The first two child functions took most of the FINDPERSON function's time, which may warrant further investigation. Note Child functions do not include LotusScript language functions such as Print or Message Box. They also do not include Product Classes such as NotesDocument or NotesDatabase. Time in the Detail pane is relative to the Parent function's time. Double-click a function on the Children tab to view information about its child functions. Use the arrow buttons at the top of the Children tab to go between levels of child functions. Click the Source tab to view LotusScript source. The example shows that line number 2 took the most time.","title":"Reviewing Profiler Results"},{"location":"profiler/results/#reviewing-profiler-results","text":"The Total Time field reports the number of seconds that your application ran. Seconds are the default units of time. Click View > Units to change from seconds to milliseconds, or milliseconds to seconds. Click a column heading to sort by that column. The pane at the top shows the list of functions that were running during Profiler's collection interval and information about those functions. Column Description Fn The function name. Calls The number of times the function was called. Time + Children The combined time including the time the function took plus the time its child functions took to execute. Time The time the function took. % Parent The percentage of total time that the function took to run in relation to the calling function. Average The average time the function took to run once. Average + Children The average time taken by the function and its children for each call ((time + children)/calls). Element The name of the design element in which the code is located. Item The name of the NoteItem in which the code is located. Profiler uses the following naming convention to represent classes and methods: <class name>::<method name>","title":"Reviewing Profiler Results"},{"location":"profiler/results/#to-work-with-profiler-results","text":"In the upper pane, select a function you want to investigate further. You see more detailed information in the lower pane, with the Children tab selected by default. The function selected in the Summary pane called the functions listed in the Children tab. In the example, the `FINDPERSON` function called the three child functions listed: FINDPERSONSLOWLY1 FINDPERSONSLOWLY2 FINDPERSONQUICKLY The first two child functions took most of the FINDPERSON function's time, which may warrant further investigation. Note Child functions do not include LotusScript language functions such as Print or Message Box. They also do not include Product Classes such as NotesDocument or NotesDatabase. Time in the Detail pane is relative to the Parent function's time. Double-click a function on the Children tab to view information about its child functions. Use the arrow buttons at the top of the Children tab to go between levels of child functions. Click the Source tab to view LotusScript source. The example shows that line number 2 took the most time.","title":"To work with Profiler Results"},{"location":"profiler/running/","text":"Running Profiler To run Profiler with your application, you select your target database, specify Profiler configuration settings, run your application, and then stop Profiler. Note Because of the way the Notes Client performs caching, you should restart the Notes Client before running Profiler. To Start Teamstudio Profiler In Designer, open the application you want to profile. Click the Profiler button on the toolbar. You see the Teamstudio Profiler window with the name of your database in the top field. Note Profiler will not let you profile a database that has a hidden design. An error will appear. Click OK to accept the error and the Teamstudio Profiler window will appear. The Begin button will be inactive. Setting Profiler Options You can set Profiler options as shown in the following table. Option Description Function Profiling Collect timing information on functions. If you choose this option, you can also choose the Entry Points option. Line Profiling Collect timing information on lines of LotusScript. This option gives the most detail. Entry Points Collect information on entry points to a function. Entry Points are functions like Initialize, Terminate, Click and Bind Events. This option gives the least detail, and can show you where to start. You can only select this if you have also selected the Function Profiling option. Note Line profiling is not available for code included from .lss files. To begin profiling From the Profiler window, click Begin to start Profiler. Open your database and use it as you normally would to trigger the code that you want to profile. Note Do not save things in Designer while Profiler is running. Unpredictable results will occur. To view the results Profiler has collected When you are finished, click the Profiler icon to stop Profiler. You see the Teamstudio Profiler results window.","title":"Running Profiler"},{"location":"profiler/running/#running-profiler","text":"To run Profiler with your application, you select your target database, specify Profiler configuration settings, run your application, and then stop Profiler. Note Because of the way the Notes Client performs caching, you should restart the Notes Client before running Profiler.","title":"Running Profiler"},{"location":"profiler/running/#to-start-teamstudio-profiler","text":"In Designer, open the application you want to profile. Click the Profiler button on the toolbar. You see the Teamstudio Profiler window with the name of your database in the top field. Note Profiler will not let you profile a database that has a hidden design. An error will appear. Click OK to accept the error and the Teamstudio Profiler window will appear. The Begin button will be inactive.","title":"To Start Teamstudio Profiler"},{"location":"profiler/running/#setting-profiler-options","text":"You can set Profiler options as shown in the following table. Option Description Function Profiling Collect timing information on functions. If you choose this option, you can also choose the Entry Points option. Line Profiling Collect timing information on lines of LotusScript. This option gives the most detail. Entry Points Collect information on entry points to a function. Entry Points are functions like Initialize, Terminate, Click and Bind Events. This option gives the least detail, and can show you where to start. You can only select this if you have also selected the Function Profiling option. Note Line profiling is not available for code included from .lss files.","title":"Setting Profiler Options"},{"location":"profiler/running/#to-begin-profiling","text":"From the Profiler window, click Begin to start Profiler. Open your database and use it as you normally would to trigger the code that you want to profile. Note Do not save things in Designer while Profiler is running. Unpredictable results will occur.","title":"To begin profiling"},{"location":"profiler/running/#to-view-the-results-profiler-has-collected","text":"When you are finished, click the Profiler icon to stop Profiler. You see the Teamstudio Profiler results window.","title":"To view the results Profiler has collected"},{"location":"profiler/server/","text":"Using Profiler Server Install the Profiler Server on your Domino server so you can monitor the performance activity of a scheduled or Web agent. Profiler Server uses the following databases on your server: Teamstudio/ProfilerConfig.nsf \u2013 Where you tell Profiler what to monitor. Teamstudio/ProfilerLog.nsf \u2013 Where Profiler keeps its results. Note Profiler is not intended to be used to monitor agents all of the time. Profiler creates a significant performance hit each time it is triggered by an agent. When not using Profiler, we recommend that you disable every agent in the Profiler Configuration database.","title":"Using Profiler Server"},{"location":"profiler/server/#using-profiler-server","text":"Install the Profiler Server on your Domino server so you can monitor the performance activity of a scheduled or Web agent. Profiler Server uses the following databases on your server: Teamstudio/ProfilerConfig.nsf \u2013 Where you tell Profiler what to monitor. Teamstudio/ProfilerLog.nsf \u2013 Where Profiler keeps its results. Note Profiler is not intended to be used to monitor agents all of the time. Profiler creates a significant performance hit each time it is triggered by an agent. When not using Profiler, we recommend that you disable every agent in the Profiler Configuration database.","title":"Using Profiler Server"},{"location":"profiler/troubleshooting/","text":"Troubleshooting Profiler The following tips may help prevent or resolve issues you could encounter when running Profiler: Because of the way the Notes client performs caching, you should restart the Notes client before running Profiler. Line profiling is not available for code included from .lss files. Make sure the code you want to profile has not yet been loaded when you start Profiler. For example, if you want to profile the LotusScript code for a button, make sure that the form that the button is on is not open. Otherwise, Profiler will not recognize that the code is running.","title":"Troubleshooting Profiler"},{"location":"profiler/troubleshooting/#troubleshooting-profiler","text":"The following tips may help prevent or resolve issues you could encounter when running Profiler: Because of the way the Notes client performs caching, you should restart the Notes client before running Profiler. Line profiling is not available for code included from .lss files. Make sure the code you want to profile has not yet been loaded when you start Profiler. For example, if you want to profile the LotusScript code for a button, make sure that the form that the button is on is not open. Otherwise, Profiler will not recognize that the code is running.","title":"Troubleshooting Profiler"},{"location":"undo/","text":"Overview Teamstudio Undo keeps track of changes to a database so you can roll back the individual design elements of either templates or databases. If the target database is already under CIAO! control, you can use Undo between check-ins. You can use Undo to retrace your steps to the previous save if you are not satisfied with the changes you have made. Undo saves the history of your elements in the Undo log database, undolog.nsf, which is located in the Teamstudio directory.","title":"Overview"},{"location":"undo/#overview","text":"Teamstudio Undo keeps track of changes to a database so you can roll back the individual design elements of either templates or databases. If the target database is already under CIAO! control, you can use Undo between check-ins. You can use Undo to retrace your steps to the previous save if you are not satisfied with the changes you have made. Undo saves the history of your elements in the Undo log database, undolog.nsf, which is located in the Teamstudio directory.","title":"Overview"},{"location":"undo/configuring/","text":"Configuring Undo To configure tracking of all NTF files Undo automatically keeps track of changes for all NTF files you work with, whether on your local computer, or on a server, so you don't have to configure that. If you are wondering if Undo knows about your NTF file - no worries - it does! If you prefer, you can manually configure Undo to keep track of changes to NSF files, or to keep track of changes within the files or folders you choose. To configure tracking of all NSF files or only selected databases or folders In a text editor, open the Teamstudio.ini file, which is located in the data directory. In the [Undo] section, change the line that says \"IncludeFiles=*.ntf\" as follows: To track the following Change \"IncludeFiles\" line as follows All NSF files only IncludeFiles=*.nsf All NTF and all NSF files IncludeFiles=.ntf,.nsf Just a few databases you want, for example, mytest1.ntf and mytest2.ntf IncludeFiles=mytest1.ntf,mytest2.ntf One directory only, for example, the mail folder IncludeFiles=mail/* Note Teamstudio recommends you only modify the IncludeFiles line if you have a very good reason. By leaving the default, you don't have to try to remember to add a new database or update the line again for a database whose name has changed.","title":"Configuring Undo"},{"location":"undo/configuring/#configuring-undo","text":"","title":"Configuring Undo"},{"location":"undo/configuring/#to-configure-tracking-of-all-ntf-files","text":"Undo automatically keeps track of changes for all NTF files you work with, whether on your local computer, or on a server, so you don't have to configure that. If you are wondering if Undo knows about your NTF file - no worries - it does! If you prefer, you can manually configure Undo to keep track of changes to NSF files, or to keep track of changes within the files or folders you choose.","title":"To configure tracking of all NTF files"},{"location":"undo/configuring/#to-configure-tracking-of-all-nsf-files-or-only-selected-databases-or-folders","text":"In a text editor, open the Teamstudio.ini file, which is located in the data directory. In the [Undo] section, change the line that says \"IncludeFiles=*.ntf\" as follows: To track the following Change \"IncludeFiles\" line as follows All NSF files only IncludeFiles=*.nsf All NTF and all NSF files IncludeFiles=.ntf,.nsf Just a few databases you want, for example, mytest1.ntf and mytest2.ntf IncludeFiles=mytest1.ntf,mytest2.ntf One directory only, for example, the mail folder IncludeFiles=mail/* Note Teamstudio recommends you only modify the IncludeFiles line if you have a very good reason. By leaving the default, you don't have to try to remember to add a new database or update the line again for a database whose name has changed.","title":"To configure tracking of all NSF files or only selected databases or folders"},{"location":"undo/undoing/","text":"Undoing a Change To rollback database design element changes From Designer, click the Undo button on the toolbar. You see the Teamstudio Undo window with the following element change information: The design element type, the element name, the changes in the order they were made, the date and time of the changes and the signature before the changes were made. Note If you select a database icon from the Notes workspace and then click Undo, you'll be prompted to browse to the database file. You can avoid having to browse to the database file by first opening the file in Designer and then clicking Undo from the toolbar. Select version of the design element you want to roll back to. Click Rollback to selected . The copy of the design element captured at that time will replace the design element in the database.","title":"Undoing a Change"},{"location":"undo/undoing/#undoing-a-change","text":"","title":"Undoing a Change"},{"location":"undo/undoing/#to-rollback-database-design-element-changes","text":"From Designer, click the Undo button on the toolbar. You see the Teamstudio Undo window with the following element change information: The design element type, the element name, the changes in the order they were made, the date and time of the changes and the signature before the changes were made. Note If you select a database icon from the Notes workspace and then click Undo, you'll be prompted to browse to the database file. You can avoid having to browse to the database file by first opening the file in Designer and then clicking Undo from the toolbar. Select version of the design element you want to roll back to. Click Rollback to selected . The copy of the design element captured at that time will replace the design element in the database.","title":"To rollback database design element changes"},{"location":"undo/viewing/","text":"Viewing Design Element Changes Note Undo does not keep track of changes to documents. To View Design Element Changes From Designer, click the Undo button on the toolbar to open the Undo window. Note If you select a database icon from the Notes workspace and then click Undo, you'll be prompted to browse to the database file. You can avoid having to browse to the database file by first opening the file in Designer and then clicking Undo from the toolbar. Select the version of the design element you want to view changes for. Click the Delta button to view the difference between the element in the undo buffer and its current version. Click Close to return to the Undo client. Note You can also use Delta to compare two undo buffer design element versions. Select one version. Press and hold the CTRL key. Select the second version (the two elements must be of the same type.) Click the Delta button. See Using Delta for more information on using Delta.","title":"Viewing Design Element Changes"},{"location":"undo/viewing/#viewing-design-element-changes","text":"Note Undo does not keep track of changes to documents.","title":"Viewing Design Element Changes"},{"location":"undo/viewing/#to-view-design-element-changes","text":"From Designer, click the Undo button on the toolbar to open the Undo window. Note If you select a database icon from the Notes workspace and then click Undo, you'll be prompted to browse to the database file. You can avoid having to browse to the database file by first opening the file in Designer and then clicking Undo from the toolbar. Select the version of the design element you want to view changes for. Click the Delta button to view the difference between the element in the undo buffer and its current version. Click Close to return to the Undo client. Note You can also use Delta to compare two undo buffer design element versions. Select one version. Press and hold the CTRL key. Select the second version (the two elements must be of the same type.) Click the Delta button. See Using Delta for more information on using Delta.","title":"To View Design Element Changes"},{"location":"ja/","text":"Documentation This is the documentation for Teamstudio Edition 33.","title":"Documentation"},{"location":"ja/#documentation","text":"This is the documentation for Teamstudio Edition 33.","title":"Documentation"},{"location":"ja/legal/","text":"Legal License Agreement This documentation, as well as the software described in it, is furnished under license, the terms of which are contained in the license agreement. This documentation may be used or copied only in accordance with the terms of such license. The information contained in this documentation is subject to change without notice. We make no commitment to update the information contained in this documentation. Teamstudio assumes no responsibility or liability for technical or editorial errors or omissions that may appear in this documentation, or for the use of this documentation. Copyright Notice Teamstudio and CIAO! are registered trademarks of Teamstudio, Inc. HCL, Lotus Notes, Notes and Domino are registered trademarks of HCL Corporation. Windows is a registered trademark of Microsoft Corporation. All other trademarks are trademarks or registered trademarks of their respective owners. \u00a9 Copyright Teamstudio, Inc. All Rights Reserved.","title":"Legal"},{"location":"ja/legal/#legal","text":"","title":"Legal"},{"location":"ja/legal/#license-agreement","text":"This documentation, as well as the software described in it, is furnished under license, the terms of which are contained in the license agreement. This documentation may be used or copied only in accordance with the terms of such license. The information contained in this documentation is subject to change without notice. We make no commitment to update the information contained in this documentation. Teamstudio assumes no responsibility or liability for technical or editorial errors or omissions that may appear in this documentation, or for the use of this documentation.","title":"License Agreement"},{"location":"ja/legal/#copyright-notice","text":"Teamstudio and CIAO! are registered trademarks of Teamstudio, Inc. HCL, Lotus Notes, Notes and Domino are registered trademarks of HCL Corporation. Windows is a registered trademark of Microsoft Corporation. All other trademarks are trademarks or registered trademarks of their respective owners. \u00a9 Copyright Teamstudio, Inc. All Rights Reserved.","title":"Copyright Notice"},{"location":"ja/release/","text":"Release Notes Edition 33 is a feature release of the Teamstudio Notes tools. In addition to fixing a number of bugs, this release contains significant enhancements to the Teamstudio CIAO! features that assist in preparing templates for deployment, along with updates to all of the database templates (NTFs) used by the tools for reporting and configuration. This document describes these enhancements, along with a list of specific fixes. CIAO! Promotion Features Teamstudio CIAO! now includes new features to help ensure accurate, repeatable application builds. CIAO! has long offered a Promotion feature via the CIAO! Configuration database. This feature supports creating Promotion Paths for templates watched by CIAO! that define server and file locations where the template should be deployed. Promoting a template creates a copy of the template at the desired location, and also supports an optional Build Step to create a CIAO! version of the template automatically prior to the deployment. Edition 33 adds several new Build Steps to make it easy to prepare templates for deployment in a repeatable, consistent, and self-documenting manner \u2013 all with a single click. Similar to build systems for other types of software development, these new features help ensure each new version of a template is properly prepared for release without requiring a manual process or checklist. Significant new Build Steps include: Setting template properties such as Design Template Name and Title Defining the template ACL Changing element properties, such as clearing element-level design inheritance and Prohibit Design Refresh settings Compiling all LotusScript Signing the template with a specific ID Refreshing the design of target application(s) from the new template Detailed descriptions of the available functions are available from the Build Steps page. For more information on Promotions in general, see Promotion Paths . The new Build Steps represent a subset of the features available in Teamstudio Build Manager, which offers many additional capabilities to manage complex builds, including the ability to promote using different Notes IDs to support segregation of duties, Release Management/Deployment Tracking features, and Approval workflows. For a comparison of CIAO! and Build Manager, see Product Comparison - CIAO! and Build Manager . Upgrading CIAO! Configuration Database The updated Edition 33 CIAO! Configuration database is designed to continue working with existing Promotion Paths . A minor upgrade process is required, due to additional features added to the product. Prior versions of the CIAO! configuration database allowed free-form entry of the target server specified in the Promotion Path document, without any validation. The current version requires that target servers for promotion and design refresh actions be defined as Stored Servers , under the Resources tab in the configuration UI. Stored Server definitions can only be created by users with the [[Admin]] ACL role, and contain additional settings including defining which users are allowed to promote databases to the target server, and what other servers may be used as Design Refresh targets. For more information, see Stored Servers . To assist in the upgrade process, the CIAO! configuration now includes an agent available via Actions > Admin > Verify Stored Servers . This agent launches a wizard to scan Promotion Paths and Design Refresh steps and display the names of servers that have missing or disabled Stored Server definitions. Server names can be selected to automatically create Stored Server documents. Upgrading from a prior CIAO! template involves: Signing the new CIAO! Configuration and CIAO! Log templates with an appropriate Notes ID Refreshing the design of all CIAO! configuration and CIAO! log databases Running the Verify Stored Servers action to create server definitions as needed (only required if Promotion Paths are in use in prior version) For more information on the Verify Stored Servers action, see Stored Servers . Template Updates The Teamstudio Notes Tools utilize several Notes application templates for configuration and reporting. All templates have updated for Edition 33, including updated UI look and feel and new icons. Several templates also include usability improvements. Fix List 33.0.4 [TMS-1437] - Update code signing certificates to replace expiring certificates for the installer and Java plugins 33.0.3 [TMS-1286] - CIAO change report can fail to list all changes if Notes application has been moved [TMS-1302] - Installer does not detect Notes program locations on a clean Notes 11 install [TMS-1306] - The tools installer cannot uninstall if Notes has been moved or upgraded to a new location [TMS-1348] - Code copied from Configurator loses new lines when pasted into Notes [TMS-1366] - CIAO! configuration database should allow blank target filename in Promotion Path (to promote with source filename) [TMS-1380] - Analyzer always displays database percent usage as 0% [TMS-1381] - Analyzer displays database space allocated and space free incorrectly for databases > 4GB [TMS-1390] - Analyzer can crash evaluating formulas with large numbers of @if statements 33.0.2 [TMS-1266] - Delta crash running a report [TMS-1281] - Analyzer writes 'Filter error: Out of Memory' to the audit log for large minified documents [TMS-1300] - The message displayed for an expired key incorrectly refers to 'demonstration software' 33.0.1 [TMS-1247] - Update code signing certificates to replace expiring certificates for the installer and Java plugins [TMS-1249] - Fix Launch CIAO! action in CIAO! Configuration database [TMS-1250] - Fix Analyzer Filters Severity Definition sorting and lookup issues - upgrade existing Filters database designs to the latest template to use with the CIAO! Design Audit step 33.0.0 [TMS-109] - Reports views should sort date chronologically not alphabetically [TMS-240] - Analysis Form properties section shows red text that should be hidden [TMS-959] - Analyzer crashes intermittently on very large script libraries [TMS-1059] - Analyzer does not write computed labels in outline entries [TMS-1167] - CIAO! crashes intermittently while checking design elements in or out in Designer [TMS-1217] - Add serial key expiration dates to the about dialog [TMS-1220] - Analyzer reports are missing XPage and Page options for database Launch settings [TMS-1222] - CIAO! intermittently displays \"command not available\" error on opening [TMS-1225] - CIAO! View action to enable/disable steps should clarify it does not affect CIAO! configuration documents [TMS-1238] - CIAO does not list available versions correctly when a database is moved to a new path or server","title":"Release Notes"},{"location":"ja/release/#release-notes","text":"Edition 33 is a feature release of the Teamstudio Notes tools. In addition to fixing a number of bugs, this release contains significant enhancements to the Teamstudio CIAO! features that assist in preparing templates for deployment, along with updates to all of the database templates (NTFs) used by the tools for reporting and configuration. This document describes these enhancements, along with a list of specific fixes.","title":"Release Notes"},{"location":"ja/release/#ciao-promotion-features","text":"Teamstudio CIAO! now includes new features to help ensure accurate, repeatable application builds. CIAO! has long offered a Promotion feature via the CIAO! Configuration database. This feature supports creating Promotion Paths for templates watched by CIAO! that define server and file locations where the template should be deployed. Promoting a template creates a copy of the template at the desired location, and also supports an optional Build Step to create a CIAO! version of the template automatically prior to the deployment. Edition 33 adds several new Build Steps to make it easy to prepare templates for deployment in a repeatable, consistent, and self-documenting manner \u2013 all with a single click. Similar to build systems for other types of software development, these new features help ensure each new version of a template is properly prepared for release without requiring a manual process or checklist. Significant new Build Steps include: Setting template properties such as Design Template Name and Title Defining the template ACL Changing element properties, such as clearing element-level design inheritance and Prohibit Design Refresh settings Compiling all LotusScript Signing the template with a specific ID Refreshing the design of target application(s) from the new template Detailed descriptions of the available functions are available from the Build Steps page. For more information on Promotions in general, see Promotion Paths . The new Build Steps represent a subset of the features available in Teamstudio Build Manager, which offers many additional capabilities to manage complex builds, including the ability to promote using different Notes IDs to support segregation of duties, Release Management/Deployment Tracking features, and Approval workflows. For a comparison of CIAO! and Build Manager, see Product Comparison - CIAO! and Build Manager .","title":"CIAO! Promotion Features"},{"location":"ja/release/#upgrading-ciao-configuration-database","text":"The updated Edition 33 CIAO! Configuration database is designed to continue working with existing Promotion Paths . A minor upgrade process is required, due to additional features added to the product. Prior versions of the CIAO! configuration database allowed free-form entry of the target server specified in the Promotion Path document, without any validation. The current version requires that target servers for promotion and design refresh actions be defined as Stored Servers , under the Resources tab in the configuration UI. Stored Server definitions can only be created by users with the [[Admin]] ACL role, and contain additional settings including defining which users are allowed to promote databases to the target server, and what other servers may be used as Design Refresh targets. For more information, see Stored Servers . To assist in the upgrade process, the CIAO! configuration now includes an agent available via Actions > Admin > Verify Stored Servers . This agent launches a wizard to scan Promotion Paths and Design Refresh steps and display the names of servers that have missing or disabled Stored Server definitions. Server names can be selected to automatically create Stored Server documents. Upgrading from a prior CIAO! template involves: Signing the new CIAO! Configuration and CIAO! Log templates with an appropriate Notes ID Refreshing the design of all CIAO! configuration and CIAO! log databases Running the Verify Stored Servers action to create server definitions as needed (only required if Promotion Paths are in use in prior version) For more information on the Verify Stored Servers action, see Stored Servers .","title":"Upgrading CIAO! Configuration Database"},{"location":"ja/release/#template-updates","text":"The Teamstudio Notes Tools utilize several Notes application templates for configuration and reporting. All templates have updated for Edition 33, including updated UI look and feel and new icons. Several templates also include usability improvements.","title":"Template Updates"},{"location":"ja/release/#fix-list","text":"","title":"Fix List"},{"location":"ja/release/#3304","text":"[TMS-1437] - Update code signing certificates to replace expiring certificates for the installer and Java plugins","title":"33.0.4"},{"location":"ja/release/#3303","text":"[TMS-1286] - CIAO change report can fail to list all changes if Notes application has been moved [TMS-1302] - Installer does not detect Notes program locations on a clean Notes 11 install [TMS-1306] - The tools installer cannot uninstall if Notes has been moved or upgraded to a new location [TMS-1348] - Code copied from Configurator loses new lines when pasted into Notes [TMS-1366] - CIAO! configuration database should allow blank target filename in Promotion Path (to promote with source filename) [TMS-1380] - Analyzer always displays database percent usage as 0% [TMS-1381] - Analyzer displays database space allocated and space free incorrectly for databases > 4GB [TMS-1390] - Analyzer can crash evaluating formulas with large numbers of @if statements","title":"33.0.3"},{"location":"ja/release/#3302","text":"[TMS-1266] - Delta crash running a report [TMS-1281] - Analyzer writes 'Filter error: Out of Memory' to the audit log for large minified documents [TMS-1300] - The message displayed for an expired key incorrectly refers to 'demonstration software'","title":"33.0.2"},{"location":"ja/release/#3301","text":"[TMS-1247] - Update code signing certificates to replace expiring certificates for the installer and Java plugins [TMS-1249] - Fix Launch CIAO! action in CIAO! Configuration database [TMS-1250] - Fix Analyzer Filters Severity Definition sorting and lookup issues - upgrade existing Filters database designs to the latest template to use with the CIAO! Design Audit step","title":"33.0.1"},{"location":"ja/release/#3300","text":"[TMS-109] - Reports views should sort date chronologically not alphabetically [TMS-240] - Analysis Form properties section shows red text that should be hidden [TMS-959] - Analyzer crashes intermittently on very large script libraries [TMS-1059] - Analyzer does not write computed labels in outline entries [TMS-1167] - CIAO! crashes intermittently while checking design elements in or out in Designer [TMS-1217] - Add serial key expiration dates to the about dialog [TMS-1220] - Analyzer reports are missing XPage and Page options for database Launch settings [TMS-1222] - CIAO! intermittently displays \"command not available\" error on opening [TMS-1225] - CIAO! View action to enable/disable steps should clarify it does not affect CIAO! configuration documents [TMS-1238] - CIAO does not list available versions correctly when a database is moved to a new path or server","title":"33.0.0"},{"location":"ja/analyzer/","text":"Overview You can test, debug and document your database design using Teamstudio Analyzer. Analyzer highlights functional dependencies within the design, verifies compliance with design standards, and uncovers compatibility issues before an upgrade. How does Analyzer work? It reads the design of your Notes database or template. It analyzes this design. It builds a separate Notes database that represents the design. The new database contains a document for each design element (such as a form, view, subform or field). Each document contains the fields that represent the properties or attributes of the related design element. Analyzer can audit your design by testing it against a pre-defined set of criteria called filters. The Analyzer audit function identifies design elements that match the filter criteria and writes these audit results to an output database. This audit testing helps flag standards violations and potential performance problems for further review.","title":"Overview"},{"location":"ja/analyzer/#overview","text":"You can test, debug and document your database design using Teamstudio Analyzer. Analyzer highlights functional dependencies within the design, verifies compliance with design standards, and uncovers compatibility issues before an upgrade. How does Analyzer work? It reads the design of your Notes database or template. It analyzes this design. It builds a separate Notes database that represents the design. The new database contains a document for each design element (such as a form, view, subform or field). Each document contains the fields that represent the properties or attributes of the related design element. Analyzer can audit your design by testing it against a pre-defined set of criteria called filters. The Analyzer audit function identifies design elements that match the filter criteria and writes these audit results to an output database. This audit testing helps flag standards violations and potential performance problems for further review.","title":"Overview"},{"location":"ja/analyzer/audit/","text":"Auditing Overview You are often faced with the difficult task of examining a database design to ensure it can meet some, unique, criteria. Examples of this are: Is the design compatible with the next release of Notes? Can the design be moved to another environment? Does it meet company standards? Analyzer's analysis function helps with these decisions by extensively documenting the attributes and contents of a design, and by providing views that help answer many of these questions. Sometimes, however, you must examine a combination of elements and their attributes to properly answer a question. The audit function can help by letting you define requirements and then test the design of the database or template to make sure it meets the requirements. Many of these requirements are reusable, such as standards or common coding errors. Others will have a unique temporary nature, such as a special change request or compatibility issues raised by upgrades to a new version of Notes. Auditor includes some predefined tests that give you a head start on defining typical tests such as locating the following: Common coding errors Potential performance problems Violations of typical organizational standards Potential application upgrade problems Potential Web or O/S compatibility problems","title":"Auditing Overview"},{"location":"ja/analyzer/audit/#auditing-overview","text":"You are often faced with the difficult task of examining a database design to ensure it can meet some, unique, criteria. Examples of this are: Is the design compatible with the next release of Notes? Can the design be moved to another environment? Does it meet company standards? Analyzer's analysis function helps with these decisions by extensively documenting the attributes and contents of a design, and by providing views that help answer many of these questions. Sometimes, however, you must examine a combination of elements and their attributes to properly answer a question. The audit function can help by letting you define requirements and then test the design of the database or template to make sure it meets the requirements. Many of these requirements are reusable, such as standards or common coding errors. Others will have a unique temporary nature, such as a special change request or compatibility issues raised by upgrades to a new version of Notes. Auditor includes some predefined tests that give you a head start on defining typical tests such as locating the following: Common coding errors Potential performance problems Violations of typical organizational standards Potential application upgrade problems Potential Web or O/S compatibility problems","title":"Auditing Overview"},{"location":"ja/analyzer/auditcomponents/","text":"Auditor Components Auditor uses several databases to identify the design elements you want to find, as described in the following table: Database Description Filters (based on deanfltr.ntf) Describes the criteria to use when auditing a design. Analysis (for example, analysis.nsf) Created by Analyzer when a design is analyzed. Audit output (for example, auditreport.nsf) Documents the instances of design elements selected by Auditor which match filters. When Auditor runs, it retrieves the filter(s) from the Filters database and scans the analysis file looking for design elements that match those filter(s). For each match, Auditor creates a document in the audit output database.","title":"Auditor Components"},{"location":"ja/analyzer/auditcomponents/#auditor-components","text":"Auditor uses several databases to identify the design elements you want to find, as described in the following table: Database Description Filters (based on deanfltr.ntf) Describes the criteria to use when auditing a design. Analysis (for example, analysis.nsf) Created by Analyzer when a design is analyzed. Audit output (for example, auditreport.nsf) Documents the instances of design elements selected by Auditor which match filters. When Auditor runs, it retrieves the filter(s) from the Filters database and scans the analysis file looking for design elements that match those filter(s). For each match, Auditor creates a document in the audit output database.","title":"Auditor Components"},{"location":"ja/analyzer/auditing/","text":"Auditing a Design On the Audit tab, you can select the Enable Auditor check box to have Analyzer determine whether any of your design elements match a pre-defined set of filters. Auditor writes the audit results to an audit output database that you specify. You can investigate issues with the design of your database. If you don\u2019t want Analyzer to check every design element in your database during the audit, specify individual design elements on the Design Notes tab. See also Using the Design Notes Tab . Each time you run the audit function, Analyzer first examines and updates the analysis file for the targeted design. When Analyzer generates audit output documents they are linked to the associated documents in the analysis database, providing full details of each design element selected by the audit. To disable Auditor, clear the Enable Auditor check box. To select the filter database You can identify a filter database to use as follows: On the Audit tab, click Choose Filter DB . On the Select Filter Database window, click Select . You see the Open/Browse window. Select the Teamstudio Analyzer Filter Database you want. Note Teamstudio installs a sample filter database in your Notes database directory. Click Open then click OK . From the Select filter dropdown, select the filter set you want to run against your database. Rather than run Auditor multiple times against many different filter sets, you should combine the filters you want (for example, performance problems and standards violations) within a set to be processed together. See also Analyzer's Filters","title":"Auditing a Design"},{"location":"ja/analyzer/auditing/#auditing-a-design","text":"On the Audit tab, you can select the Enable Auditor check box to have Analyzer determine whether any of your design elements match a pre-defined set of filters. Auditor writes the audit results to an audit output database that you specify. You can investigate issues with the design of your database. If you don\u2019t want Analyzer to check every design element in your database during the audit, specify individual design elements on the Design Notes tab. See also Using the Design Notes Tab . Each time you run the audit function, Analyzer first examines and updates the analysis file for the targeted design. When Analyzer generates audit output documents they are linked to the associated documents in the analysis database, providing full details of each design element selected by the audit. To disable Auditor, clear the Enable Auditor check box.","title":"Auditing a Design"},{"location":"ja/analyzer/auditing/#to-select-the-filter-database","text":"You can identify a filter database to use as follows: On the Audit tab, click Choose Filter DB . On the Select Filter Database window, click Select . You see the Open/Browse window. Select the Teamstudio Analyzer Filter Database you want. Note Teamstudio installs a sample filter database in your Notes database directory. Click Open then click OK . From the Select filter dropdown, select the filter set you want to run against your database. Rather than run Auditor multiple times against many different filter sets, you should combine the filters you want (for example, performance problems and standards violations) within a set to be processed together. See also Analyzer's Filters","title":"To select the filter database"},{"location":"ja/analyzer/auditoutput/","text":"Selecting an Audit Output Database Analyzer Audit places its results in the audit output database you designate. The audit output database is always based on Teamstudio\u2019s tmslogs.ntf template, whether you select an existing output database or create a new one. To use an existing output database Click Select to display a list of existing databases that are based on the tmslogs.ntf template. Select a database. Click Open . To create a new database Enter the server and output database name, including the path. The new database is created automatically based on the tmslogs.ntf template. By default, Auditor checks every design element in your database. If you don\u2019t want Analyzer to audit every design element, specify individual design elements on the Design Notes tab. See also Using the Design Notes Tab . After you select the Enable Auditor check box and a filter set, and you specify the output database, begin Analyzing your database. Note You cannot run Auditor without also running Analyzer. When you click OK on the Teamstudio Analyzer tab to start Analyzer Audit, the database design is also analyzed. The design element subset you selected to Audit on the Design Notes tab also applies to Analyzer. If you are ready to begin, see Starting the Analysis .","title":"Selecting an Audit Output Database"},{"location":"ja/analyzer/auditoutput/#selecting-an-audit-output-database","text":"Analyzer Audit places its results in the audit output database you designate. The audit output database is always based on Teamstudio\u2019s tmslogs.ntf template, whether you select an existing output database or create a new one.","title":"Selecting an Audit Output Database"},{"location":"ja/analyzer/auditoutput/#to-use-an-existing-output-database","text":"Click Select to display a list of existing databases that are based on the tmslogs.ntf template. Select a database. Click Open .","title":"To use an existing output database"},{"location":"ja/analyzer/auditoutput/#to-create-a-new-database","text":"Enter the server and output database name, including the path. The new database is created automatically based on the tmslogs.ntf template. By default, Auditor checks every design element in your database. If you don\u2019t want Analyzer to audit every design element, specify individual design elements on the Design Notes tab. See also Using the Design Notes Tab . After you select the Enable Auditor check box and a filter set, and you specify the output database, begin Analyzing your database. Note You cannot run Auditor without also running Analyzer. When you click OK on the Teamstudio Analyzer tab to start Analyzer Audit, the database design is also analyzed. The design element subset you selected to Audit on the Design Notes tab also applies to Analyzer. If you are ready to begin, see Starting the Analysis .","title":"To create a new database"},{"location":"ja/analyzer/auditusingoutput/","text":"Using the Audit Output Database You can see the database audit results in the Analyzer Auditor\\All Output view. Documents are sorted by database title, the date and time Auditor was run and design element categories. Running Audit against the same database at different times gives you results grouped for each date and time reported. Note When you open the Audit output database, you may notice views in the navigator pane that do not apply to the Audit function. That is because the database is based on Teamstudio's tmslogs.ntf template, which is a general purpose template designed for use with all of our products. Since the Auditor only creates documents that appear in its own views, you may ignore the other views when using the database for auditing purposes. Auditor creates a document in its output database each time it finds a design object that matches any of the filters processed during the audit run. A design element can appear more than once under its design category since a document is created for each filter a design element matches. Expand a design element category to learn which design elements matched the filters. Design elements that matched a filter are divided into severity categories based on those defined in the Filters database. In this example, several design elements match filters assigned low and medium severity. If the item selected is a design element (for example, a form), the parent of the design element (for example, the database) is listed in the Found In column. If the item selected is a component of a design element (for example, a field within a form), its host design element is shown under the Found In column. The filter the design element matched is listed in the Filter column.","title":"Using the Audit Output Database"},{"location":"ja/analyzer/auditusingoutput/#using-the-audit-output-database","text":"You can see the database audit results in the Analyzer Auditor\\All Output view. Documents are sorted by database title, the date and time Auditor was run and design element categories. Running Audit against the same database at different times gives you results grouped for each date and time reported. Note When you open the Audit output database, you may notice views in the navigator pane that do not apply to the Audit function. That is because the database is based on Teamstudio's tmslogs.ntf template, which is a general purpose template designed for use with all of our products. Since the Auditor only creates documents that appear in its own views, you may ignore the other views when using the database for auditing purposes. Auditor creates a document in its output database each time it finds a design object that matches any of the filters processed during the audit run. A design element can appear more than once under its design category since a document is created for each filter a design element matches. Expand a design element category to learn which design elements matched the filters. Design elements that matched a filter are divided into severity categories based on those defined in the Filters database. In this example, several design elements match filters assigned low and medium severity. If the item selected is a design element (for example, a form), the parent of the design element (for example, the database) is listed in the Found In column. If the item selected is a component of a design element (for example, a field within a form), its host design element is shown under the Found In column. The filter the design element matched is listed in the Filter column.","title":"Using the Audit Output Database"},{"location":"ja/analyzer/comments/","text":"Adding Comments to Design Elements You can add user data, for example, comments, description, change history, or development status to the Analysis documents for major design elements. To view the comment area, click the Note tab at the top of an analysis document. Double-click the document to make it editable and to display the development status options within the Note area. Items such as buttons and hotspots that Analyzer creates documents for do not have a corresponding design element in the application database. Consequently, they are difficult to identify reliably from one run to the next. Accordingly, the Note field is not included on those documents. Field documents do contain the Note field since they rarely change names and aliases. You can create a separate document to record any additional information about a major design element document in the analysis database (for example, a description of a design element or maintenance history). You can access a sample document, named Additional Documentation Sample , from the Create menu. To record additional information about a major design element To create the document, select the design element you want, and select Additional Documentation Sample from the Create menu. This sample form contains a title field ( fspvName_WB ) and a rich text body field in which to store your information. You can modify these fields to meet your organization's documentation requirements. See Customizing the Template , for more information. Complete and save the form. The saved document will display in the AllDocuments view under the design element you created it for. Note The Additional Documentation feature is only available for design elements and fields.","title":"Adding Comments to Design Elements"},{"location":"ja/analyzer/comments/#adding-comments-to-design-elements","text":"You can add user data, for example, comments, description, change history, or development status to the Analysis documents for major design elements. To view the comment area, click the Note tab at the top of an analysis document. Double-click the document to make it editable and to display the development status options within the Note area. Items such as buttons and hotspots that Analyzer creates documents for do not have a corresponding design element in the application database. Consequently, they are difficult to identify reliably from one run to the next. Accordingly, the Note field is not included on those documents. Field documents do contain the Note field since they rarely change names and aliases. You can create a separate document to record any additional information about a major design element document in the analysis database (for example, a description of a design element or maintenance history). You can access a sample document, named Additional Documentation Sample , from the Create menu.","title":"Adding Comments to Design Elements"},{"location":"ja/analyzer/comments/#to-record-additional-information-about-a-major-design-element","text":"To create the document, select the design element you want, and select Additional Documentation Sample from the Create menu. This sample form contains a title field ( fspvName_WB ) and a rich text body field in which to store your information. You can modify these fields to meet your organization's documentation requirements. See Customizing the Template , for more information. Complete and save the form. The saved document will display in the AllDocuments view under the design element you created it for. Note The Additional Documentation feature is only available for design elements and fields.","title":"To record additional information about a major design element"},{"location":"ja/analyzer/customizing/","text":"Customizing the Template When Analyzer is installed, it creates a database template file called ivesdean.ntf , which has a template name of DEANTemplate. Analyzer uses this template to create the analysis output database. The database stores the analysis documents for one or more Notes template or database designs. Note LotusScript, formula code, Java and JavaScript are always written as rich text. This is because plain text fields are limited to around 15K in size by the Notes client, and code can be as large as 64K. Since you cannot refer to rich text fields in view selection formula, this may at first seem limiting. You can create an agent which performs an @Abstract operation on the rich text, converting it to plain text, truncating it at some size less than 15K. For example: FIELD ScriptBegins := @If(fflpScripts=\"\";\"\";@Abstract([Save]:[Abbrev];14999;\"\";\"fflpScript\")) You can customize the template to create additional views or Notes agents. To create a template you can customize From Notes, make a new copy of the Teamstudio Analyzer Template ( ivesdean.ntf ). Open the Database Properties window for the new file. Then click the Design tab. From the Design tab, rename the new template. In the Database Categories box, enter DEANTemplate . When creating a new output database, you base its design on a template that you select from a list of all the templates you have created. You can add fields to the forms in the output database template. The fields can hold information, such as comments, that you add to the database. These additional fields are not overwritten when the analysis output is updated. Note The content of user-defined fields is only preserved between Analyzer runs for design notes and fields. Similarly, you can add forms to the output database template to hold any data you want to capture. You can create and edit these forms, optionally using formulas and scripts that extract data created by Analyzer into your form. Note While a user-defined form is not overwritten when the analysis output is updated, the documents created with user-defined forms will only be preserved between Analyzer runs for main documents and responses to design notes and fields.","title":"Customizing the Template"},{"location":"ja/analyzer/customizing/#customizing-the-template","text":"When Analyzer is installed, it creates a database template file called ivesdean.ntf , which has a template name of DEANTemplate. Analyzer uses this template to create the analysis output database. The database stores the analysis documents for one or more Notes template or database designs. Note LotusScript, formula code, Java and JavaScript are always written as rich text. This is because plain text fields are limited to around 15K in size by the Notes client, and code can be as large as 64K. Since you cannot refer to rich text fields in view selection formula, this may at first seem limiting. You can create an agent which performs an @Abstract operation on the rich text, converting it to plain text, truncating it at some size less than 15K. For example: FIELD ScriptBegins := @If(fflpScripts=\"\";\"\";@Abstract([Save]:[Abbrev];14999;\"\";\"fflpScript\")) You can customize the template to create additional views or Notes agents.","title":"Customizing the Template"},{"location":"ja/analyzer/customizing/#to-create-a-template-you-can-customize","text":"From Notes, make a new copy of the Teamstudio Analyzer Template ( ivesdean.ntf ). Open the Database Properties window for the new file. Then click the Design tab. From the Design tab, rename the new template. In the Database Categories box, enter DEANTemplate . When creating a new output database, you base its design on a template that you select from a list of all the templates you have created. You can add fields to the forms in the output database template. The fields can hold information, such as comments, that you add to the database. These additional fields are not overwritten when the analysis output is updated. Note The content of user-defined fields is only preserved between Analyzer runs for design notes and fields. Similarly, you can add forms to the output database template to hold any data you want to capture. You can create and edit these forms, optionally using formulas and scripts that extract data created by Analyzer into your form. Note While a user-defined form is not overwritten when the analysis output is updated, the documents created with user-defined forms will only be preserved between Analyzer runs for main documents and responses to design notes and fields.","title":"To create a template you can customize"},{"location":"ja/analyzer/deleted/","text":"Deleted Items Analyzer moves the deleted element data and any user documentation for previously deleted design elements. You can find the data under the Deleted Items category, in the All Documents view. You can identify the deleted element and any of its children documents, such as fields and buttons, by the Delete icon, a document with a red X through it. If you no longer need the deleted element data and its documentation, simply delete them from the Analysis file using the Delete hierarchy button. Note You can drag deleted fields to the Field X-Ref folder to get a field cross reference report to show usage of the deleted field. See References to a Field , for more information.","title":"Deleted Items"},{"location":"ja/analyzer/deleted/#deleted-items","text":"Analyzer moves the deleted element data and any user documentation for previously deleted design elements. You can find the data under the Deleted Items category, in the All Documents view. You can identify the deleted element and any of its children documents, such as fields and buttons, by the Delete icon, a document with a red X through it. If you no longer need the deleted element data and its documentation, simply delete them from the Analysis file using the Delete hierarchy button. Note You can drag deleted fields to the Field X-Ref folder to get a field cross reference report to show usage of the deleted field. See References to a Field , for more information.","title":"Deleted Items"},{"location":"ja/analyzer/designtab/","text":"Using the Design Notes Tab You can select individual design elements for analysis from the Design Notes tab. By default, every category and design element is selected, as indicated by the checkmarks. All of the categories are children of Everything . To see a category\u2019s design elements without affecting currently selected or deselected items, click the plus sign beside the category. Here is how Analyzer treats selected categories and selected design elements: If you select a design element, Analyzer analyzes it and creates a document for it in the output database. If the design element has changed, the new document overwrites the existing document. If the design element has not changed, the new document overwrites the existing document only if you have cleared the Incremental update check box on the Teamstudio Analyzer tab. If you select a category, Analyzer checks the category, identifies the elements and documents deleted since the last analysis, and moves the Analysis Document to the Deleted Documents category in the output database.","title":"Using the Design Notes Tab"},{"location":"ja/analyzer/designtab/#using-the-design-notes-tab","text":"You can select individual design elements for analysis from the Design Notes tab. By default, every category and design element is selected, as indicated by the checkmarks. All of the categories are children of Everything . To see a category\u2019s design elements without affecting currently selected or deselected items, click the plus sign beside the category. Here is how Analyzer treats selected categories and selected design elements: If you select a design element, Analyzer analyzes it and creates a document for it in the output database. If the design element has changed, the new document overwrites the existing document. If the design element has not changed, the new document overwrites the existing document only if you have cleared the Incremental update check box on the Teamstudio Analyzer tab. If you select a category, Analyzer checks the category, identifies the elements and documents deleted since the last analysis, and moves the Analysis Document to the Deleted Documents category in the output database.","title":"Using the Design Notes Tab"},{"location":"ja/analyzer/filters/","text":"Filters Overview Filters identify design objects you want to focus on. You define filters by specifying the attributes and properties that meet your criteria. Analyzer Filter Examples Use of @dblookup in a keyword definition (potential performance problem) Editable text fields without Help text (violations of organizational standards) Non-computed fields ending in \"_1\" (common coding errors) Existence of a certain design element (for example, Help Using, Help About or a particular form) Use of specific field properties (for example, Date/Time fields that don't display the year with four digits) Auditor scans the analysis output looking for design objects that match the filter criteria and documents each occurrence in the audit output database. Since most development organizations have their own standards and procedures, you may want to add your own filters, modify the severity to match terms and criteria you use, and classify filters with terms you normally use. With Auditor, it's easy to customize filters and their attributes to meet your organization's needs. You can find the filters and definitions of their attributes (class and severity) in the Analyzer Filter database. The Analyzer Filters database included in this release is deanfltr.ntf . Prior to Edition 24, it was deanfltr.nsf . This is so the install database does not overwrite the filter database currently on your system. If you have modified the database in any way, you will not lose any changes or customization. However, this means that you must create a new filter database if you want to incorporate the bug fixes included with this release. To upgrade your filters database Make a copy of your current Analyzer Filters Database ( deanfltr.nsf ) Create a new database ( File > Database > New ) and name it deanfltr.nsf Select Analyzer Filters Template from the template box. Click Yes when Notes asks if you want to overwrite the existing one. (It's OK; you made a copy) Copy all your custom filters into this new database from your old one. The attribute, Class, groups the same type of filters together. For example, filters that identify design techniques that can cause problems when you upgrade to a new Notes Release are typically categorized as Release \"A\" to Release \"B\" Upgrade Issues. Therefore, you can set up a class called Release A to Release B Upgrade or simply, Upgrade. Then, when you define a filter that fits this category, you assign it to the Upgrade class. At run-time, you tell Auditor which class of filters to use. The Severity attribute prioritizes the documents stored in the audit output database, helping you to systematically review and act on the items selected.","title":"Filters Overview"},{"location":"ja/analyzer/filters/#filters-overview","text":"Filters identify design objects you want to focus on. You define filters by specifying the attributes and properties that meet your criteria.","title":"Filters Overview"},{"location":"ja/analyzer/filters/#analyzer-filter-examples","text":"Use of @dblookup in a keyword definition (potential performance problem) Editable text fields without Help text (violations of organizational standards) Non-computed fields ending in \"_1\" (common coding errors) Existence of a certain design element (for example, Help Using, Help About or a particular form) Use of specific field properties (for example, Date/Time fields that don't display the year with four digits) Auditor scans the analysis output looking for design objects that match the filter criteria and documents each occurrence in the audit output database. Since most development organizations have their own standards and procedures, you may want to add your own filters, modify the severity to match terms and criteria you use, and classify filters with terms you normally use. With Auditor, it's easy to customize filters and their attributes to meet your organization's needs. You can find the filters and definitions of their attributes (class and severity) in the Analyzer Filter database. The Analyzer Filters database included in this release is deanfltr.ntf . Prior to Edition 24, it was deanfltr.nsf . This is so the install database does not overwrite the filter database currently on your system. If you have modified the database in any way, you will not lose any changes or customization. However, this means that you must create a new filter database if you want to incorporate the bug fixes included with this release.","title":"Analyzer Filter Examples"},{"location":"ja/analyzer/filters/#to-upgrade-your-filters-database","text":"Make a copy of your current Analyzer Filters Database ( deanfltr.nsf ) Create a new database ( File > Database > New ) and name it deanfltr.nsf Select Analyzer Filters Template from the template box. Click Yes when Notes asks if you want to overwrite the existing one. (It's OK; you made a copy) Copy all your custom filters into this new database from your old one. The attribute, Class, groups the same type of filters together. For example, filters that identify design techniques that can cause problems when you upgrade to a new Notes Release are typically categorized as Release \"A\" to Release \"B\" Upgrade Issues. Therefore, you can set up a class called Release A to Release B Upgrade or simply, Upgrade. Then, when you define a filter that fits this category, you assign it to the Upgrade class. At run-time, you tell Auditor which class of filters to use. The Severity attribute prioritizes the documents stored in the audit output database, helping you to systematically review and act on the items selected.","title":"To upgrade your filters database"},{"location":"ja/analyzer/filtersadvanced/","text":"Auditor Filters for Advanced Users The Filter wizard creates a validation formula which is a standard Notes formula. Advanced users may avoid the limitations of the wizard by manually completing the validation formula field. You should build your filters a step at a time to ensure that each part works correctly before you add more to it. Since Auditor requires that you use the design of the Analyzer template, you must use fields or alias names from ivesdean.ntf . Note Analyzer Auditor processes documents in the analysis database. This means that any time you reference a field name it must be a valid field on a form referenced by the Apply To value. If you plan to write validation formulas manually, we recommend that you familiarize yourself with the design of the Analyzer template (ivesdean.ntf). A good starting point is to analyze the Analyzer template. Generally, filter validation formulas are standard Notes formulas. Analyzer extends these formulas for special purposes with advanced functions.","title":"Auditor Filters for Advanced Users"},{"location":"ja/analyzer/filtersadvanced/#auditor-filters-for-advanced-users","text":"The Filter wizard creates a validation formula which is a standard Notes formula. Advanced users may avoid the limitations of the wizard by manually completing the validation formula field. You should build your filters a step at a time to ensure that each part works correctly before you add more to it. Since Auditor requires that you use the design of the Analyzer template, you must use fields or alias names from ivesdean.ntf . Note Analyzer Auditor processes documents in the analysis database. This means that any time you reference a field name it must be a valid field on a form referenced by the Apply To value. If you plan to write validation formulas manually, we recommend that you familiarize yourself with the design of the Analyzer template (ivesdean.ntf). A good starting point is to analyze the Analyzer template. Generally, filter validation formulas are standard Notes formulas. Analyzer extends these formulas for special purposes with advanced functions.","title":"Auditor Filters for Advanced Users"},{"location":"ja/analyzer/filtersaliasduplicate/","text":"TMSAliasDuplicate/TMSTitleDuplicate This function checks for a duplicate title. Parameters Parameter Meaning FieldName This parameter is the field name that contains the value that you want to check against the list of titles or aliases for that particular class of design elements (form/view/agent/etc). This function returns TRUE or FALSE .","title":"TMSAliasDuplicate/TMSTitleDuplicate"},{"location":"ja/analyzer/filtersaliasduplicate/#tmsaliasduplicatetmstitleduplicate","text":"This function checks for a duplicate title.","title":"TMSAliasDuplicate/TMSTitleDuplicate"},{"location":"ja/analyzer/filtersaliasduplicate/#parameters","text":"Parameter Meaning FieldName This parameter is the field name that contains the value that you want to check against the list of titles or aliases for that particular class of design elements (form/view/agent/etc). This function returns TRUE or FALSE .","title":"Parameters"},{"location":"ja/analyzer/filtersclasses/","text":"Editing or Creating Classes Auditor's Filter database includes pre-defined filter classes. You can edit the name or description of the class and you can create new classes. After you create a class, you can add filters to that class. A filter can belong to more than one class. When you choose a Filter Set on Analyzer's Audit tab, the classes from the Analyzer Filter database display in the drop-down list. To Edit a Class Open the Analyzer Filter database. Click the Admin > Filter Classes view. Double-click an existing Class to open the document. Double-click the document to enter edit mode. Change the Class Name or Class Description to meet your requirements. Save your changes as prompted when you close the document. To create a class Open the Analyzer Filter database. Click the Admin > Filter Classes view. Click the Create Class button. Enter the Class Name and Class Description . The Class Name should be something brief but descriptive since it will be shown in the Filter Set selection box at run-time. The Class Definition should explain the use of the filters in the Class. Save your changes as prompted when you close the document.","title":"Editing or Creating Classes"},{"location":"ja/analyzer/filtersclasses/#editing-or-creating-classes","text":"Auditor's Filter database includes pre-defined filter classes. You can edit the name or description of the class and you can create new classes. After you create a class, you can add filters to that class. A filter can belong to more than one class. When you choose a Filter Set on Analyzer's Audit tab, the classes from the Analyzer Filter database display in the drop-down list.","title":"Editing or Creating Classes"},{"location":"ja/analyzer/filtersclasses/#to-edit-a-class","text":"Open the Analyzer Filter database. Click the Admin > Filter Classes view. Double-click an existing Class to open the document. Double-click the document to enter edit mode. Change the Class Name or Class Description to meet your requirements. Save your changes as prompted when you close the document.","title":"To Edit a Class"},{"location":"ja/analyzer/filtersclasses/#to-create-a-class","text":"Open the Analyzer Filter database. Click the Admin > Filter Classes view. Click the Create Class button. Enter the Class Name and Class Description . The Class Name should be something brief but descriptive since it will be shown in the Filter Set selection box at run-time. The Class Definition should explain the use of the filters in the Class. Save your changes as prompted when you close the document.","title":"To create a class"},{"location":"ja/analyzer/filtersdisabling/","text":"Disabling or Activating Filters You may decide to stop using a filter, or to use it selectively. When you disable a filter, Analyzer won't evaluate the filter when you pick a class that the filter belongs to. You can reactivate a filter later. To disable or activate a filter From the Analyzer Filter database, click a Filter view, for example, By Class , or By Design Element . Click in the left column to select one or more filters to disable. Click Disable Selected Filter(s) or Activate Selected Filter(s) . A green check mark indicates that the filter is active. A red X indicates that the filter is disabled. Remember to activate disabled filters when required.","title":"Disabling or Activating Filters"},{"location":"ja/analyzer/filtersdisabling/#disabling-or-activating-filters","text":"You may decide to stop using a filter, or to use it selectively. When you disable a filter, Analyzer won't evaluate the filter when you pick a class that the filter belongs to. You can reactivate a filter later.","title":"Disabling or Activating Filters"},{"location":"ja/analyzer/filtersdisabling/#to-disable-or-activate-a-filter","text":"From the Analyzer Filter database, click a Filter view, for example, By Class , or By Design Element . Click in the left column to select one or more filters to disable. Click Disable Selected Filter(s) or Activate Selected Filter(s) . A green check mark indicates that the filter is active. A red X indicates that the filter is disabled. Remember to activate disabled filters when required.","title":"To disable or activate a filter"},{"location":"ja/analyzer/filtersediting/","text":"Editing or Creating Filters You can change the specifications of an existing filter or create a new filter. To create a filter Open the Filter database (deanfltr.nsf). Click the Create Filter action button. You see a New Filter document: Define the new filter by creating the following fields: Field> Description Filter Name The purpose of the filter, for example, agents using Java code. Filter Active> Yes/No indicates whether the filter should be included when one of its classes is chosen for processing. Severity The relative importance of items matching this filter. Filter Class One or more groups (classes) to which the filter belongs. Comment The reason to use the filter, for example, Release A to Release B upgrade. Apply To Click the Apply To dropdown to select the design element you want the filter to check. This is the primary focus of the test. While selecting All lets you create filters that apply to all elements within a database design, selecting All Design Elements restricts your filter to first-level elements such as page, form or view. It ignores (doesn't include as audit targets) sub-elements such as field, hotspot, and column. With the Apply To field chosen, the form expands to show the Evaluate Against options, the Property field, and other filter options. Evaluate Against Select the Property option to include a property in the validation formula, or select an option to apply an existing filter against the Parent or the Children of the element in the Apply To field. Property Select the property you want to test. The list generated is based on the Apply To field type. Once you select the property, the form shows options for defining a condition to use in the selection step. The condition options you see are based on the Apply To and Property fields selected. Condition> Select the appropriate operation to define your test. The operation choices depend on the Apply To and Property selections you made previously. For example, select Button for the Apply To design element and Hide When Options for the property. To add a Condition, simply select one of the operations such as Has one of the following . Then select a Compare With value such as Web browsers . To test multiple conditions, you click AND or OR to specify the logical operator. When you have selected the elements of a single condition, click the Add Condition button to have the Validation Formula updated to include the test just completed. The following table describes the buttons on the **Filter** form: Button Description Add Condition Appends the Validation Formula to include the test just defined. When more than one formula is specified, the Add Condition Logic radio button determines the boolean operator used to combine conditions: \u2013 AND: all conditions must be true for the filter to match. \u2013 OR: any condition causes a match. Replace Condition Deletes the entire Validation Formula . Use this button to effectively redefine the entire filter, starting with the same design element in the Apply To field. Add or Replace the condition as desired. The new condition formula is written to the Validation Formula field, and a description of the condition is added to the Validation Text field: Save your changes as prompted when you close the document. To edit a filter Open the Analyzer Filter database. Double-click an existing filter to open the document. Double-click the document to enter edit mode. Edit the fields you want. If your edits require a new validation formula, Auditor automatically generates it when you select a property and add or replace a condition. Use the Validation Text field to reverse engineer how a validation formula was created. Save your changes as prompted when you close the document. Note To develop a filter for a different design element, you must create an entirely new filter. To modify the Validation Formula , use the Add or Replace Condition functions to rebuild the formula.","title":"Editing or Creating Filters"},{"location":"ja/analyzer/filtersediting/#editing-or-creating-filters","text":"You can change the specifications of an existing filter or create a new filter.","title":"Editing or Creating Filters"},{"location":"ja/analyzer/filtersediting/#to-create-a-filter","text":"Open the Filter database (deanfltr.nsf). Click the Create Filter action button. You see a New Filter document: Define the new filter by creating the following fields: Field> Description Filter Name The purpose of the filter, for example, agents using Java code. Filter Active> Yes/No indicates whether the filter should be included when one of its classes is chosen for processing. Severity The relative importance of items matching this filter. Filter Class One or more groups (classes) to which the filter belongs. Comment The reason to use the filter, for example, Release A to Release B upgrade. Apply To Click the Apply To dropdown to select the design element you want the filter to check. This is the primary focus of the test. While selecting All lets you create filters that apply to all elements within a database design, selecting All Design Elements restricts your filter to first-level elements such as page, form or view. It ignores (doesn't include as audit targets) sub-elements such as field, hotspot, and column. With the Apply To field chosen, the form expands to show the Evaluate Against options, the Property field, and other filter options. Evaluate Against Select the Property option to include a property in the validation formula, or select an option to apply an existing filter against the Parent or the Children of the element in the Apply To field. Property Select the property you want to test. The list generated is based on the Apply To field type. Once you select the property, the form shows options for defining a condition to use in the selection step. The condition options you see are based on the Apply To and Property fields selected. Condition> Select the appropriate operation to define your test. The operation choices depend on the Apply To and Property selections you made previously. For example, select Button for the Apply To design element and Hide When Options for the property. To add a Condition, simply select one of the operations such as Has one of the following . Then select a Compare With value such as Web browsers . To test multiple conditions, you click AND or OR to specify the logical operator. When you have selected the elements of a single condition, click the Add Condition button to have the Validation Formula updated to include the test just completed. The following table describes the buttons on the **Filter** form: Button Description Add Condition Appends the Validation Formula to include the test just defined. When more than one formula is specified, the Add Condition Logic radio button determines the boolean operator used to combine conditions: \u2013 AND: all conditions must be true for the filter to match. \u2013 OR: any condition causes a match. Replace Condition Deletes the entire Validation Formula . Use this button to effectively redefine the entire filter, starting with the same design element in the Apply To field. Add or Replace the condition as desired. The new condition formula is written to the Validation Formula field, and a description of the condition is added to the Validation Text field: Save your changes as prompted when you close the document.","title":"To create a filter"},{"location":"ja/analyzer/filtersediting/#to-edit-a-filter","text":"Open the Analyzer Filter database. Double-click an existing filter to open the document. Double-click the document to enter edit mode. Edit the fields you want. If your edits require a new validation formula, Auditor automatically generates it when you select a property and add or replace a condition. Use the Validation Text field to reverse engineer how a validation formula was created. Save your changes as prompted when you close the document. Note To develop a filter for a different design element, you must create an entirely new filter. To modify the Validation Formula , use the Add or Replace Condition functions to rebuild the formula.","title":"To edit a filter"},{"location":"ja/analyzer/filtersexamples/","text":"Filter Example The following table shows examples of filters you can create. Procedures for creating them follow the table. Filter Example Description Search for static text You can search your database for instances of a particular @Function such as @Do . To do this, create a filter that searches for @Do using the TMSRTContains formula. Use whole word matching, or the search result will include other functions that begin with @Do , such as @Doc , @DoChildren , and @DocFields . Search for values included within an analysis document To meet corporate standards, you must find and correct all the forms that do not include their name in the window title. To do this, you would likely pass the form name to the TMSRTContains function using a formula such as TMSRTContains( ffrmWinTitle; 0; \"Memo\") , where \"Memo\" is a particular form's name. However, you want to find all such forms, not just \"Memo.\" To search for all such forms, pass the field name that contains the title of the form instead of a literal string of the form name. You can then apply this filter to all forms, not just a particular form. Use values from the parent One of your company's standards is that field names must start with form aliases. You can create a filter that shows all the fields in a document, where field names do not start with the alias of the form/subform they reside in. Create a filter that searches for \"@Do\" Open the Auditor Filter database, which is called deanfltr.nsf . Click Create Filter to open the New Filter window. From the New Filter window, enter the following Field name What to enter or select Filter name: Use of @Do in database Filter Active: Yes Severity: Medium Filter Class: Generic Filters Comment: Look for the use of @Do Apply To: All The new filter should now look like this: In the Property field, click the arrow to display the list. Then select the keyword All Code (Formula / LS / JavaScript) . In the Operation field, select the RT contains option. In the Compare To field, enter @DO . In the Flag field, click the arrow to display the list. Select Whole Word and click OK . Click Add Condition . The new condition is added to the formula in the Validation Formula field: Save the filter and exit.","title":"Filter Example"},{"location":"ja/analyzer/filtersexamples/#filter-example","text":"The following table shows examples of filters you can create. Procedures for creating them follow the table. Filter Example Description Search for static text You can search your database for instances of a particular @Function such as @Do . To do this, create a filter that searches for @Do using the TMSRTContains formula. Use whole word matching, or the search result will include other functions that begin with @Do , such as @Doc , @DoChildren , and @DocFields . Search for values included within an analysis document To meet corporate standards, you must find and correct all the forms that do not include their name in the window title. To do this, you would likely pass the form name to the TMSRTContains function using a formula such as TMSRTContains( ffrmWinTitle; 0; \"Memo\") , where \"Memo\" is a particular form's name. However, you want to find all such forms, not just \"Memo.\" To search for all such forms, pass the field name that contains the title of the form instead of a literal string of the form name. You can then apply this filter to all forms, not just a particular form. Use values from the parent One of your company's standards is that field names must start with form aliases. You can create a filter that shows all the fields in a document, where field names do not start with the alias of the form/subform they reside in.","title":"Filter Example"},{"location":"ja/analyzer/filtersexamples/#create-a-filter-that-searches-for-do","text":"Open the Auditor Filter database, which is called deanfltr.nsf . Click Create Filter to open the New Filter window. From the New Filter window, enter the following Field name What to enter or select Filter name: Use of @Do in database Filter Active: Yes Severity: Medium Filter Class: Generic Filters Comment: Look for the use of @Do Apply To: All The new filter should now look like this: In the Property field, click the arrow to display the list. Then select the keyword All Code (Formula / LS / JavaScript) . In the Operation field, select the RT contains option. In the Compare To field, enter @DO . In the Flag field, click the arrow to display the list. Select Whole Word and click OK . Click Add Condition . The new condition is added to the formula in the Validation Formula field: Save the filter and exit.","title":"Create a filter that searches for \"@Do\""},{"location":"ja/analyzer/filtersgetchildvalues/","text":"TMSGetChildValues This function returns a colon-separated list of field values from child documents in the Analyzer database. Parameters Parameter Meaning <Form Alias> This parameter indicates a form that can be a child of the current document. For example a column can be a child of a view , but a field cannot. <field name> This parameter represents a valid text field on the child documents, for example, TMSGetChildValues(CCOL00::fcolTitle) . When run against a view, the document returns a list of titles for all of the child columns.","title":"TMSGetChildValues"},{"location":"ja/analyzer/filtersgetchildvalues/#tmsgetchildvalues","text":"This function returns a colon-separated list of field values from child documents in the Analyzer database.","title":"TMSGetChildValues"},{"location":"ja/analyzer/filtersgetchildvalues/#parameters","text":"Parameter Meaning <Form Alias> This parameter indicates a form that can be a child of the current document. For example a column can be a child of a view , but a field cannot. <field name> This parameter represents a valid text field on the child documents, for example, TMSGetChildValues(CCOL00::fcolTitle) . When run against a view, the document returns a list of titles for all of the child columns.","title":"Parameters"},{"location":"ja/analyzer/filtersgetparentvalue/","text":"TMSGetParentValue This function gets a field value from a parent document in the Analyzer database. TMSGetParentValue( <Form Alias>::<field name> ) Parameters Parameter Meaning <Form Alias> This parameter must indicate a parent of the current document (following the structure of the Analyzer output). For example, field cannot be a parent document of a form . However, Form can be a parent for a field. Also, the only valid parent for a design element is Database (CDBP00). <field name> This parameter must represent a valid text field on the target document. Otherwise, it will fail. The field cannot be a rich text field. If the field is not a text field, the value is converted to text. For example, consider the following: TMSGetParentValue ( CDBP00 :: fdbpFile ) It returns the file name of the current database. It can be embedded in the RT formula as follows: TMSRTContains ( Rich Text ; 0; TMSGetParentValue( CDBP00::fdbpFile )) When checking a filter, GetParentValue is evaluated first and its return value is substituted into the formula. Then the rest of the formula is evaluated. This function works on any ApplyTo filter except Database because Database documents do not have a parent.","title":"TMSGetParentValue"},{"location":"ja/analyzer/filtersgetparentvalue/#tmsgetparentvalue","text":"This function gets a field value from a parent document in the Analyzer database. TMSGetParentValue( <Form Alias>::<field name> )","title":"TMSGetParentValue"},{"location":"ja/analyzer/filtersgetparentvalue/#parameters","text":"Parameter Meaning <Form Alias> This parameter must indicate a parent of the current document (following the structure of the Analyzer output). For example, field cannot be a parent document of a form . However, Form can be a parent for a field. Also, the only valid parent for a design element is Database (CDBP00). <field name> This parameter must represent a valid text field on the target document. Otherwise, it will fail. The field cannot be a rich text field. If the field is not a text field, the value is converted to text. For example, consider the following: TMSGetParentValue ( CDBP00 :: fdbpFile ) It returns the file name of the current database. It can be embedded in the RT formula as follows: TMSRTContains ( Rich Text ; 0; TMSGetParentValue( CDBP00::fdbpFile )) When checking a filter, GetParentValue is evaluated first and its return value is substituted into the formula. Then the rest of the formula is evaluated. This function works on any ApplyTo filter except Database because Database documents do not have a parent.","title":"Parameters"},{"location":"ja/analyzer/filtersincludechildren/","text":"TMSIncludeChildren This function runs the specified filter against all children of the current document and combines the results according to the specified logic. Parameters Parameter Meaning UNID This parameter is the UNID of the filter document you will use to run against the child documents. LOGIC Accepts values \"AND\" and \"OR\". \"AND\" - result will be true only if the filter evaluates to true for all children. \"OR\" - result will be true if the filter evaluates true for at least one child. Use the Select filter(s) to evaluate against children button on the filter definition form to set up TMSIncludeChildren. For example: TMSIncludeChildren(\" FA385C79559C18308525690B006479B6\";\"AND\")","title":"TMSIncludeChildren"},{"location":"ja/analyzer/filtersincludechildren/#tmsincludechildren","text":"This function runs the specified filter against all children of the current document and combines the results according to the specified logic.","title":"TMSIncludeChildren"},{"location":"ja/analyzer/filtersincludechildren/#parameters","text":"Parameter Meaning UNID This parameter is the UNID of the filter document you will use to run against the child documents. LOGIC Accepts values \"AND\" and \"OR\". \"AND\" - result will be true only if the filter evaluates to true for all children. \"OR\" - result will be true if the filter evaluates true for at least one child. Use the Select filter(s) to evaluate against children button on the filter definition form to set up TMSIncludeChildren. For example: TMSIncludeChildren(\" FA385C79559C18308525690B006479B6\";\"AND\")","title":"Parameters"},{"location":"ja/analyzer/filtersincludeparent/","text":"TMSIncludeParent This function finds the parent document of the document currently being analyzed and then runs the specified filter. Parameters Parameter Meaning UNID This parameter is the UNID of the Filter document that you will use to run against the parent of the current Apply To . This function returns TRUE or FALSE .","title":"TMSIncludeParent"},{"location":"ja/analyzer/filtersincludeparent/#tmsincludeparent","text":"This function finds the parent document of the document currently being analyzed and then runs the specified filter.","title":"TMSIncludeParent"},{"location":"ja/analyzer/filtersincludeparent/#parameters","text":"Parameter Meaning UNID This parameter is the UNID of the Filter document that you will use to run against the parent of the current Apply To . This function returns TRUE or FALSE .","title":"Parameters"},{"location":"ja/analyzer/filtersreviewing/","text":"Reviewing Filters When you open the Analyzer Filter database, you can review the following: Filter Classes\u2014name and description The Filters themselves by the Class they are assigned to by the Design Element they audit The Severity Definitions\u2014name and description","title":"Reviewing Filters"},{"location":"ja/analyzer/filtersreviewing/#reviewing-filters","text":"When you open the Analyzer Filter database, you can review the following: Filter Classes\u2014name and description The Filters themselves by the Class they are assigned to by the Design Element they audit The Severity Definitions\u2014name and description","title":"Reviewing Filters"},{"location":"ja/analyzer/filtersrtcontains/","text":"TMSRTContains This function searches the specified rich text field for a value. TMSRTContains( FieldName ; Flags; Value ) Parameters Parameter Meaning FieldName This parameter represents the name of a rich text field on the current analyzer document. If Apply To is Agent , then it includes only rich text fields that exist on the Agent form in the analyzer template. Or If this parameter is set to Rich Text, then it looks in all rich text fields on the document. Flag This number tells TMSRTContains how to search. These flags can be OR'd together Value This is the text to search for. It can be a quoted string or an unquoted field name. If it is a field name, Auditor gets the value to search for from that field, so it must be plain text. Flags Flag Flag Meaning 0 Normal 1 Whole Word 2 Case Sensitive 4 Accent Sensitive 8 Wildcards","title":"TMSRTContains"},{"location":"ja/analyzer/filtersrtcontains/#tmsrtcontains","text":"This function searches the specified rich text field for a value. TMSRTContains( FieldName ; Flags; Value )","title":"TMSRTContains"},{"location":"ja/analyzer/filtersrtcontains/#parameters","text":"Parameter Meaning FieldName This parameter represents the name of a rich text field on the current analyzer document. If Apply To is Agent , then it includes only rich text fields that exist on the Agent form in the analyzer template. Or If this parameter is set to Rich Text, then it looks in all rich text fields on the document. Flag This number tells TMSRTContains how to search. These flags can be OR'd together Value This is the text to search for. It can be a quoted string or an unquoted field name. If it is a field name, Auditor gets the value to search for from that field, so it must be plain text.","title":"Parameters"},{"location":"ja/analyzer/filtersrtcontains/#flags","text":"Flag Flag Meaning 0 Normal 1 Whole Word 2 Case Sensitive 4 Accent Sensitive 8 Wildcards","title":"Flags"},{"location":"ja/analyzer/filterssearchall/","text":"TMSSearchAll This function is the same as TMSRTContains except it looks in all text and rich text fields on a document. Parameters Parameter Meaning Flag This number tells TMSSearchAll how to search. These flags can be OR'd together Value This is the text to search for. It can be a quoted string or an unquoted field name. If it is a field name, Auditor gets the value to search for from that field, so it must be plain text. Flags Flag Flag Meaning 0 Normal 1 Whole Word 2 Case Sensitive 4 Accent Sensitive 8 Wildcards","title":"TMSSearchAll"},{"location":"ja/analyzer/filterssearchall/#tmssearchall","text":"This function is the same as TMSRTContains except it looks in all text and rich text fields on a document.","title":"TMSSearchAll"},{"location":"ja/analyzer/filterssearchall/#parameters","text":"Parameter Meaning Flag This number tells TMSSearchAll how to search. These flags can be OR'd together Value This is the text to search for. It can be a quoted string or an unquoted field name. If it is a field name, Auditor gets the value to search for from that field, so it must be plain text.","title":"Parameters"},{"location":"ja/analyzer/filterssearchall/#flags","text":"Flag Flag Meaning 0 Normal 1 Whole Word 2 Case Sensitive 4 Accent Sensitive 8 Wildcards","title":"Flags"},{"location":"ja/analyzer/filtersseverity/","text":"Editing or Creating Severity Definitions The Audit database includes pre-defined severity levels that are assigned to each filter. Auditor displays data in descending sort order for severity sequence. The higher the numeric value, the more important it is to address the issue causing the data element's selection. You can assign severity levels in any numerical range, including negative numbers. The following example shows how you can set up severity codes for filters. You can change the name or description of an existing severity level to meet your standards, or create an entirely new severity level. To edit a severity level Open the Analyzer Filter database. Click the Admin > Severity Definitions view. Double-click an existing Severity Definition to open the document. Double-click the document to enter edit mode. Change the Severity Name , Value or Description to meet your requirements. Save your changes as prompted when you close the document. To create a severity level Open the Analyzer Filter database. Click the Severity Definitions view. Click Create Severity Definition . Enter the Severity Name , Value and Description . The higher the severity value, the more important it is to fix the data element identified by the filter. You may assign severity levels in any numerical range. Save your changes as prompted when you close the document.","title":"Editing or Creating Severity Definitions"},{"location":"ja/analyzer/filtersseverity/#editing-or-creating-severity-definitions","text":"The Audit database includes pre-defined severity levels that are assigned to each filter. Auditor displays data in descending sort order for severity sequence. The higher the numeric value, the more important it is to address the issue causing the data element's selection. You can assign severity levels in any numerical range, including negative numbers. The following example shows how you can set up severity codes for filters. You can change the name or description of an existing severity level to meet your standards, or create an entirely new severity level.","title":"Editing or Creating Severity Definitions"},{"location":"ja/analyzer/filtersseverity/#to-edit-a-severity-level","text":"Open the Analyzer Filter database. Click the Admin > Severity Definitions view. Double-click an existing Severity Definition to open the document. Double-click the document to enter edit mode. Change the Severity Name , Value or Description to meet your requirements. Save your changes as prompted when you close the document.","title":"To edit a severity level"},{"location":"ja/analyzer/filtersseverity/#to-create-a-severity-level","text":"Open the Analyzer Filter database. Click the Severity Definitions view. Click Create Severity Definition . Enter the Severity Name , Value and Description . The higher the severity value, the more important it is to fix the data element identified by the filter. You may assign severity levels in any numerical range. Save your changes as prompted when you close the document.","title":"To create a severity level"},{"location":"ja/analyzer/incremental/","text":"Controlling Incremental Updates The first time you run Analyzer against a database, every design element is analyzed (unless you excluded some of them on the Design Notes tab). When you run Analyzer subsequent times, select the Incremental update check box to analyze and update the documents for only those design elements that have changed since Analyzer was last run against them. Clear the Incremental update check box to analyze every design element and update every document even if it has not changed. This feature allows you to change the title of a database and then update the design documentation and propagate the new title into other design elements.","title":"Controlling Incremental Updates"},{"location":"ja/analyzer/incremental/#controlling-incremental-updates","text":"The first time you run Analyzer against a database, every design element is analyzed (unless you excluded some of them on the Design Notes tab). When you run Analyzer subsequent times, select the Incremental update check box to analyze and update the documents for only those design elements that have changed since Analyzer was last run against them. Clear the Incremental update check box to analyze every design element and update every document even if it has not changed. This feature allows you to change the title of a database and then update the design documentation and propagate the new title into other design elements.","title":"Controlling Incremental Updates"},{"location":"ja/analyzer/output/","text":"Overview Analyzer scans your database, creates a document for each component it finds, and organizes the documents using views.","title":"Overview"},{"location":"ja/analyzer/output/#overview","text":"Analyzer scans your database, creates a document for each component it finds, and organizes the documents using views.","title":"Overview"},{"location":"ja/analyzer/references/","text":"Finding all References to a Field You can use the Field X-Ref folder to find all references to a particular field name. To find references to a field Open the Field X-Ref folder. Click the Reset button to remove any documents from the folder. Switch to a view containing the field you want to find references to (for example, Objects by Name\\Fields ). Locate the document representing the field. Drag the field from the view into the Field X-Ref folder. Open the Field X-Ref folder. Click the Add References action button. Any elements that reference the field will be added to the Field X-Ref folder. The folder is categorized by field name. Note This structured cross-reference works only for fields.","title":"Finding all References to a Field"},{"location":"ja/analyzer/references/#finding-all-references-to-a-field","text":"You can use the Field X-Ref folder to find all references to a particular field name.","title":"Finding all References to a Field"},{"location":"ja/analyzer/references/#to-find-references-to-a-field","text":"Open the Field X-Ref folder. Click the Reset button to remove any documents from the folder. Switch to a view containing the field you want to find references to (for example, Objects by Name\\Fields ). Locate the document representing the field. Drag the field from the view into the Field X-Ref folder. Open the Field X-Ref folder. Click the Add References action button. Any elements that reference the field will be added to the Field X-Ref folder. The folder is categorized by field name. Note This structured cross-reference works only for fields.","title":"To find references to a field"},{"location":"ja/analyzer/script/","text":"Script Overview You can start Analyzer using LotusScript. Use the Analyzer script library, located in the Teamstudio Reports template (tmslogs.ntf), to set up an analysis to be run in batch. This section provides detailed descriptions of each Analyzer script library function, followed by agent examples that illustrate how to use it. The Analyzer Script Library exposes the following functions: Function Description DEANAnalyzeW32 Calls Analyzer. Passes only the file names and flags. DEANAnalyze2W32 Calls Analyzer. Passes the file names, output database title, the template to be used when creating the output database file, flags and a filter indicating the types of design elements to be analyzed. DEANAnalyzeAndAudit Calls Analyzer Audit. Performs an analysis and audit on a given database. DEANStringLoadW32 Obtains the error message associated with any error code returned from the other API functions. If you work within the Teamstudio Reports template (tmslogs.ntf), you will not have to worry about creating the Analyzer script library. If you work within a different database/template, you must copy over this script library as well.","title":"Script Overview"},{"location":"ja/analyzer/script/#script-overview","text":"You can start Analyzer using LotusScript. Use the Analyzer script library, located in the Teamstudio Reports template (tmslogs.ntf), to set up an analysis to be run in batch. This section provides detailed descriptions of each Analyzer script library function, followed by agent examples that illustrate how to use it. The Analyzer Script Library exposes the following functions: Function Description DEANAnalyzeW32 Calls Analyzer. Passes only the file names and flags. DEANAnalyze2W32 Calls Analyzer. Passes the file names, output database title, the template to be used when creating the output database file, flags and a filter indicating the types of design elements to be analyzed. DEANAnalyzeAndAudit Calls Analyzer Audit. Performs an analysis and audit on a given database. DEANStringLoadW32 Obtains the error message associated with any error code returned from the other API functions. If you work within the Teamstudio Reports template (tmslogs.ntf), you will not have to worry about creating the Analyzer script library. If you work within a different database/template, you must copy over this script library as well.","title":"Script Overview"},{"location":"ja/analyzer/scriptanalyze/","text":"DEANAnalyzeW32 Description Calls Analyzer. Passes only the file names and flags. Syntax status = DEANAnalyzeW32( <Design>, <Analysis>, <Flags> ) Parameters Parameter Input/Output Type Description Design Input String The path of the database to analyze. Separate server and pathname with !! Analysis Input String The path of the analysis output database. Separate server and pathname with !! Flags Input Long This parameter allows you to control how Analyzer runs. You can pass any of the DBDEAN Flag Constants . You can pass a combination of flags by using a plus sign (+) to combine them. Return Value Return Value Type Description status Integer A return value of zero (0) indicates that no error has occurred. If the return value is non-zero, use DEANStringLoadW32 to retrieve the error message associated with the error code. Example status = DEANAnalyzeW32 ( _ \"myserver!!dbtorun.nsf\" , _ 'database to analyze \"dbout.nsf\" , _ 'analysis database for output DBDEAN_FLAG_SILENT + _ 'no UI feedback DBDEAN_FLAG_NO_CREATE ) 'do not create new analysis database","title":"DEANAnalyzeW32"},{"location":"ja/analyzer/scriptanalyze/#deananalyzew32","text":"","title":"DEANAnalyzeW32"},{"location":"ja/analyzer/scriptanalyze/#description","text":"Calls Analyzer. Passes only the file names and flags.","title":"Description"},{"location":"ja/analyzer/scriptanalyze/#syntax","text":"status = DEANAnalyzeW32( <Design>, <Analysis>, <Flags> )","title":"Syntax"},{"location":"ja/analyzer/scriptanalyze/#parameters","text":"Parameter Input/Output Type Description Design Input String The path of the database to analyze. Separate server and pathname with !! Analysis Input String The path of the analysis output database. Separate server and pathname with !! Flags Input Long This parameter allows you to control how Analyzer runs. You can pass any of the DBDEAN Flag Constants . You can pass a combination of flags by using a plus sign (+) to combine them.","title":"Parameters"},{"location":"ja/analyzer/scriptanalyze/#return-value","text":"Return Value Type Description status Integer A return value of zero (0) indicates that no error has occurred. If the return value is non-zero, use DEANStringLoadW32 to retrieve the error message associated with the error code.","title":"Return Value"},{"location":"ja/analyzer/scriptanalyze/#example","text":"status = DEANAnalyzeW32 ( _ \"myserver!!dbtorun.nsf\" , _ 'database to analyze \"dbout.nsf\" , _ 'analysis database for output DBDEAN_FLAG_SILENT + _ 'no UI feedback DBDEAN_FLAG_NO_CREATE ) 'do not create new analysis database","title":"Example"},{"location":"ja/analyzer/scriptanalyze2/","text":"DEANAnalyze2W32 Description Calls Analyzer. Passes the file names, output database title, the template to be used when creating the output database, flags and a filter indicating the types of design elements to be analyzed. Syntax status = DEANAnalyze2W32( <Design>, <Analysis>, <Title>, <Template>, <Filter>, <Flags> ) Parameters Parameter Input/Output Type Description Design Input String The path of the database to analyze. Separate server and pathname with !! Analysis Input String The path of the analysis output database. Separate server and pathname with !! Title Input String The title to be used if a new analysis database is created. Template Input String The path to the template to use if a new analysis database is created. Separate server and pathname with !!. Specify the empty string, \"\", to use the default template. Filter Input String A Context Filter string specifying which design elements should be analyzed. Specify the empty string, \"\", to analyze the full design. Flags Input Long This parameter allows you to control how Analyzer runs. You can pass any of the DBDEAN Flag Constants . You can pass a combination of flags by using a plus sign (+) to combine them. Return Value Return Value Type Description status Integer A return value of zero (0) indicates that no error has occurred. If the return value is non-zero, use DEANStringLoadW32 to retrieve the error message associated with the error code. Example status = DEANAnalyze2W32 ( _ \"myserver!!dbtorun.nsf\" , _ 'database to analyze \"dbout.nsf\" , _ 'analysis database for output \"Analysis of dbtorun\" , _ 'title for output database \"\" , _ 'use default template, \"-*\" , _ 'analyze database level properties only DBDEAN_FLAG_DEFAULT ) 'create analysis database if it doesn't exist","title":"DEANAnalyze2W32"},{"location":"ja/analyzer/scriptanalyze2/#deananalyze2w32","text":"","title":"DEANAnalyze2W32"},{"location":"ja/analyzer/scriptanalyze2/#description","text":"Calls Analyzer. Passes the file names, output database title, the template to be used when creating the output database, flags and a filter indicating the types of design elements to be analyzed.","title":"Description"},{"location":"ja/analyzer/scriptanalyze2/#syntax","text":"status = DEANAnalyze2W32( <Design>, <Analysis>, <Title>, <Template>, <Filter>, <Flags> )","title":"Syntax"},{"location":"ja/analyzer/scriptanalyze2/#parameters","text":"Parameter Input/Output Type Description Design Input String The path of the database to analyze. Separate server and pathname with !! Analysis Input String The path of the analysis output database. Separate server and pathname with !! Title Input String The title to be used if a new analysis database is created. Template Input String The path to the template to use if a new analysis database is created. Separate server and pathname with !!. Specify the empty string, \"\", to use the default template. Filter Input String A Context Filter string specifying which design elements should be analyzed. Specify the empty string, \"\", to analyze the full design. Flags Input Long This parameter allows you to control how Analyzer runs. You can pass any of the DBDEAN Flag Constants . You can pass a combination of flags by using a plus sign (+) to combine them.","title":"Parameters"},{"location":"ja/analyzer/scriptanalyze2/#return-value","text":"Return Value Type Description status Integer A return value of zero (0) indicates that no error has occurred. If the return value is non-zero, use DEANStringLoadW32 to retrieve the error message associated with the error code.","title":"Return Value"},{"location":"ja/analyzer/scriptanalyze2/#example","text":"status = DEANAnalyze2W32 ( _ \"myserver!!dbtorun.nsf\" , _ 'database to analyze \"dbout.nsf\" , _ 'analysis database for output \"Analysis of dbtorun\" , _ 'title for output database \"\" , _ 'use default template, \"-*\" , _ 'analyze database level properties only DBDEAN_FLAG_DEFAULT ) 'create analysis database if it doesn't exist","title":"Example"},{"location":"ja/analyzer/scriptanalyzeandaudit/","text":"DEANAnalyzeAndAudit Description Calls Analyzer Audit. Performs an analysis and audit on a given database. Syntax status = DEANAnalyzeAndAudit( <Design>, <Analysis>, <Title>, <Template>, <AuditIn>, <AuditOut>, <AuditOutTitle>, <AuditClass>, <Filter>, <Flags> ) Parameters Parameter Input/Output Type Description Design Input String The path of the database to analyze. Separate server and pathname with !! Analysis Input String The path of the analysis output database. Separate server and pathname with !! Title Input String The title to be used if a new analysis database is created. Template Input String The path to the template to use if a new analysis database is created. AuditIn Input String The path to the Auditor filter database. Separate server and pathname with !! AuditOut Input String The path to the Auditor output database. Separate server and pathname with !! AuditOutTitle Input String The title to use if the Auditor output database needs to be created. AuditClass Input String The audit filter class to use for the audit. Filter Input String A Context Filter string specifying which design elements should be analyzed. Specify the empty string, \"\", to analyze the full design. Flags Input Long This parameter allows you to control how Analyzer runs. You can pass any of the DBDEAN Flag Constants . You can pass a combination of flags by using a plus sign (+) to combine them. Return Value Return Value Type Description status Integer A return value of zero (0) indicates that no error has occurred. If the return value is non-zero, use DEANStringLoadW32 to retrieve the error message associated with the error code. Example status = DEANAnalyzeAndAudit ( _ \"myserver!!dbtorun.nsf\" , _ 'database to analyze \"dbout.nsf\" , _ 'analysis database for output \"Analysis of dbtorun\" , _ 'title for output database \"\" , _ 'use default template, \"deanfltr.nsf\" , _ 'default filter database \"dbAuditOut.nsf\" , _ 'database for audit results \"Audit of dbtorun\" , _ 'title for audit results database \"UI Standards\" , _ 'filter class \"-FM\" , _ 'analyze forms only DBDEAN_FLAG_DEFAULT ) 'create analysis database if it doesn't exist","title":"DEANAnalyzeAndAudit"},{"location":"ja/analyzer/scriptanalyzeandaudit/#deananalyzeandaudit","text":"","title":"DEANAnalyzeAndAudit"},{"location":"ja/analyzer/scriptanalyzeandaudit/#description","text":"Calls Analyzer Audit. Performs an analysis and audit on a given database.","title":"Description"},{"location":"ja/analyzer/scriptanalyzeandaudit/#syntax","text":"status = DEANAnalyzeAndAudit( <Design>, <Analysis>, <Title>, <Template>, <AuditIn>, <AuditOut>, <AuditOutTitle>, <AuditClass>, <Filter>, <Flags> )","title":"Syntax"},{"location":"ja/analyzer/scriptanalyzeandaudit/#parameters","text":"Parameter Input/Output Type Description Design Input String The path of the database to analyze. Separate server and pathname with !! Analysis Input String The path of the analysis output database. Separate server and pathname with !! Title Input String The title to be used if a new analysis database is created. Template Input String The path to the template to use if a new analysis database is created. AuditIn Input String The path to the Auditor filter database. Separate server and pathname with !! AuditOut Input String The path to the Auditor output database. Separate server and pathname with !! AuditOutTitle Input String The title to use if the Auditor output database needs to be created. AuditClass Input String The audit filter class to use for the audit. Filter Input String A Context Filter string specifying which design elements should be analyzed. Specify the empty string, \"\", to analyze the full design. Flags Input Long This parameter allows you to control how Analyzer runs. You can pass any of the DBDEAN Flag Constants . You can pass a combination of flags by using a plus sign (+) to combine them.","title":"Parameters"},{"location":"ja/analyzer/scriptanalyzeandaudit/#return-value","text":"Return Value Type Description status Integer A return value of zero (0) indicates that no error has occurred. If the return value is non-zero, use DEANStringLoadW32 to retrieve the error message associated with the error code.","title":"Return Value"},{"location":"ja/analyzer/scriptanalyzeandaudit/#example","text":"status = DEANAnalyzeAndAudit ( _ \"myserver!!dbtorun.nsf\" , _ 'database to analyze \"dbout.nsf\" , _ 'analysis database for output \"Analysis of dbtorun\" , _ 'title for output database \"\" , _ 'use default template, \"deanfltr.nsf\" , _ 'default filter database \"dbAuditOut.nsf\" , _ 'database for audit results \"Audit of dbtorun\" , _ 'title for audit results database \"UI Standards\" , _ 'filter class \"-FM\" , _ 'analyze forms only DBDEAN_FLAG_DEFAULT ) 'create analysis database if it doesn't exist","title":"Example"},{"location":"ja/analyzer/scriptctxfilter/","text":"Context Filter You use a context filter to specify the design categories to be analyzed, for example Forms or Shared Actions. You cannot use context filters to specify particular elements within a category; all elements within the category will be processed. The following table defines the syntax to use for each category when you define the context filter parameter in a script call. For example, to analyze only the Forms, Subforms and Folders in a database, you would enter \" -fm-sf-fl \". The string is not case-sensitive. Category Syntax Agent -ag Applet -ap Component -co Composite Application -ca Custom Control -cc Data Connection -dc Database Icon -ic Database properties -* Database script -ds DB2 Data Access Views -dv File Resource -fi Folder -fl Form -fm Frameset -fr Help About -ha Help Using -hu Image -im Navigator -na Outline -ou Page -pa Profile Documents -pr Replication Formula -rf Script Library -sl Shared Action -ac Shared Column -sc Shared Field -sh Style Sheet -ss Subform -sf Theme -th V3 Macro -v3 View -vi Webservice Consumer -wc Webservice Provider -ws Wiring Properties -wp XPage -xp","title":"Context Filter"},{"location":"ja/analyzer/scriptctxfilter/#context-filter","text":"You use a context filter to specify the design categories to be analyzed, for example Forms or Shared Actions. You cannot use context filters to specify particular elements within a category; all elements within the category will be processed. The following table defines the syntax to use for each category when you define the context filter parameter in a script call. For example, to analyze only the Forms, Subforms and Folders in a database, you would enter \" -fm-sf-fl \". The string is not case-sensitive. Category Syntax Agent -ag Applet -ap Component -co Composite Application -ca Custom Control -cc Data Connection -dc Database Icon -ic Database properties -* Database script -ds DB2 Data Access Views -dv File Resource -fi Folder -fl Form -fm Frameset -fr Help About -ha Help Using -hu Image -im Navigator -na Outline -ou Page -pa Profile Documents -pr Replication Formula -rf Script Library -sl Shared Action -ac Shared Column -sc Shared Field -sh Style Sheet -ss Subform -sf Theme -th V3 Macro -v3 View -vi Webservice Consumer -wc Webservice Provider -ws Wiring Properties -wp XPage -xp","title":"Context Filter"},{"location":"ja/analyzer/scripterrors/","text":"Error Code Return Values These are possible return values for any of the Analyzer functions. Value Meaning NOERROR (0) Operation completed successfully. 0-65535 Notes API error codes. 65536 and above Teamstudio error codes Teamstudio Error Code Value Meaning IDERR_DEAN_BAD_CLASS (66816) The design class of the pre-existing analysis database is not DEANTemplate IDERR_DEAN_BAD_ANALYSIS (66817) The pre-existing analysis database contains invalid documents. IDERR_DEAN_DELETE_FAILED (66820) Analyzer could not remove analysis documents corresponding to deleted design elements. IDERR_DEAN_TEMPLATE_NOT_FOUND (66821) Analysis template (usually ivesdean.ntf ) could not be found. Note Many other possible error codes can be returned. Use DEANStringLoadW32 to get the message associated with an error code.","title":"Error Code Return Values"},{"location":"ja/analyzer/scripterrors/#error-code-return-values","text":"These are possible return values for any of the Analyzer functions. Value Meaning NOERROR (0) Operation completed successfully. 0-65535 Notes API error codes. 65536 and above Teamstudio error codes Teamstudio Error Code Value Meaning IDERR_DEAN_BAD_CLASS (66816) The design class of the pre-existing analysis database is not DEANTemplate IDERR_DEAN_BAD_ANALYSIS (66817) The pre-existing analysis database contains invalid documents. IDERR_DEAN_DELETE_FAILED (66820) Analyzer could not remove analysis documents corresponding to deleted design elements. IDERR_DEAN_TEMPLATE_NOT_FOUND (66821) Analysis template (usually ivesdean.ntf ) could not be found. Note Many other possible error codes can be returned. Use DEANStringLoadW32 to get the message associated with an error code.","title":"Error Code Return Values"},{"location":"ja/analyzer/scriptflags/","text":"DBDEAN Flag Constants Flag Description DBDEAN_FLAG_ACL_SINGLEDOC Writes all ACL users and their properties in a single document. BDEAN_FLAG_DEFAULT Default behavior is to create an output database if it doesn't exist, update only the elements that are modified since the last run and prompt if an error occurs. DBDEAN_FLAG_NO_ANALYSIS (For DEANAnalyzeAndAudit only.) Run the audit on an existing analysis database without also running the analysis. DBDEAN_FLAG_NO_CREATE Prevents creation of a new analysis database. If the specified analysis database does not exist, the function returns an error. DBDEAN_FLAG_REBUILD_ALL Prevents incremental update. The entire analysis will be deleted and rebuilt, except for user response documents. DBDEAN_FLAG_SILENT Prevents UI feedback. No messages will be displayed. You must check the returned error code to ensure that the analysis was successful.","title":"DBDEAN Flag Constants"},{"location":"ja/analyzer/scriptflags/#dbdean-flag-constants","text":"Flag Description DBDEAN_FLAG_ACL_SINGLEDOC Writes all ACL users and their properties in a single document. BDEAN_FLAG_DEFAULT Default behavior is to create an output database if it doesn't exist, update only the elements that are modified since the last run and prompt if an error occurs. DBDEAN_FLAG_NO_ANALYSIS (For DEANAnalyzeAndAudit only.) Run the audit on an existing analysis database without also running the analysis. DBDEAN_FLAG_NO_CREATE Prevents creation of a new analysis database. If the specified analysis database does not exist, the function returns an error. DBDEAN_FLAG_REBUILD_ALL Prevents incremental update. The entire analysis will be deleted and rebuilt, except for user response documents. DBDEAN_FLAG_SILENT Prevents UI feedback. No messages will be displayed. You must check the returned error code to ensure that the analysis was successful.","title":"DBDEAN Flag Constants"},{"location":"ja/analyzer/scriptsample/","text":"Analyzer Sample Agents You can find sample agents in the Teamstudio Reports template You can find sample agents in the Teamstudio Reports template tmslogs.ntf , which is provided with the product. Run them as provided to see how they work. They demonstrate how to call Analyzer dynamically, whether real-time or on a scheduled basis. As standard Notes agents coded in LotusScript, they have the same basic structure. First, they determine the files to be analyzed and the output analysis file to be created. Then they call an DeanAnalyze function to start Analyzer processing. The function calls pass the file and other necessary parameters. The Analyzer script library contains the constant and function definitions necessary to start Analyzer. You will likely want to change these agents to provide the pertinent file and path data. You can change, or copy and then change the agents. The script library and agents (with your modifications, if any) must be present in the database for which you will run the agent. Note Do not change the Declaration section as doing so may cause the script library to malfunction. Analyzer Scripting Sample with Dialog This agent prompts you to enter the name of the input file and the analysis output file. It uses a hidden form, Analyzer Scripting Sample Dialog that has the alias AnalyzerDialog in a DialogBox call to retrieve the file data. You can use the function to supply the information about the file to be analyzed when you run the agent. You could also get this data using other techniques such as reading an input file or by searching the Notes directory on a server of local machine. Analyzer Scripting Sample - Directory Contents Analyzer This agent illustrates how to gather the file information dynamically from a server and then call Analyzer. It shows how to match files by type. You could change this example to search for file names or directories that meet the criteria you supply.","title":"Analyzer Sample Agents"},{"location":"ja/analyzer/scriptsample/#analyzer-sample-agents","text":"You can find sample agents in the Teamstudio Reports template You can find sample agents in the Teamstudio Reports template tmslogs.ntf , which is provided with the product. Run them as provided to see how they work. They demonstrate how to call Analyzer dynamically, whether real-time or on a scheduled basis. As standard Notes agents coded in LotusScript, they have the same basic structure. First, they determine the files to be analyzed and the output analysis file to be created. Then they call an DeanAnalyze function to start Analyzer processing. The function calls pass the file and other necessary parameters. The Analyzer script library contains the constant and function definitions necessary to start Analyzer. You will likely want to change these agents to provide the pertinent file and path data. You can change, or copy and then change the agents. The script library and agents (with your modifications, if any) must be present in the database for which you will run the agent. Note Do not change the Declaration section as doing so may cause the script library to malfunction.","title":"Analyzer Sample Agents"},{"location":"ja/analyzer/scriptsample/#analyzer-scripting-sample-with-dialog","text":"This agent prompts you to enter the name of the input file and the analysis output file. It uses a hidden form, Analyzer Scripting Sample Dialog that has the alias AnalyzerDialog in a DialogBox call to retrieve the file data. You can use the function to supply the information about the file to be analyzed when you run the agent. You could also get this data using other techniques such as reading an input file or by searching the Notes directory on a server of local machine.","title":"Analyzer Scripting Sample with Dialog"},{"location":"ja/analyzer/scriptsample/#analyzer-scripting-sample-directory-contents-analyzer","text":"This agent illustrates how to gather the file information dynamically from a server and then call Analyzer. It shows how to match files by type. You could change this example to search for file names or directories that meet the criteria you supply.","title":"Analyzer Scripting Sample - Directory Contents Analyzer"},{"location":"ja/analyzer/scriptstringload/","text":"DEANStringLoadW32 Description Obtains the error message associated with any error code returned from other API functions. Syntax status = DEANStringLoadW32( <Status>, <Message>, <MessageBufferSize> ) Parameters Parameter Input/Output Type Description Status Input Long The numeric value returned by one of the DEANxxx functions. Message Output String This is a string that will receive the message text associated with the status code. MessageBufferSize Input Long This is the maximum size that the string should be. Example Dim szBuffer As String * 255 status = DEANAnalyzeW32 (...) DEANStringLoadW32 ( status , szBuffer , 255 ) strErr = Left $ ( szBuffer , Instr ( szBuffer , Chr ( 0 ) ) - 1 ) 'Convert the string to a LotusScript string MessageBox strErr","title":"DEANStringLoadW32"},{"location":"ja/analyzer/scriptstringload/#deanstringloadw32","text":"","title":"DEANStringLoadW32"},{"location":"ja/analyzer/scriptstringload/#description","text":"Obtains the error message associated with any error code returned from other API functions.","title":"Description"},{"location":"ja/analyzer/scriptstringload/#syntax","text":"status = DEANStringLoadW32( <Status>, <Message>, <MessageBufferSize> )","title":"Syntax"},{"location":"ja/analyzer/scriptstringload/#parameters","text":"Parameter Input/Output Type Description Status Input Long The numeric value returned by one of the DEANxxx functions. Message Output String This is a string that will receive the message text associated with the status code. MessageBufferSize Input Long This is the maximum size that the string should be.","title":"Parameters"},{"location":"ja/analyzer/scriptstringload/#example","text":"Dim szBuffer As String * 255 status = DEANAnalyzeW32 (...) DEANStringLoadW32 ( status , szBuffer , 255 ) strErr = Left $ ( szBuffer , Instr ( szBuffer , Chr ( 0 ) ) - 1 ) 'Convert the string to a LotusScript string MessageBox strErr","title":"Example"},{"location":"ja/analyzer/starting/","text":"Starting Analyzer To start Analyzer In Designer, open the database you want to analyze. Click the Analyzer button on the toolbar. You see the Teamstudio Analyzer window. On the Teamstudio Analyzer tab, enter the server name and file name of the analysis output database that will store the analysis of your database design. If the output database doesn't exist, you will be prompted to create it when Analyzer runs. When you click OK, Analyzer examines all design elements and stores the results in the database you have specified. You can use the Design Notes tab to tell Analyzer which design elements you want to analyze. See Using the Design Notes Tab . On the Audit tab, enable Auditor which tests your design elements against a pre-defined set of filters. See Auditing a Design . Typically, there is one analysis output database and one audit output database for each project. There may be a number of different database designs represented in each output database.You may organize the output databases differently. Note Design analysis databases become huge if they contain information about several database designs. If you select a large number of design elements for review by an audit run, the audit output database can also become quite large. Consider using more than one output database for analysis and/or audit runs, and decide in advance how to split design information among different output databases.","title":"Starting Analyzer"},{"location":"ja/analyzer/starting/#starting-analyzer","text":"To start Analyzer In Designer, open the database you want to analyze. Click the Analyzer button on the toolbar. You see the Teamstudio Analyzer window. On the Teamstudio Analyzer tab, enter the server name and file name of the analysis output database that will store the analysis of your database design. If the output database doesn't exist, you will be prompted to create it when Analyzer runs. When you click OK, Analyzer examines all design elements and stores the results in the database you have specified. You can use the Design Notes tab to tell Analyzer which design elements you want to analyze. See Using the Design Notes Tab . On the Audit tab, enable Auditor which tests your design elements against a pre-defined set of filters. See Auditing a Design . Typically, there is one analysis output database and one audit output database for each project. There may be a number of different database designs represented in each output database.You may organize the output databases differently. Note Design analysis databases become huge if they contain information about several database designs. If you select a large number of design elements for review by an audit run, the audit output database can also become quite large. Consider using more than one output database for analysis and/or audit runs, and decide in advance how to split design information among different output databases.","title":"Starting Analyzer"},{"location":"ja/analyzer/startinganalysis/","text":"Starting the Analysis After you specify the output database that Analyzer should use, optionally include or exclude design elements to analyze and optionally set up Auditor, click OK to start the analysis process. The database design analysis runs before the audit is performed. You see the Teamstudio Analyzer progress indicator that displays the name of each element as it is processed. When the analysis is complete, Analyzer opens the analysis output database you designated. Expand categories to reveal Analyzer's design element analysis documents within the categories. Note If you ran an audit, you will find the results in the audit output database rather than the analysis output database.","title":"Starting the Analysis"},{"location":"ja/analyzer/startinganalysis/#starting-the-analysis","text":"After you specify the output database that Analyzer should use, optionally include or exclude design elements to analyze and optionally set up Auditor, click OK to start the analysis process. The database design analysis runs before the audit is performed. You see the Teamstudio Analyzer progress indicator that displays the name of each element as it is processed. When the analysis is complete, Analyzer opens the analysis output database you designated. Expand categories to reveal Analyzer's design element analysis documents within the categories. Note If you ran an audit, you will find the results in the audit output database rather than the analysis output database.","title":"Starting the Analysis"},{"location":"ja/analyzer/viewing/","text":"Viewing Analysis With the many sorting categories Analyzer provides, you can view the design element information you need. So where do you begin? To get started, consider the recommended views and actions described in the following table. Goal What to View What to Do See where design elements are used View design element references Expand the corresponding design element category with the left navigator, and open the design element document. The references are listed at the end of the document. Go to the Design Aids view category and select the Dependencies view. This shows all design elements with dependencies by design element category. See Last Modified View all design element last modified dates The Design Aids category has several views to show the last modified dates See Default Access View the database access control list In the Analysis category, there is a subcategory for ACL analysis Check view columns for consistency View columns in views In the Objects by Name category, there is a view called Columns in views that shows several settings that can often be inconsistent. See subroutines in need of refactoring View the number of lines and parameters of agents In the design category, under Code and then Script Libraries, is a view called Subs that lists the number of lines of code and the number of variables declared. The largest numbers are the most complex subroutines and could be refactored. See everywhere a field is referenced Use the Field XRef folder Simply drag any field document (under Forms in Object by Name category) and drop it in the xRef folder. Then click the Add References button. Every design element that refers to that field will be included in the view.","title":"Viewing Analysis"},{"location":"ja/analyzer/viewing/#viewing-analysis","text":"With the many sorting categories Analyzer provides, you can view the design element information you need. So where do you begin? To get started, consider the recommended views and actions described in the following table. Goal What to View What to Do See where design elements are used View design element references Expand the corresponding design element category with the left navigator, and open the design element document. The references are listed at the end of the document. Go to the Design Aids view category and select the Dependencies view. This shows all design elements with dependencies by design element category. See Last Modified View all design element last modified dates The Design Aids category has several views to show the last modified dates See Default Access View the database access control list In the Analysis category, there is a subcategory for ACL analysis Check view columns for consistency View columns in views In the Objects by Name category, there is a view called Columns in views that shows several settings that can often be inconsistent. See subroutines in need of refactoring View the number of lines and parameters of agents In the design category, under Code and then Script Libraries, is a view called Subs that lists the number of lines of code and the number of variables declared. The largest numbers are the most complex subroutines and could be refactored. See everywhere a field is referenced Use the Field XRef folder Simply drag any field document (under Forms in Object by Name category) and drop it in the xRef folder. Then click the Add References button. Every design element that refers to that field will be included in the view.","title":"Viewing Analysis"},{"location":"ja/analyzer/views/","text":"Summary of Views The output database template includes the following groups of views: View Description All documents Shows all design elements in all databases in the output database. The view is sorted by database title. The hierarchy represents the hierarchy of the database design. The first column in the activity window shows the number (count) of objects within each category. Click the button to open the database, from which the analysis was taken, in a new Notes window. Design Shows views grouped by the same categories you see in Domino Designer. By Object Type Also includes the Field X-Ref view that shows where a particular field is used. Analysis Analytical views of design elements. Design Aids Views that help you understand the design. The Analysis Output Database Views","title":"Summary of Views"},{"location":"ja/analyzer/views/#summary-of-views","text":"The output database template includes the following groups of views: View Description All documents Shows all design elements in all databases in the output database. The view is sorted by database title. The hierarchy represents the hierarchy of the database design. The first column in the activity window shows the number (count) of objects within each category. Click the button to open the database, from which the analysis was taken, in a new Notes window. Design Shows views grouped by the same categories you see in Domino Designer. By Object Type Also includes the Field X-Ref view that shows where a particular field is used. Analysis Analytical views of design elements. Design Aids Views that help you understand the design.","title":"Summary of Views"},{"location":"ja/analyzer/views/#the-analysis-output-database-views","text":"","title":"The Analysis Output Database Views"},{"location":"ja/ciao/promotionpaths/","text":"Promotion Paths Promotion Paths define targets for moving source templates to new environments when Promoting a Database . Two types of CIAO! documents form the basis for building and promoting databases using CIAO!: Database Documents, also called CIAO! Configuration or \"Watch\" documents, define the \"source\" location - the source template of an application where development takes place. Promotion Paths define a \"target\" location - a server and path where the source template should be copied; build steps can then be run against this target to prepare it for release. Database Documents Configuration documents are created by CIAO! when a source database is placed under CIAO! control, as described in Using CIAO! For information on configuring database documents, see Understanding CIAO! Config Information . For promotions, CIAO! uses the Database Document to identify the source template which the build will copy and act on, and can be created: By choosing the CIAO! view menu button and choosing Add Database to add a source template that exists on a server. By launching the CIAO! client on a currently unwatched database, and following the prompts to begin watching the database. The second method will help ensure that all required fields are set accurately. Promotion Paths Promotion Paths specify a target location to \"promote\" a template. Promotion paths copy the source template to the target location, and run the child Build Steps against the new copy. Typically, a Promotion Path will include a child Build Step to refresh the design of one or more databases in the environment (e.g. QA, UAT, Production) where the template has been copied, or \"promoted.\" To create a Promotion Path, select the Database document that identifies the source template, and choose Create > Promotion Path . Build Steps Promotion Paths create or update a template in the target environment. By creating additional Build Steps for a promotion path, CIAO! can be configured to reliably prepare the template for deployment (for example, set the template name and sign design elements) and deploy it by refreshing the design of target databases. For more information, see Build Steps .","title":"Promotion Paths"},{"location":"ja/ciao/promotionpaths/#promotion-paths","text":"Promotion Paths define targets for moving source templates to new environments when Promoting a Database . Two types of CIAO! documents form the basis for building and promoting databases using CIAO!: Database Documents, also called CIAO! Configuration or \"Watch\" documents, define the \"source\" location - the source template of an application where development takes place. Promotion Paths define a \"target\" location - a server and path where the source template should be copied; build steps can then be run against this target to prepare it for release.","title":"Promotion Paths"},{"location":"ja/ciao/promotionpaths/#database-documents","text":"Configuration documents are created by CIAO! when a source database is placed under CIAO! control, as described in Using CIAO! For information on configuring database documents, see Understanding CIAO! Config Information . For promotions, CIAO! uses the Database Document to identify the source template which the build will copy and act on, and can be created: By choosing the CIAO! view menu button and choosing Add Database to add a source template that exists on a server. By launching the CIAO! client on a currently unwatched database, and following the prompts to begin watching the database. The second method will help ensure that all required fields are set accurately.","title":"Database Documents"},{"location":"ja/ciao/promotionpaths/#promotion-paths_1","text":"Promotion Paths specify a target location to \"promote\" a template. Promotion paths copy the source template to the target location, and run the child Build Steps against the new copy. Typically, a Promotion Path will include a child Build Step to refresh the design of one or more databases in the environment (e.g. QA, UAT, Production) where the template has been copied, or \"promoted.\" To create a Promotion Path, select the Database document that identifies the source template, and choose Create > Promotion Path .","title":"Promotion Paths"},{"location":"ja/ciao/promotionpaths/#build-steps","text":"Promotion Paths create or update a template in the target environment. By creating additional Build Steps for a promotion path, CIAO! can be configured to reliably prepare the template for deployment (for example, set the template name and sign design elements) and deploy it by refreshing the design of target databases. For more information, see Build Steps .","title":"Build Steps"},{"location":"ja/install/before/","text":"Before You Begin Review System Requirements Teamstudio Client has the following system requirements: Windows Vista, Windows 7, Windows 8 and Windows 10 versions supported by Notes on Intel platforms Note Microsoft has discontinued support for Windows XP and Windows Server 2003. Edition 32 is not supported on these platforms. Please contact your account manager if you have questions about running our tools on Windows XP or Windows Server 2003. Notes, in versions currently supported by HCL. Note Teamstudio Notes Tools typically work without issue on earlier versions of Notes, and technical support is available for customers on legacy versions of Notes. Teamstudio may not, however, be able to provide fixes for issues that are specific to unsupported versions of Notes. For more information on installing Teamstudio tools on earlier versions of Notes, contact techsupport@teamstudio.com . To verify your version of Notes is supported by HCL check HCL's Support Lifecycle Approximately 50 MB of hard disk drive space Sufficient RAM to run HCL Lotus Notes Sufficient Windows permissions to install software on your local machine. Teamstudio CIAO! Server has the following system requirements: Windows Server versions as supported by your version of Domino server 32bit & 64bit Domino Server versions as currently supported by HCL Teamstudio Profiler Server has the following system requirements: Windows Server versions as supported by your version of Domino server 32bit Domino Server versions as currently supported by HCL Note The Analyzer Filters database included in this release is deanfltr.ntf . If you are using deanfltr.ntf and have changed it in any way, you must save it to another file name before you install this release. Otherwise, you will lose your changes or customizations. To upgrade your filters database: Make a copy of your current Analyzer Filters Database ( deanfltr.nsf or deanfltr.ntf ). Create a new database ( File > Database > New ) and name it deanfltr.nsf and then select the Analyzer Filters Template from the template box. Click Yes when Notes asks you if you want to overwrite the existing one. (It\u2019s ok, you\u2019ve made a copy.) Copy all your custom filters from your old database into this new database.","title":"Before You Begin"},{"location":"ja/install/before/#before-you-begin","text":"","title":"Before You Begin"},{"location":"ja/install/before/#review-system-requirements","text":"Teamstudio Client has the following system requirements: Windows Vista, Windows 7, Windows 8 and Windows 10 versions supported by Notes on Intel platforms Note Microsoft has discontinued support for Windows XP and Windows Server 2003. Edition 32 is not supported on these platforms. Please contact your account manager if you have questions about running our tools on Windows XP or Windows Server 2003. Notes, in versions currently supported by HCL. Note Teamstudio Notes Tools typically work without issue on earlier versions of Notes, and technical support is available for customers on legacy versions of Notes. Teamstudio may not, however, be able to provide fixes for issues that are specific to unsupported versions of Notes. For more information on installing Teamstudio tools on earlier versions of Notes, contact techsupport@teamstudio.com . To verify your version of Notes is supported by HCL check HCL's Support Lifecycle Approximately 50 MB of hard disk drive space Sufficient RAM to run HCL Lotus Notes Sufficient Windows permissions to install software on your local machine. Teamstudio CIAO! Server has the following system requirements: Windows Server versions as supported by your version of Domino server 32bit & 64bit Domino Server versions as currently supported by HCL Teamstudio Profiler Server has the following system requirements: Windows Server versions as supported by your version of Domino server 32bit Domino Server versions as currently supported by HCL Note The Analyzer Filters database included in this release is deanfltr.ntf . If you are using deanfltr.ntf and have changed it in any way, you must save it to another file name before you install this release. Otherwise, you will lose your changes or customizations. To upgrade your filters database: Make a copy of your current Analyzer Filters Database ( deanfltr.nsf or deanfltr.ntf ). Create a new database ( File > Database > New ) and name it deanfltr.nsf and then select the Analyzer Filters Template from the template box. Click Yes when Notes asks you if you want to overwrite the existing one. (It\u2019s ok, you\u2019ve made a copy.) Copy all your custom filters from your old database into this new database.","title":"Review System Requirements"},{"location":"ja/install/ciao/","text":"CIAO! Special Instructions If you are installing CIAO! Client Edition, first use the instructions described earlier for your version of Notes. Then follow these additional steps. Installation Procedure If this is the first time you have installed CIAO! Client Edition for this workgroup, you must create a CIAO! configuration database. The CIAO! configuration database should be on the same server as your database designs. To install CIAO! for a workgroup (rather than for a single user), create this database on a Notes/Domino server that can be accessed by all members of the workgroup. Give the new database the name: ciao\\ciaoconfig.nsf Base the design on the CIAO! Configuration template ( ciao.ntf ). Select the Inherit future design changes check box. Click OK to create. Although you normally create these databases on a Notes server, you can optionally create them locally (for example, for testing.) After Installation of an Update After installing an update to Teamstudio products, you must refresh the design of your CIAO! Configuration and Log databases that were created by prior release templates. To Refresh Your Database's Design Select your database from the Notes Workspace or open it. Click File > Application > Refresh Design . Select your server. Then, click OK . You see a message informing you about potential effects of the refresh and asking you to confirm. Click Yes . The designs of your CIAO! Configuration and Log databases have been updated to the latest design templates.","title":"CIAO! Special Instructions"},{"location":"ja/install/ciao/#ciao-special-instructions","text":"If you are installing CIAO! Client Edition, first use the instructions described earlier for your version of Notes. Then follow these additional steps.","title":"CIAO! Special Instructions"},{"location":"ja/install/ciao/#installation-procedure","text":"If this is the first time you have installed CIAO! Client Edition for this workgroup, you must create a CIAO! configuration database. The CIAO! configuration database should be on the same server as your database designs. To install CIAO! for a workgroup (rather than for a single user), create this database on a Notes/Domino server that can be accessed by all members of the workgroup. Give the new database the name: ciao\\ciaoconfig.nsf Base the design on the CIAO! Configuration template ( ciao.ntf ). Select the Inherit future design changes check box. Click OK to create. Although you normally create these databases on a Notes server, you can optionally create them locally (for example, for testing.)","title":"Installation Procedure"},{"location":"ja/install/ciao/#after-installation-of-an-update","text":"After installing an update to Teamstudio products, you must refresh the design of your CIAO! Configuration and Log databases that were created by prior release templates.","title":"After Installation of an Update"},{"location":"ja/install/ciao/#to-refresh-your-databases-design","text":"Select your database from the Notes Workspace or open it. Click File > Application > Refresh Design . Select your server. Then, click OK . You see a message informing you about potential effects of the refresh and asking you to confirm. Click Yes . The designs of your CIAO! Configuration and Log databases have been updated to the latest design templates.","title":"To Refresh Your Database's Design"},{"location":"ja/install/client/","text":"Installing on the Notes Client Introduction Client-based modules include: Analyzer CIAO! Client Edition Configurator Delta Design Manager Profiler Undo Validator You install client tools on each developer's workstation. If you are using them, you should first install the CIAO! and Profiler server components on a Notes/Domino server. See Install Server-based Modules for details. Windows Installer Beginning with Edition 32, the Notes Tools installer utilizes Windows Installer. This offers a more conventional installation experience than earlier versions and replaces the Widget Installers and the beta MSI installers from E31.1. Installation Verify that the system you are installing on meets the system requirements in the Before You Begin section. Download the Notes Tools installer from the Download Page . Close and exit all Notes client processes (Notes, Designer, Admin, etc.). Launch the downloaded \"Notes Tools.exe\" installer, and follow the instructions in the installation wizard. The installation wizard will allow you to confirm the location of the Notes client install, and choose which tools in the suite to install. The installation utilizes artifacts from the Notes client installation and can encounter issues if Notes has been moved or upgraded in certain ways. If you experience errors during installation, contact techsupport@teamstudio.com for guidance on how to resolve installation issues. Note If you previously installed a beta release with the same major and minor version number as the version you are installing, you must remove the existing install first, via the Windows Control Panel's \"Add or Remove Programs\" feature. If you installed the tools using the E31.1 beta MSI installers, we recommend removing the tools via the Windows Control Panel before installing E32. The E32 installer will upgrade your tools in any case, but it is not able to remove the old Control Panel entries. In all other cases, the E32 installer should be able to upgrade your existing installation. Installation Changes in E32 The tools are no longer installed using widgets. The installer will attempt to remove previous widgets as part of the upgrade process. The client tools are no longer installed to the Notes program directory. They are now installed, by default, to C:\\Program Files (x86)\\Teamstudio\\Notes Tools\\bin and this directory is added to the current user's PATH. No files are installed to the Notes program directory. Note If you are upgrading from an older version of the tools, the E32 installer needs to remove any old Teamstudio files from the Notes program directory. If you are running Notes from a file server, you will need write access to that directory for the initial E32 install. Subsequent upgrades will no longer write to the Notes program directory. A single installer now handles the installation of all products. This means that all products from E32 onwards must be upgraded together. So when you upgrade to E32.1, for example, you cannot upgrade just Teamstudio Analyzer and leave Teamstudio Configurator at E32. This only applies to E32 and above - it is possible to retain, say, E31.1 of Teamstudio Analyzer and install E32 of Teamstudio Configurator. While rare, if you need to downgrade to an older version, you will need to uninstall all products and then reinstall the older version. It is no longer necessary to remove older versions before upgrading. The installer will automatically remove previous versions as part of the installation process. All installation directories are now configurable. The installer will attempt to find your Notes program directory, data directory and notes.ini location but you can modify them if you have a complex configuration that the installer does not correctly recognize. You can also change the directory in which the Teamstudio tools are installed, although this is not recommended.","title":"Installing on the Notes Client"},{"location":"ja/install/client/#installing-on-the-notes-client","text":"","title":"Installing on the Notes Client"},{"location":"ja/install/client/#introduction","text":"Client-based modules include: Analyzer CIAO! Client Edition Configurator Delta Design Manager Profiler Undo Validator You install client tools on each developer's workstation. If you are using them, you should first install the CIAO! and Profiler server components on a Notes/Domino server. See Install Server-based Modules for details.","title":"Introduction"},{"location":"ja/install/client/#windows-installer","text":"Beginning with Edition 32, the Notes Tools installer utilizes Windows Installer. This offers a more conventional installation experience than earlier versions and replaces the Widget Installers and the beta MSI installers from E31.1.","title":"Windows Installer"},{"location":"ja/install/client/#installation","text":"Verify that the system you are installing on meets the system requirements in the Before You Begin section. Download the Notes Tools installer from the Download Page . Close and exit all Notes client processes (Notes, Designer, Admin, etc.). Launch the downloaded \"Notes Tools.exe\" installer, and follow the instructions in the installation wizard. The installation wizard will allow you to confirm the location of the Notes client install, and choose which tools in the suite to install. The installation utilizes artifacts from the Notes client installation and can encounter issues if Notes has been moved or upgraded in certain ways. If you experience errors during installation, contact techsupport@teamstudio.com for guidance on how to resolve installation issues. Note If you previously installed a beta release with the same major and minor version number as the version you are installing, you must remove the existing install first, via the Windows Control Panel's \"Add or Remove Programs\" feature. If you installed the tools using the E31.1 beta MSI installers, we recommend removing the tools via the Windows Control Panel before installing E32. The E32 installer will upgrade your tools in any case, but it is not able to remove the old Control Panel entries. In all other cases, the E32 installer should be able to upgrade your existing installation.","title":"Installation"},{"location":"ja/install/client/#installation-changes-in-e32","text":"The tools are no longer installed using widgets. The installer will attempt to remove previous widgets as part of the upgrade process. The client tools are no longer installed to the Notes program directory. They are now installed, by default, to C:\\Program Files (x86)\\Teamstudio\\Notes Tools\\bin and this directory is added to the current user's PATH. No files are installed to the Notes program directory. Note If you are upgrading from an older version of the tools, the E32 installer needs to remove any old Teamstudio files from the Notes program directory. If you are running Notes from a file server, you will need write access to that directory for the initial E32 install. Subsequent upgrades will no longer write to the Notes program directory. A single installer now handles the installation of all products. This means that all products from E32 onwards must be upgraded together. So when you upgrade to E32.1, for example, you cannot upgrade just Teamstudio Analyzer and leave Teamstudio Configurator at E32. This only applies to E32 and above - it is possible to retain, say, E31.1 of Teamstudio Analyzer and install E32 of Teamstudio Configurator. While rare, if you need to downgrade to an older version, you will need to uninstall all products and then reinstall the older version. It is no longer necessary to remove older versions before upgrading. The installer will automatically remove previous versions as part of the installation process. All installation directories are now configurable. The installer will attempt to find your Notes program directory, data directory and notes.ini location but you can modify them if you have a complex configuration that the installer does not correctly recognize. You can also change the directory in which the Teamstudio tools are installed, although this is not recommended.","title":"Installation Changes in E32"},{"location":"ja/install/icons/","text":"About Teamstudio Icons When Notes 8.0.x has restarted, you should see the Teamstudio SmartIcon(s) installed on your SmartIcon Toolbar. When Notes 8.5.1 or above has restarted, you should see the Teamstudio Icon(s) installed on your Java toolbar. Note that Teamstudio SmartIcons that were installed from a previous version will still appear on your Smarticon toolbar. Any of the Teamstudio icons will run the latest Teamstudio software you installed.","title":"About Teamstudio Icons"},{"location":"ja/install/icons/#about-teamstudio-icons","text":"When Notes 8.0.x has restarted, you should see the Teamstudio SmartIcon(s) installed on your SmartIcon Toolbar. When Notes 8.5.1 or above has restarted, you should see the Teamstudio Icon(s) installed on your Java toolbar. Note that Teamstudio SmartIcons that were installed from a previous version will still appear on your Smarticon toolbar. Any of the Teamstudio icons will run the latest Teamstudio software you installed.","title":"About Teamstudio Icons"},{"location":"ja/install/initializing/","text":"Initializing Teamstudio Tools Each Teamstudio client product is protected by a serial number and key. You must configure each Teamstudio client product before you can use it. You will receive a serial number and key pair with each Teamstudio client license that you purchase. To initialize Teamstudio client products From Designer, click the icon for the tool you want to initialize. You see a Serial Number dialog. Enter the serial number (in this format xx-xxxxx) and key for the product (in this format xxxxx-xxxxx-xxxxxx). You are prompted for this information once for each product, the first time you run the product. Click OK . The Teamstudio product you selected starts immediately. If you cannot remember the serial number and key, or do not have the information on hand, please contact Teamstudio. If you are prompted for the information again after entering it, you likely entered an incorrect serial number or key. Review, confirm, and re-enter the serial number and key. If the system does not start, contact Teamstudio. Note The letters I and L are interchangeable with the number 1; the letter O is interchangeable with the digit 0 and the letter S is interchangeable with the number 5.","title":"Initializing Teamstudio Tools"},{"location":"ja/install/initializing/#initializing-teamstudio-tools","text":"Each Teamstudio client product is protected by a serial number and key. You must configure each Teamstudio client product before you can use it. You will receive a serial number and key pair with each Teamstudio client license that you purchase.","title":"Initializing Teamstudio Tools"},{"location":"ja/install/initializing/#to-initialize-teamstudio-client-products","text":"From Designer, click the icon for the tool you want to initialize. You see a Serial Number dialog. Enter the serial number (in this format xx-xxxxx) and key for the product (in this format xxxxx-xxxxx-xxxxxx). You are prompted for this information once for each product, the first time you run the product. Click OK . The Teamstudio product you selected starts immediately. If you cannot remember the serial number and key, or do not have the information on hand, please contact Teamstudio. If you are prompted for the information again after entering it, you likely entered an incorrect serial number or key. Review, confirm, and re-enter the serial number and key. If the system does not start, contact Teamstudio. Note The letters I and L are interchangeable with the number 1; the letter O is interchangeable with the digit 0 and the letter S is interchangeable with the number 5.","title":"To initialize Teamstudio client products"},{"location":"ja/install/removing/","text":"Removing Teamstudio Tools The tools installation can be removed or modified via the Windows Control Panel \"Add or Remove Programs\" feature, under \"Notes Tools.\" Note For information on removing versions prior to Edition 32, contact techsupport@teamstudio.com.","title":"Removing Teamstudio Tools"},{"location":"ja/install/removing/#removing-teamstudio-tools","text":"The tools installation can be removed or modified via the Windows Control Panel \"Add or Remove Programs\" feature, under \"Notes Tools.\" Note For information on removing versions prior to Edition 32, contact techsupport@teamstudio.com.","title":"Removing Teamstudio Tools"},{"location":"ja/install/running/","text":"Running Teamstudio Products You can access Teamstudio products without using the icons, by using the following executable files. File Product ndean.exe Analyzer nciao.exe CIAO! nconfy.exe Configurator ndelta.exe Delta nlibr.exe Design Manager nprofile.exe Profiler nundo.exe Undo nvalidator.exe Validator You can start the products From the Microsoft Windows Command prompt. From a new shortcut you create on your desktop. For example, to launch CIAO! on a particular database, specify in a command line: nciao database where database is one of Server/Domain!!database , Server!!database or database .","title":"Running Teamstudio Products"},{"location":"ja/install/running/#running-teamstudio-products","text":"You can access Teamstudio products without using the icons, by using the following executable files. File Product ndean.exe Analyzer nciao.exe CIAO! nconfy.exe Configurator ndelta.exe Delta nlibr.exe Design Manager nprofile.exe Profiler nundo.exe Undo nvalidator.exe Validator You can start the products From the Microsoft Windows Command prompt. From a new shortcut you create on your desktop. For example, to launch CIAO! on a particular database, specify in a command line: nciao database where database is one of Server/Domain!!database , Server!!database or database .","title":"Running Teamstudio Products"},{"location":"ja/install/server/","text":"Install Server-Based Modules Optionally, you can install CIAO! and Profiler Server Editions onto each Domino server. Server Tool Why Install? CIAO! Server Provides additional features, for example, preventing design changes made by any process or by someone other than the developer who checked the design element out. Profiler Server Tests the performance activity of a scheduled agent or a web agent. Windows Installation Procedure Before you begin, make sure of the following: You have purchased a license for each server you want to install on. CIAO! and/or Profiler Server Editions are licensed per Domino server. To install CIAO! Server Edition Copy the files: Put nhkciao.dll into the server's exe directory (same as nserver.exe) Put ciaologf.ntf and ciao.ntf into the data directory. From a notes client create the following databases on the server using the templates on that server. CIAO\\CIAOConfig.nsf (Template: Teamstudio CIAO! Configuration) CIAO\\CIAOLog.nsf (Template: Teamstudio CIAO! Log File) Add the serial key: Create a file called teamstudio.ini in the data directory of the server. Add the following lines: [CIAO] HKCIAOKey=xxxxx-xxxxx-xxxxx,xx-xxxxx CIAOConfigDb=CIAO\\CIAOConfig.nsf replacing the xxx with your license followed by a comma and your serial number. Edit your notes.ini to add/modify the following line: NSF_HOOKS=hkciao Restart the Domino server. If you see lines similar to this: CIAO Server Hook started - (SERVER). (HKCIAO Edition 33 build xxxxx) CIAO Server Hook: Using Configuration File: CIAO\\CIAOConfig.nsf then you know that CIAO Server Edition is running. To install Profiler Server Edition Copy the files: Put nhkprofile.dll into the server's exe directory (same as nserver.exe) Put profile.ntf and tmslogs.ntf into the data directory. From a Notes client create the following database on the server using the template on that server. Teamstudio\\ProfilerConfig.nsf (Template: Teamstudio Profiler Configuration) Add the serial key as follows: Create a file called teamstudio.ini in the data directory of the server. Add the following lines: [Profiler] HKPROFKey=xxxxx-xxxxx-xxxxx,xx-xxxxx ProfilerServerConfig=Teamstudio\\ProfilerConfig.nsf replacing the xxx with your license followed by a comma and your serial number. Edit your notes.ini to add/modify the following line: NSF_HOOKS=hkprofile Restart the Domino server. If you see lines like the following, then you know that Profiler Server Edition is running: (namgr) - Profiler Server Hook started. (HKPROFILE Edition 33 build xxxxx) Profiler Server Hook: Using Configuration File: Teamstudio\\ProfilerConfig.nsf","title":"Install Server-Based Modules"},{"location":"ja/install/server/#install-server-based-modules","text":"Optionally, you can install CIAO! and Profiler Server Editions onto each Domino server. Server Tool Why Install? CIAO! Server Provides additional features, for example, preventing design changes made by any process or by someone other than the developer who checked the design element out. Profiler Server Tests the performance activity of a scheduled agent or a web agent.","title":"Install Server-Based Modules"},{"location":"ja/install/server/#windows-installation-procedure","text":"Before you begin, make sure of the following: You have purchased a license for each server you want to install on. CIAO! and/or Profiler Server Editions are licensed per Domino server.","title":"Windows Installation Procedure"},{"location":"ja/install/server/#to-install-ciao-server-edition","text":"Copy the files: Put nhkciao.dll into the server's exe directory (same as nserver.exe) Put ciaologf.ntf and ciao.ntf into the data directory. From a notes client create the following databases on the server using the templates on that server. CIAO\\CIAOConfig.nsf (Template: Teamstudio CIAO! Configuration) CIAO\\CIAOLog.nsf (Template: Teamstudio CIAO! Log File) Add the serial key: Create a file called teamstudio.ini in the data directory of the server. Add the following lines: [CIAO] HKCIAOKey=xxxxx-xxxxx-xxxxx,xx-xxxxx CIAOConfigDb=CIAO\\CIAOConfig.nsf replacing the xxx with your license followed by a comma and your serial number. Edit your notes.ini to add/modify the following line: NSF_HOOKS=hkciao Restart the Domino server. If you see lines similar to this: CIAO Server Hook started - (SERVER). (HKCIAO Edition 33 build xxxxx) CIAO Server Hook: Using Configuration File: CIAO\\CIAOConfig.nsf then you know that CIAO Server Edition is running.","title":"To install CIAO! Server Edition"},{"location":"ja/install/server/#to-install-profiler-server-edition","text":"Copy the files: Put nhkprofile.dll into the server's exe directory (same as nserver.exe) Put profile.ntf and tmslogs.ntf into the data directory. From a Notes client create the following database on the server using the template on that server. Teamstudio\\ProfilerConfig.nsf (Template: Teamstudio Profiler Configuration) Add the serial key as follows: Create a file called teamstudio.ini in the data directory of the server. Add the following lines: [Profiler] HKPROFKey=xxxxx-xxxxx-xxxxx,xx-xxxxx ProfilerServerConfig=Teamstudio\\ProfilerConfig.nsf replacing the xxx with your license followed by a comma and your serial number. Edit your notes.ini to add/modify the following line: NSF_HOOKS=hkprofile Restart the Domino server. If you see lines like the following, then you know that Profiler Server Edition is running: (namgr) - Profiler Server Hook started. (HKPROFILE Edition 33 build xxxxx) Profiler Server Hook: Using Configuration File: Teamstudio\\ProfilerConfig.nsf","title":"To install Profiler Server Edition"},{"location":"ja/install/trouble/","text":"Troubleshooting The following table shows some common installation problems and how to handle them. Problem/Error What to do If you try to add or remove Teamstudio tools with Notes running, you may see a message that files are in use. If you choose to terminate Notes, you may get a message that the installer is unable to terminate Notes. You can safely ignore this message which is coming from Windows Installer. You will be prompted later in the install to shut down Notes and this second attempt will be successful. After installing Profiler, you see an error that NNOTES.dll cannot be found when you try to open a .tps file. This problem can occur because nprofile.exe, the file that opens .tps files, is no longer in the Notes program directory and thus can no longer locate the Notes dlls it needs. To fix the error, add the Notes program directory to your Windows path.","title":"Troubleshooting"},{"location":"ja/install/trouble/#troubleshooting","text":"The following table shows some common installation problems and how to handle them. Problem/Error What to do If you try to add or remove Teamstudio tools with Notes running, you may see a message that files are in use. If you choose to terminate Notes, you may get a message that the installer is unable to terminate Notes. You can safely ignore this message which is coming from Windows Installer. You will be prompted later in the install to shut down Notes and this second attempt will be successful. After installing Profiler, you see an error that NNOTES.dll cannot be found when you try to open a .tps file. This problem can occur because nprofile.exe, the file that opens .tps files, is no longer in the Notes program directory and thus can no longer locate the Notes dlls it needs. To fix the error, add the Notes program directory to your Windows path.","title":"Troubleshooting"},{"location":"ja/profiler/","text":"Profiler Overview Teamstudio Profiler helps identify the LotusScript performance issues of Notes applications. Lots of things can impact the performance of Notes applications. One area which often causes performance problems is poorly written LotusScript code. This type of problem can be difficult to pinpoint. Troubleshooting is time-consuming and error-prone. When you use Profiler, you remove much of the \u201cguess-work\u201d from troubleshooting.","title":"Profiler Overview"},{"location":"ja/profiler/#profiler-overview","text":"Teamstudio Profiler helps identify the LotusScript performance issues of Notes applications. Lots of things can impact the performance of Notes applications. One area which often causes performance problems is poorly written LotusScript code. This type of problem can be difficult to pinpoint. Troubleshooting is time-consuming and error-prone. When you use Profiler, you remove much of the \u201cguess-work\u201d from troubleshooting.","title":"Profiler Overview"},{"location":"ja/profiler/calltree/","text":"Using the Call Tree You can also use the Call Tree to investigate your results. The Call Tree gives you a different way to look at the functions called while Profiler ran. To use the Call Tree Click View > Call Tree . You see the Calls window. Select a function and click the Show Function button to automatically highlight that function in the main results pane. Select the Combine Children check box so that similar calls appear in the Calls window as a single entry. This feature simplifies the tree. For example, if you have a loop that calls a particular function hundreds of times, the call tree will only show that function once. If you uncheck the box, all function calls will appear in the tree even if they are duplicates. When you are finished with your investigation, click Close . Profiler will ask if you want to save the file. After you specify where to save it, it is saved as a Profiler snapshot (.tps file). You can also click File > Save As to save your report.","title":"Using the Call Tree"},{"location":"ja/profiler/calltree/#using-the-call-tree","text":"You can also use the Call Tree to investigate your results. The Call Tree gives you a different way to look at the functions called while Profiler ran.","title":"Using the Call Tree"},{"location":"ja/profiler/calltree/#to-use-the-call-tree","text":"Click View > Call Tree . You see the Calls window. Select a function and click the Show Function button to automatically highlight that function in the main results pane. Select the Combine Children check box so that similar calls appear in the Calls window as a single entry. This feature simplifies the tree. For example, if you have a loop that calls a particular function hundreds of times, the call tree will only show that function once. If you uncheck the box, all function calls will appear in the tree even if they are duplicates. When you are finished with your investigation, click Close . Profiler will ask if you want to save the file. After you specify where to save it, it is saved as a Profiler snapshot (.tps file). You can also click File > Save As to save your report.","title":"To use the Call Tree"},{"location":"ja/profiler/client/","text":"Using Profiler Client To use Profiler client, you run Profiler with your application, and then you review the results. Some circumstances are especially appropriate times to run Profiler. When to use Profiler At the end of a development cycle, as part of final QA, where the code is stable, yet would benefit from performance improvements If you have assumed responsibility for older HCL Lotus Notes or Domino applications that would benefit from performance improvements, as opposed to additional, costly hardware upgrades If you have been assigned to maintain older applications, with which you are unfamiliar","title":"Using Profiler Client"},{"location":"ja/profiler/client/#using-profiler-client","text":"To use Profiler client, you run Profiler with your application, and then you review the results. Some circumstances are especially appropriate times to run Profiler.","title":"Using Profiler Client"},{"location":"ja/profiler/client/#when-to-use-profiler","text":"At the end of a development cycle, as part of final QA, where the code is stable, yet would benefit from performance improvements If you have assumed responsibility for older HCL Lotus Notes or Domino applications that would benefit from performance improvements, as opposed to additional, costly hardware upgrades If you have been assigned to maintain older applications, with which you are unfamiliar","title":"When to use Profiler"},{"location":"ja/profiler/configuration/","text":"Profiler Configuration Database Before you can use Profiler on the server, you must create a Profiler Configuration database. To create a Profiler configuration database Install Profiler on your server. From a Notes client, click File > Application > New . You see the New Application window. From the Server dropdown in the Specify New Application section, select the server you just installed to. In the Title box, enter the title you want. In the File Name box, enter Teamstudio\\ProfilerConfig.nsf. From the Server dropdown in the Specify template for New Application section, select the server you just installed to. From the template list, select Teamstudio Profiler Configuration (profile.ntf). Make sure that Inherit future design changes check box is selected. Click OK . Your Profiler configuration database has been created. To profile selected agents Open the Profiler configuration database. Click Create Agent Config Doc to add an agent to be profiled. You see the Select agent to profile window. Click the Browse button to select a database to monitor. Note You must select a database on the same server as the Profiler configuration database. Click the Get Agents button to view all the agents in the database. Use the dropdown to select an agent from the database. Note Only LotusScript agents will be listed. Click Select Agent to select an agent. You see information about the agent you selected. Click OK . The next time the agent runs, Profiler will collect timing information and create a document in the Profiler Log database on the server. The Configuration Document The following configuration information is provided in this document: Information Description Enabled Select Yes or No to enable or disable Profiler from monitoring this agent. Agent The name of the agent. Run Count Specify how many times Profiler should collect information on an agent. Profiled Runs The number of times the agent has been run since this was set or reset. Options Specify an option, as selected on the Profiler window: Function Entry Points - collect information on function entry points Functions and Lines - collect information on functions and lines of LotusScript Functions - collect information on functions User Profiler will only run when the agent is triggered by a particular user. Agent Signer The ID file used to sign agents. This is only required when run on an R5 server. Agent Signer Password The password for the attached ID. Note : This field is not encrypted and is stored as plain text. Note Agent Signer and Agent Signer Password in the above table have some restrictions. When running on a Notes Release 6 server, these fields can be ignored. Profiler server runs using the Server ID. On Release 6, code signed by the server ID is allowed to run unrestricted. Signing with a special ID is unnecessary. On Release 5, however, the server is not granted these rights by default. After Profiler modifies and resigns code, the server may not be able to execute it. To avoid this problem, use one of the following options: Add the server name to the Run unrestricted LotusScript agents field on the server configuration document. Add the signer ID to the agent configuration document.","title":"Profiler Configuration Database"},{"location":"ja/profiler/configuration/#profiler-configuration-database","text":"Before you can use Profiler on the server, you must create a Profiler Configuration database.","title":"Profiler Configuration Database"},{"location":"ja/profiler/configuration/#to-create-a-profiler-configuration-database","text":"Install Profiler on your server. From a Notes client, click File > Application > New . You see the New Application window. From the Server dropdown in the Specify New Application section, select the server you just installed to. In the Title box, enter the title you want. In the File Name box, enter Teamstudio\\ProfilerConfig.nsf. From the Server dropdown in the Specify template for New Application section, select the server you just installed to. From the template list, select Teamstudio Profiler Configuration (profile.ntf). Make sure that Inherit future design changes check box is selected. Click OK . Your Profiler configuration database has been created.","title":"To create a Profiler configuration database"},{"location":"ja/profiler/configuration/#to-profile-selected-agents","text":"Open the Profiler configuration database. Click Create Agent Config Doc to add an agent to be profiled. You see the Select agent to profile window. Click the Browse button to select a database to monitor. Note You must select a database on the same server as the Profiler configuration database. Click the Get Agents button to view all the agents in the database. Use the dropdown to select an agent from the database. Note Only LotusScript agents will be listed. Click Select Agent to select an agent. You see information about the agent you selected. Click OK . The next time the agent runs, Profiler will collect timing information and create a document in the Profiler Log database on the server.","title":"To profile selected agents"},{"location":"ja/profiler/configuration/#the-configuration-document","text":"The following configuration information is provided in this document: Information Description Enabled Select Yes or No to enable or disable Profiler from monitoring this agent. Agent The name of the agent. Run Count Specify how many times Profiler should collect information on an agent. Profiled Runs The number of times the agent has been run since this was set or reset. Options Specify an option, as selected on the Profiler window: Function Entry Points - collect information on function entry points Functions and Lines - collect information on functions and lines of LotusScript Functions - collect information on functions User Profiler will only run when the agent is triggered by a particular user. Agent Signer The ID file used to sign agents. This is only required when run on an R5 server. Agent Signer Password The password for the attached ID. Note : This field is not encrypted and is stored as plain text. Note Agent Signer and Agent Signer Password in the above table have some restrictions. When running on a Notes Release 6 server, these fields can be ignored. Profiler server runs using the Server ID. On Release 6, code signed by the server ID is allowed to run unrestricted. Signing with a special ID is unnecessary. On Release 5, however, the server is not granted these rights by default. After Profiler modifies and resigns code, the server may not be able to execute it. To avoid this problem, use one of the following options: Add the server name to the Run unrestricted LotusScript agents field on the server configuration document. Add the signer ID to the agent configuration document.","title":"The Configuration Document"},{"location":"ja/profiler/log/","text":"Profiler Log Database To view Profiler Log information Open the Profiler log database. The red icon in the Time column indicates that Profiler encountered an error that prevented it from running on the selected code. Open a document to view more details. Click the View Results button at the top of the form. This launches Profiler to view the attached results. Note Profiler Client must be installed. You can also save the attachment to your hard drive, launch Profiler from your Notes client and click **File > Open** to open the file.","title":"Profiler Log Database"},{"location":"ja/profiler/log/#profiler-log-database","text":"","title":"Profiler Log Database"},{"location":"ja/profiler/log/#to-view-profiler-log-information","text":"Open the Profiler log database. The red icon in the Time column indicates that Profiler encountered an error that prevented it from running on the selected code. Open a document to view more details. Click the View Results button at the top of the form. This launches Profiler to view the attached results. Note Profiler Client must be installed. You can also save the attachment to your hard drive, launch Profiler from your Notes client and click **File > Open** to open the file.","title":"To view Profiler Log information"},{"location":"ja/profiler/results/","text":"Reviewing Profiler Results The Total Time field reports the number of seconds that your application ran. Seconds are the default units of time. Click View > Units to change from seconds to milliseconds, or milliseconds to seconds. Click a column heading to sort by that column. The pane at the top shows the list of functions that were running during Profiler's collection interval and information about those functions. Column Description Fn The function name. Calls The number of times the function was called. Time + Children The combined time including the time the function took plus the time its child functions took to execute. Time The time the function took. % Parent The percentage of total time that the function took to run in relation to the calling function. Average The average time the function took to run once. Average + Children The average time taken by the function and its children for each call ((time + children)/calls). Element The name of the design element in which the code is located. Item The name of the NoteItem in which the code is located. Profiler uses the following naming convention to represent classes and methods: <class name>::<method name> To work with Profiler Results In the upper pane, select a function you want to investigate further. You see more detailed information in the lower pane, with the Children tab selected by default. The function selected in the Summary pane called the functions listed in the Children tab. In the example, the `FINDPERSON` function called the three child functions listed: FINDPERSONSLOWLY1 FINDPERSONSLOWLY2 FINDPERSONQUICKLY The first two child functions took most of the FINDPERSON function's time, which may warrant further investigation. Note Child functions do not include LotusScript language functions such as Print or Message Box. They also do not include Product Classes such as NotesDocument or NotesDatabase. Time in the Detail pane is relative to the Parent function's time. Double-click a function on the Children tab to view information about its child functions. Use the arrow buttons at the top of the Children tab to go between levels of child functions. Click the Source tab to view LotusScript source. The example shows that line number 2 took the most time.","title":"Reviewing Profiler Results"},{"location":"ja/profiler/results/#reviewing-profiler-results","text":"The Total Time field reports the number of seconds that your application ran. Seconds are the default units of time. Click View > Units to change from seconds to milliseconds, or milliseconds to seconds. Click a column heading to sort by that column. The pane at the top shows the list of functions that were running during Profiler's collection interval and information about those functions. Column Description Fn The function name. Calls The number of times the function was called. Time + Children The combined time including the time the function took plus the time its child functions took to execute. Time The time the function took. % Parent The percentage of total time that the function took to run in relation to the calling function. Average The average time the function took to run once. Average + Children The average time taken by the function and its children for each call ((time + children)/calls). Element The name of the design element in which the code is located. Item The name of the NoteItem in which the code is located. Profiler uses the following naming convention to represent classes and methods: <class name>::<method name>","title":"Reviewing Profiler Results"},{"location":"ja/profiler/results/#to-work-with-profiler-results","text":"In the upper pane, select a function you want to investigate further. You see more detailed information in the lower pane, with the Children tab selected by default. The function selected in the Summary pane called the functions listed in the Children tab. In the example, the `FINDPERSON` function called the three child functions listed: FINDPERSONSLOWLY1 FINDPERSONSLOWLY2 FINDPERSONQUICKLY The first two child functions took most of the FINDPERSON function's time, which may warrant further investigation. Note Child functions do not include LotusScript language functions such as Print or Message Box. They also do not include Product Classes such as NotesDocument or NotesDatabase. Time in the Detail pane is relative to the Parent function's time. Double-click a function on the Children tab to view information about its child functions. Use the arrow buttons at the top of the Children tab to go between levels of child functions. Click the Source tab to view LotusScript source. The example shows that line number 2 took the most time.","title":"To work with Profiler Results"},{"location":"ja/profiler/running/","text":"Running Profiler To run Profiler with your application, you select your target database, specify Profiler configuration settings, run your application, and then stop Profiler. Note Because of the way the Notes Client performs caching, you should restart the Notes Client before running Profiler. To Start Teamstudio Profiler In Designer, open the application you want to profile. Click the Profiler button on the toolbar. You see the Teamstudio Profiler window with the name of your database in the top field. Note Profiler will not let you profile a database that has a hidden design. An error will appear. Click OK to accept the error and the Teamstudio Profiler window will appear. The Begin button will be inactive. Setting Profiler Options You can set Profiler options as shown in the following table. Option Description Function Profiling Collect timing information on functions. If you choose this option, you can also choose the Entry Points option. Line Profiling Collect timing information on lines of LotusScript. This option gives the most detail. Entry Points Collect information on entry points to a function. Entry Points are functions like Initialize, Terminate, Click and Bind Events. This option gives the least detail, and can show you where to start. You can only select this if you have also selected the Function Profiling option. Note Line profiling is not available for code included from .lss files. To begin profiling From the Profiler window, click Begin to start Profiler. Open your database and use it as you normally would to trigger the code that you want to profile. Note Do not save things in Designer while Profiler is running. Unpredictable results will occur. To view the results Profiler has collected When you are finished, click the Profiler icon to stop Profiler. You see the Teamstudio Profiler results window.","title":"Running Profiler"},{"location":"ja/profiler/running/#running-profiler","text":"To run Profiler with your application, you select your target database, specify Profiler configuration settings, run your application, and then stop Profiler. Note Because of the way the Notes Client performs caching, you should restart the Notes Client before running Profiler.","title":"Running Profiler"},{"location":"ja/profiler/running/#to-start-teamstudio-profiler","text":"In Designer, open the application you want to profile. Click the Profiler button on the toolbar. You see the Teamstudio Profiler window with the name of your database in the top field. Note Profiler will not let you profile a database that has a hidden design. An error will appear. Click OK to accept the error and the Teamstudio Profiler window will appear. The Begin button will be inactive.","title":"To Start Teamstudio Profiler"},{"location":"ja/profiler/running/#setting-profiler-options","text":"You can set Profiler options as shown in the following table. Option Description Function Profiling Collect timing information on functions. If you choose this option, you can also choose the Entry Points option. Line Profiling Collect timing information on lines of LotusScript. This option gives the most detail. Entry Points Collect information on entry points to a function. Entry Points are functions like Initialize, Terminate, Click and Bind Events. This option gives the least detail, and can show you where to start. You can only select this if you have also selected the Function Profiling option. Note Line profiling is not available for code included from .lss files.","title":"Setting Profiler Options"},{"location":"ja/profiler/running/#to-begin-profiling","text":"From the Profiler window, click Begin to start Profiler. Open your database and use it as you normally would to trigger the code that you want to profile. Note Do not save things in Designer while Profiler is running. Unpredictable results will occur.","title":"To begin profiling"},{"location":"ja/profiler/running/#to-view-the-results-profiler-has-collected","text":"When you are finished, click the Profiler icon to stop Profiler. You see the Teamstudio Profiler results window.","title":"To view the results Profiler has collected"},{"location":"ja/profiler/server/","text":"Using Profiler Server Install the Profiler Server on your Domino server so you can monitor the performance activity of a scheduled or Web agent. Profiler Server uses the following databases on your server: Teamstudio/ProfilerConfig.nsf \u2013 Where you tell Profiler what to monitor. Teamstudio/ProfilerLog.nsf \u2013 Where Profiler keeps its results. Note Profiler is not intended to be used to monitor agents all of the time. Profiler creates a significant performance hit each time it is triggered by an agent. When not using Profiler, we recommend that you disable every agent in the Profiler Configuration database.","title":"Using Profiler Server"},{"location":"ja/profiler/server/#using-profiler-server","text":"Install the Profiler Server on your Domino server so you can monitor the performance activity of a scheduled or Web agent. Profiler Server uses the following databases on your server: Teamstudio/ProfilerConfig.nsf \u2013 Where you tell Profiler what to monitor. Teamstudio/ProfilerLog.nsf \u2013 Where Profiler keeps its results. Note Profiler is not intended to be used to monitor agents all of the time. Profiler creates a significant performance hit each time it is triggered by an agent. When not using Profiler, we recommend that you disable every agent in the Profiler Configuration database.","title":"Using Profiler Server"},{"location":"ja/profiler/troubleshooting/","text":"Troubleshooting Profiler The following tips may help prevent or resolve issues you could encounter when running Profiler: Because of the way the Notes client performs caching, you should restart the Notes client before running Profiler. Line profiling is not available for code included from .lss files. Make sure the code you want to profile has not yet been loaded when you start Profiler. For example, if you want to profile the LotusScript code for a button, make sure that the form that the button is on is not open. Otherwise, Profiler will not recognize that the code is running.","title":"Troubleshooting Profiler"},{"location":"ja/profiler/troubleshooting/#troubleshooting-profiler","text":"The following tips may help prevent or resolve issues you could encounter when running Profiler: Because of the way the Notes client performs caching, you should restart the Notes client before running Profiler. Line profiling is not available for code included from .lss files. Make sure the code you want to profile has not yet been loaded when you start Profiler. For example, if you want to profile the LotusScript code for a button, make sure that the form that the button is on is not open. Otherwise, Profiler will not recognize that the code is running.","title":"Troubleshooting Profiler"},{"location":"ja/undo/","text":"Overview Teamstudio Undo keeps track of changes to a database so you can roll back the individual design elements of either templates or databases. If the target database is already under CIAO! control, you can use Undo between check-ins. You can use Undo to retrace your steps to the previous save if you are not satisfied with the changes you have made. Undo saves the history of your elements in the Undo log database, undolog.nsf, which is located in the Teamstudio directory.","title":"Overview"},{"location":"ja/undo/#overview","text":"Teamstudio Undo keeps track of changes to a database so you can roll back the individual design elements of either templates or databases. If the target database is already under CIAO! control, you can use Undo between check-ins. You can use Undo to retrace your steps to the previous save if you are not satisfied with the changes you have made. Undo saves the history of your elements in the Undo log database, undolog.nsf, which is located in the Teamstudio directory.","title":"Overview"},{"location":"ja/undo/configuring/","text":"Configuring Undo To configure tracking of all NTF files Undo automatically keeps track of changes for all NTF files you work with, whether on your local computer, or on a server, so you don't have to configure that. If you are wondering if Undo knows about your NTF file - no worries - it does! If you prefer, you can manually configure Undo to keep track of changes to NSF files, or to keep track of changes within the files or folders you choose. To configure tracking of all NSF files or only selected databases or folders In a text editor, open the Teamstudio.ini file, which is located in the data directory. In the [Undo] section, change the line that says \"IncludeFiles=*.ntf\" as follows: To track the following Change \"IncludeFiles\" line as follows All NSF files only IncludeFiles=*.nsf All NTF and all NSF files IncludeFiles=.ntf,.nsf Just a few databases you want, for example, mytest1.ntf and mytest2.ntf IncludeFiles=mytest1.ntf,mytest2.ntf One directory only, for example, the mail folder IncludeFiles=mail/* Note Teamstudio recommends you only modify the IncludeFiles line if you have a very good reason. By leaving the default, you don't have to try to remember to add a new database or update the line again for a database whose name has changed.","title":"Configuring Undo"},{"location":"ja/undo/configuring/#configuring-undo","text":"","title":"Configuring Undo"},{"location":"ja/undo/configuring/#to-configure-tracking-of-all-ntf-files","text":"Undo automatically keeps track of changes for all NTF files you work with, whether on your local computer, or on a server, so you don't have to configure that. If you are wondering if Undo knows about your NTF file - no worries - it does! If you prefer, you can manually configure Undo to keep track of changes to NSF files, or to keep track of changes within the files or folders you choose.","title":"To configure tracking of all NTF files"},{"location":"ja/undo/configuring/#to-configure-tracking-of-all-nsf-files-or-only-selected-databases-or-folders","text":"In a text editor, open the Teamstudio.ini file, which is located in the data directory. In the [Undo] section, change the line that says \"IncludeFiles=*.ntf\" as follows: To track the following Change \"IncludeFiles\" line as follows All NSF files only IncludeFiles=*.nsf All NTF and all NSF files IncludeFiles=.ntf,.nsf Just a few databases you want, for example, mytest1.ntf and mytest2.ntf IncludeFiles=mytest1.ntf,mytest2.ntf One directory only, for example, the mail folder IncludeFiles=mail/* Note Teamstudio recommends you only modify the IncludeFiles line if you have a very good reason. By leaving the default, you don't have to try to remember to add a new database or update the line again for a database whose name has changed.","title":"To configure tracking of all NSF files or only selected databases or folders"},{"location":"ja/undo/undoing/","text":"Undoing a Change To rollback database design element changes From Designer, click the Undo button on the toolbar. You see the Teamstudio Undo window with the following element change information: The design element type, the element name, the changes in the order they were made, the date and time of the changes and the signature before the changes were made. Note If you select a database icon from the Notes workspace and then click Undo, you'll be prompted to browse to the database file. You can avoid having to browse to the database file by first opening the file in Designer and then clicking Undo from the toolbar. Select version of the design element you want to roll back to. Click Rollback to selected . The copy of the design element captured at that time will replace the design element in the database.","title":"Undoing a Change"},{"location":"ja/undo/undoing/#undoing-a-change","text":"","title":"Undoing a Change"},{"location":"ja/undo/undoing/#to-rollback-database-design-element-changes","text":"From Designer, click the Undo button on the toolbar. You see the Teamstudio Undo window with the following element change information: The design element type, the element name, the changes in the order they were made, the date and time of the changes and the signature before the changes were made. Note If you select a database icon from the Notes workspace and then click Undo, you'll be prompted to browse to the database file. You can avoid having to browse to the database file by first opening the file in Designer and then clicking Undo from the toolbar. Select version of the design element you want to roll back to. Click Rollback to selected . The copy of the design element captured at that time will replace the design element in the database.","title":"To rollback database design element changes"},{"location":"ja/undo/viewing/","text":"Viewing Design Element Changes Note Undo does not keep track of changes to documents. To View Design Element Changes From Designer, click the Undo button on the toolbar to open the Undo window. Note If you select a database icon from the Notes workspace and then click Undo, you'll be prompted to browse to the database file. You can avoid having to browse to the database file by first opening the file in Designer and then clicking Undo from the toolbar. Select the version of the design element you want to view changes for. Click the Delta button to view the difference between the element in the undo buffer and its current version. Click Close to return to the Undo client. Note You can also use Delta to compare two undo buffer design element versions. Select one version. Press and hold the CTRL key. Select the second version (the two elements must be of the same type.) Click the Delta button. See Using Delta for more information on using Delta.","title":"Viewing Design Element Changes"},{"location":"ja/undo/viewing/#viewing-design-element-changes","text":"Note Undo does not keep track of changes to documents.","title":"Viewing Design Element Changes"},{"location":"ja/undo/viewing/#to-view-design-element-changes","text":"From Designer, click the Undo button on the toolbar to open the Undo window. Note If you select a database icon from the Notes workspace and then click Undo, you'll be prompted to browse to the database file. You can avoid having to browse to the database file by first opening the file in Designer and then clicking Undo from the toolbar. Select the version of the design element you want to view changes for. Click the Delta button to view the difference between the element in the undo buffer and its current version. Click Close to return to the Undo client. Note You can also use Delta to compare two undo buffer design element versions. Select one version. Press and hold the CTRL key. Select the second version (the two elements must be of the same type.) Click the Delta button. See Using Delta for more information on using Delta.","title":"To View Design Element Changes"}]}